
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type CarBrandPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    models: CarModelPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    logo: string
    reference: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["carBrand"]>
  composites: {}
}

/**
 * Model CarBrand
 * 
 */
export type CarBrand = runtime.Types.DefaultSelection<CarBrandPayload>
export type CarModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    brand: CarBrandPayload<ExtArgs>
    scrapedCars: ScrapedCarPayload<ExtArgs>[]
    devices: DevicePayload<ExtArgs>[]
    interestedUsers: UserModelInterestPayload<ExtArgs>[]
    users: UserCarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    image: string | null
    reference: string | null
    createdAt: Date
    updatedAt: Date
    brandId: string
  }, ExtArgs["result"]["carModel"]>
  composites: {}
}

/**
 * Model CarModel
 * 
 */
export type CarModel = runtime.Types.DefaultSelection<CarModelPayload>
export type SectionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    devices: DevicePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    image: string
    createdAt: Date
    updatedAt: Date
    slug: string | null
    reference: string | null
  }, ExtArgs["result"]["section"]>
  composites: {}
}

/**
 * Model Section
 * 
 */
export type Section = runtime.Types.DefaultSelection<SectionPayload>
export type DevicePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    dealers: DeviceDealerPayload<ExtArgs>[]
    section: SectionPayload<ExtArgs>
    carModel: CarModelPayload<ExtArgs>
    interestedUsers: UserDeviceInterestPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    image: string | null
    createdAt: Date
    updatedAt: Date
    sectionId: string
    carModelId: string
    reference: string | null
    slug: string | null
  }, ExtArgs["result"]["device"]>
  composites: {}
}

/**
 * Model Device
 * 
 */
export type Device = runtime.Types.DefaultSelection<DevicePayload>
export type DealerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    devices: DeviceDealerPayload<ExtArgs>[]
    stocks: StockPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    image: string
    createdAt: Date
    updatedAt: Date
    website: string | null
    phone: string | null
    email: string | null
    reference: string | null
  }, ExtArgs["result"]["dealer"]>
  composites: {}
}

/**
 * Model Dealer
 * 
 */
export type Dealer = runtime.Types.DefaultSelection<DealerPayload>
export type StockPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    devices: DeviceDealerPayload<ExtArgs>[]
    dealer: DealerPayload<ExtArgs>
    ScrapedCar: ScrapedCarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    dealerId: string
    address: string | null
    phone: string | null
    email: string | null
    longitude: number
    latitude: number
    openHours: string | null
  }, ExtArgs["result"]["stock"]>
  composites: {}
}

/**
 * Model Stock
 * 
 */
export type Stock = runtime.Types.DefaultSelection<StockPayload>
export type ScrapedCarPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    carModel: CarModelPayload<ExtArgs>
    Stock: StockPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    image: string | null
    images: string[]
    fuel: string | null
    chassis: string | null
    carModelId: string
    reference: string | null
    stockId: string | null
    description: string | null
    body: string | null
    mileage: string | null
    modelYear: string | null
  }, ExtArgs["result"]["scrapedCar"]>
  composites: {}
}

/**
 * Model ScrapedCar
 * 
 */
export type ScrapedCar = runtime.Types.DefaultSelection<ScrapedCarPayload>
export type DeviceDealerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    device: DevicePayload<ExtArgs>
    dealer: DealerPayload<ExtArgs>
    Stock: StockPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    deviceId: string
    dealerId: string
    name: string
    image: string | null
    images: string[]
    originalNumber: string | null
    manufacturerCode: string | null
    manufacturer: string | null
    reference: string | null
    price: number | null
    discount: number | null
    stockId: string | null
    type: string | null
    subtype: string | null
    description: string | null
    quality: string | null
    articleNumber: string | null
    isUsed: boolean | null
    status: string | null
    modelYear: string | null
  }, ExtArgs["result"]["deviceDealer"]>
  composites: {}
}

/**
 * Model DeviceDealer
 * 
 */
export type DeviceDealer = runtime.Types.DefaultSelection<DeviceDealerPayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    pushTokens: PushTokenPayload<ExtArgs>[]
    interestedModels: UserModelInterestPayload<ExtArgs>[]
    interestedDevices: UserDeviceInterestPayload<ExtArgs>[]
    cars: UserCarPayload<ExtArgs>[]
    addresses: UserAddressPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    email: string
    name: string | null
    image: string | null
    password: string
    createdAt: Date
    updatedAt: Date
    role: string
    appleId: string | null
    stripeId: string | null
    telephone: string | null
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type UserModelInterestPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: UserPayload<ExtArgs>
    carModel: CarModelPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    carModelId: string
  }, ExtArgs["result"]["userModelInterest"]>
  composites: {}
}

/**
 * Model UserModelInterest
 * 
 */
export type UserModelInterest = runtime.Types.DefaultSelection<UserModelInterestPayload>
export type UserDeviceInterestPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: UserPayload<ExtArgs>
    device: DevicePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    deviceId: string
  }, ExtArgs["result"]["userDeviceInterest"]>
  composites: {}
}

/**
 * Model UserDeviceInterest
 * 
 */
export type UserDeviceInterest = runtime.Types.DefaultSelection<UserDeviceInterestPayload>
export type PushTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    token: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pushToken"]>
  composites: {}
}

/**
 * Model PushToken
 * 
 */
export type PushToken = runtime.Types.DefaultSelection<PushTokenPayload>
export type UserCarPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: UserPayload<ExtArgs>
    carModel: CarModelPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    carModelId: string
    registerNumber: string
    color: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userCar"]>
  composites: {}
}

/**
 * Model UserCar
 * 
 */
export type UserCar = runtime.Types.DefaultSelection<UserCarPayload>
export type CarCenterPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    services: CarCenterServicePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    image: string
    createdAt: Date
    updatedAt: Date
    slug: string | null
    reference: string | null
    longitude: number
    latitude: number
    address: string | null
    telephone: string | null
    email: string | null
  }, ExtArgs["result"]["carCenter"]>
  composites: {}
}

/**
 * Model CarCenter
 * 
 */
export type CarCenter = runtime.Types.DefaultSelection<CarCenterPayload>
export type CarServicePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    centers: CarCenterServicePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    createdAt: Date
    image: string | null
    updatedAt: Date
  }, ExtArgs["result"]["carService"]>
  composites: {}
}

/**
 * Model CarService
 * 
 */
export type CarService = runtime.Types.DefaultSelection<CarServicePayload>
export type CarCenterServicePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    carCenter: CarCenterPayload<ExtArgs>
    carService: CarServicePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    reference: string | null
    price: number
    description: string | null
    carCenterId: string
    carServiceId: string
  }, ExtArgs["result"]["carCenterService"]>
  composites: {}
}

/**
 * Model CarCenterService
 * 
 */
export type CarCenterService = runtime.Types.DefaultSelection<CarCenterServicePayload>
export type UserAddressPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
  }, ExtArgs["result"]["userAddress"]>
  composites: {}
}

/**
 * Model UserAddress
 * 
 */
export type UserAddress = runtime.Types.DefaultSelection<UserAddressPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CarBrands
 * const carBrands = await prisma.carBrand.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CarBrands
   * const carBrands = await prisma.carBrand.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.carBrand`: Exposes CRUD operations for the **CarBrand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarBrands
    * const carBrands = await prisma.carBrand.findMany()
    * ```
    */
  get carBrand(): Prisma.CarBrandDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.carModel`: Exposes CRUD operations for the **CarModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarModels
    * const carModels = await prisma.carModel.findMany()
    * ```
    */
  get carModel(): Prisma.CarModelDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.device`: Exposes CRUD operations for the **Device** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.device.findMany()
    * ```
    */
  get device(): Prisma.DeviceDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.dealer`: Exposes CRUD operations for the **Dealer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dealers
    * const dealers = await prisma.dealer.findMany()
    * ```
    */
  get dealer(): Prisma.DealerDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.scrapedCar`: Exposes CRUD operations for the **ScrapedCar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScrapedCars
    * const scrapedCars = await prisma.scrapedCar.findMany()
    * ```
    */
  get scrapedCar(): Prisma.ScrapedCarDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.deviceDealer`: Exposes CRUD operations for the **DeviceDealer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceDealers
    * const deviceDealers = await prisma.deviceDealer.findMany()
    * ```
    */
  get deviceDealer(): Prisma.DeviceDealerDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.userModelInterest`: Exposes CRUD operations for the **UserModelInterest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserModelInterests
    * const userModelInterests = await prisma.userModelInterest.findMany()
    * ```
    */
  get userModelInterest(): Prisma.UserModelInterestDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.userDeviceInterest`: Exposes CRUD operations for the **UserDeviceInterest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDeviceInterests
    * const userDeviceInterests = await prisma.userDeviceInterest.findMany()
    * ```
    */
  get userDeviceInterest(): Prisma.UserDeviceInterestDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.pushToken`: Exposes CRUD operations for the **PushToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PushTokens
    * const pushTokens = await prisma.pushToken.findMany()
    * ```
    */
  get pushToken(): Prisma.PushTokenDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.userCar`: Exposes CRUD operations for the **UserCar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCars
    * const userCars = await prisma.userCar.findMany()
    * ```
    */
  get userCar(): Prisma.UserCarDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.carCenter`: Exposes CRUD operations for the **CarCenter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarCenters
    * const carCenters = await prisma.carCenter.findMany()
    * ```
    */
  get carCenter(): Prisma.CarCenterDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.carService`: Exposes CRUD operations for the **CarService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarServices
    * const carServices = await prisma.carService.findMany()
    * ```
    */
  get carService(): Prisma.CarServiceDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.carCenterService`: Exposes CRUD operations for the **CarCenterService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarCenterServices
    * const carCenterServices = await prisma.carCenterService.findMany()
    * ```
    */
  get carCenterService(): Prisma.CarCenterServiceDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.userAddress`: Exposes CRUD operations for the **UserAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAddresses
    * const userAddresses = await prisma.userAddress.findMany()
    * ```
    */
  get userAddress(): Prisma.UserAddressDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.1
   * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CarBrand: 'CarBrand',
    CarModel: 'CarModel',
    Section: 'Section',
    Device: 'Device',
    Dealer: 'Dealer',
    Stock: 'Stock',
    ScrapedCar: 'ScrapedCar',
    DeviceDealer: 'DeviceDealer',
    User: 'User',
    UserModelInterest: 'UserModelInterest',
    UserDeviceInterest: 'UserDeviceInterest',
    PushToken: 'PushToken',
    UserCar: 'UserCar',
    CarCenter: 'CarCenter',
    CarService: 'CarService',
    CarCenterService: 'CarCenterService',
    UserAddress: 'UserAddress'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'carBrand' | 'carModel' | 'section' | 'device' | 'dealer' | 'stock' | 'scrapedCar' | 'deviceDealer' | 'user' | 'userModelInterest' | 'userDeviceInterest' | 'pushToken' | 'userCar' | 'carCenter' | 'carService' | 'carCenterService' | 'userAddress'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      CarBrand: {
        operations: {
          findUnique: {
            args: Prisma.CarBrandFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload> | null
            payload: CarBrandPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.CarBrandFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload>
            payload: CarBrandPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.CarBrandFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload> | null
            payload: CarBrandPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.CarBrandFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload>
            payload: CarBrandPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.CarBrandFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload>[]
            payload: CarBrandPayload<ExtArgs>
          }
          create: {
            args: Prisma.CarBrandCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload>
            payload: CarBrandPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.CarBrandCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarBrandPayload<ExtArgs>
          }
          delete: {
            args: Prisma.CarBrandDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload>
            payload: CarBrandPayload<ExtArgs>
          }
          update: {
            args: Prisma.CarBrandUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload>
            payload: CarBrandPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.CarBrandDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarBrandPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.CarBrandUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarBrandPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.CarBrandUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarBrandPayload>
            payload: CarBrandPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CarBrandAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarBrand>
            payload: CarBrandPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CarBrandGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarBrandGroupByOutputType>[]
            payload: CarBrandPayload<ExtArgs>
          }
          count: {
            args: Prisma.CarBrandCountArgs<ExtArgs>,
            result: $Utils.Optional<CarBrandCountAggregateOutputType> | number
            payload: CarBrandPayload<ExtArgs>
          }
        }
      }
      CarModel: {
        operations: {
          findUnique: {
            args: Prisma.CarModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload> | null
            payload: CarModelPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.CarModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload>
            payload: CarModelPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.CarModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload> | null
            payload: CarModelPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.CarModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload>
            payload: CarModelPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.CarModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload>[]
            payload: CarModelPayload<ExtArgs>
          }
          create: {
            args: Prisma.CarModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload>
            payload: CarModelPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.CarModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarModelPayload<ExtArgs>
          }
          delete: {
            args: Prisma.CarModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload>
            payload: CarModelPayload<ExtArgs>
          }
          update: {
            args: Prisma.CarModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload>
            payload: CarModelPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.CarModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarModelPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.CarModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarModelPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.CarModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarModelPayload>
            payload: CarModelPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CarModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarModel>
            payload: CarModelPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CarModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarModelGroupByOutputType>[]
            payload: CarModelPayload<ExtArgs>
          }
          count: {
            args: Prisma.CarModelCountArgs<ExtArgs>,
            result: $Utils.Optional<CarModelCountAggregateOutputType> | number
            payload: CarModelPayload<ExtArgs>
          }
        }
      }
      Section: {
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload> | null
            payload: SectionPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload>
            payload: SectionPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload> | null
            payload: SectionPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload>
            payload: SectionPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload>[]
            payload: SectionPayload<ExtArgs>
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload>
            payload: SectionPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SectionPayload<ExtArgs>
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload>
            payload: SectionPayload<ExtArgs>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload>
            payload: SectionPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SectionPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SectionPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SectionPayload>
            payload: SectionPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSection>
            payload: SectionPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SectionGroupByOutputType>[]
            payload: SectionPayload<ExtArgs>
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>,
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
            payload: SectionPayload<ExtArgs>
          }
        }
      }
      Device: {
        operations: {
          findUnique: {
            args: Prisma.DeviceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload> | null
            payload: DevicePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload>
            payload: DevicePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.DeviceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload> | null
            payload: DevicePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.DeviceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload>
            payload: DevicePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.DeviceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload>[]
            payload: DevicePayload<ExtArgs>
          }
          create: {
            args: Prisma.DeviceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload>
            payload: DevicePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.DeviceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DevicePayload<ExtArgs>
          }
          delete: {
            args: Prisma.DeviceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload>
            payload: DevicePayload<ExtArgs>
          }
          update: {
            args: Prisma.DeviceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload>
            payload: DevicePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.DeviceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DevicePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.DeviceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DevicePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.DeviceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DevicePayload>
            payload: DevicePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.DeviceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDevice>
            payload: DevicePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.DeviceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DeviceGroupByOutputType>[]
            payload: DevicePayload<ExtArgs>
          }
          count: {
            args: Prisma.DeviceCountArgs<ExtArgs>,
            result: $Utils.Optional<DeviceCountAggregateOutputType> | number
            payload: DevicePayload<ExtArgs>
          }
        }
      }
      Dealer: {
        operations: {
          findUnique: {
            args: Prisma.DealerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload> | null
            payload: DealerPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.DealerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload>
            payload: DealerPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.DealerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload> | null
            payload: DealerPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.DealerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload>
            payload: DealerPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.DealerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload>[]
            payload: DealerPayload<ExtArgs>
          }
          create: {
            args: Prisma.DealerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload>
            payload: DealerPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.DealerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DealerPayload<ExtArgs>
          }
          delete: {
            args: Prisma.DealerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload>
            payload: DealerPayload<ExtArgs>
          }
          update: {
            args: Prisma.DealerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload>
            payload: DealerPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.DealerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DealerPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.DealerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DealerPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.DealerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DealerPayload>
            payload: DealerPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.DealerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDealer>
            payload: DealerPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.DealerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DealerGroupByOutputType>[]
            payload: DealerPayload<ExtArgs>
          }
          count: {
            args: Prisma.DealerCountArgs<ExtArgs>,
            result: $Utils.Optional<DealerCountAggregateOutputType> | number
            payload: DealerPayload<ExtArgs>
          }
        }
      }
      Stock: {
        operations: {
          findUnique: {
            args: Prisma.StockFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload> | null
            payload: StockPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.StockFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload>
            payload: StockPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.StockFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload> | null
            payload: StockPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.StockFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload>
            payload: StockPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.StockFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload>[]
            payload: StockPayload<ExtArgs>
          }
          create: {
            args: Prisma.StockCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload>
            payload: StockPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.StockCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: StockPayload<ExtArgs>
          }
          delete: {
            args: Prisma.StockDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload>
            payload: StockPayload<ExtArgs>
          }
          update: {
            args: Prisma.StockUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload>
            payload: StockPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.StockDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: StockPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.StockUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: StockPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.StockUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StockPayload>
            payload: StockPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.StockAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStock>
            payload: StockPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.StockGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StockGroupByOutputType>[]
            payload: StockPayload<ExtArgs>
          }
          count: {
            args: Prisma.StockCountArgs<ExtArgs>,
            result: $Utils.Optional<StockCountAggregateOutputType> | number
            payload: StockPayload<ExtArgs>
          }
        }
      }
      ScrapedCar: {
        operations: {
          findUnique: {
            args: Prisma.ScrapedCarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload> | null
            payload: ScrapedCarPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.ScrapedCarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload>
            payload: ScrapedCarPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.ScrapedCarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload> | null
            payload: ScrapedCarPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.ScrapedCarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload>
            payload: ScrapedCarPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.ScrapedCarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload>[]
            payload: ScrapedCarPayload<ExtArgs>
          }
          create: {
            args: Prisma.ScrapedCarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload>
            payload: ScrapedCarPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.ScrapedCarCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ScrapedCarPayload<ExtArgs>
          }
          delete: {
            args: Prisma.ScrapedCarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload>
            payload: ScrapedCarPayload<ExtArgs>
          }
          update: {
            args: Prisma.ScrapedCarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload>
            payload: ScrapedCarPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.ScrapedCarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ScrapedCarPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.ScrapedCarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ScrapedCarPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.ScrapedCarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ScrapedCarPayload>
            payload: ScrapedCarPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.ScrapedCarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateScrapedCar>
            payload: ScrapedCarPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.ScrapedCarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ScrapedCarGroupByOutputType>[]
            payload: ScrapedCarPayload<ExtArgs>
          }
          count: {
            args: Prisma.ScrapedCarCountArgs<ExtArgs>,
            result: $Utils.Optional<ScrapedCarCountAggregateOutputType> | number
            payload: ScrapedCarPayload<ExtArgs>
          }
        }
      }
      DeviceDealer: {
        operations: {
          findUnique: {
            args: Prisma.DeviceDealerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload> | null
            payload: DeviceDealerPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceDealerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload>
            payload: DeviceDealerPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.DeviceDealerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload> | null
            payload: DeviceDealerPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.DeviceDealerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload>
            payload: DeviceDealerPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.DeviceDealerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload>[]
            payload: DeviceDealerPayload<ExtArgs>
          }
          create: {
            args: Prisma.DeviceDealerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload>
            payload: DeviceDealerPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.DeviceDealerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DeviceDealerPayload<ExtArgs>
          }
          delete: {
            args: Prisma.DeviceDealerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload>
            payload: DeviceDealerPayload<ExtArgs>
          }
          update: {
            args: Prisma.DeviceDealerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload>
            payload: DeviceDealerPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.DeviceDealerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DeviceDealerPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.DeviceDealerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: DeviceDealerPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.DeviceDealerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeviceDealerPayload>
            payload: DeviceDealerPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.DeviceDealerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDeviceDealer>
            payload: DeviceDealerPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.DeviceDealerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DeviceDealerGroupByOutputType>[]
            payload: DeviceDealerPayload<ExtArgs>
          }
          count: {
            args: Prisma.DeviceDealerCountArgs<ExtArgs>,
            result: $Utils.Optional<DeviceDealerCountAggregateOutputType> | number
            payload: DeviceDealerPayload<ExtArgs>
          }
        }
      }
      User: {
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
            payload: UserPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
            payload: UserPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
            payload: UserPayload<ExtArgs>
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
            payload: UserPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
            payload: UserPayload<ExtArgs>
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
            payload: UserPayload<ExtArgs>
          }
        }
      }
      UserModelInterest: {
        operations: {
          findUnique: {
            args: Prisma.UserModelInterestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload> | null
            payload: UserModelInterestPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UserModelInterestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload>
            payload: UserModelInterestPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UserModelInterestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload> | null
            payload: UserModelInterestPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UserModelInterestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload>
            payload: UserModelInterestPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UserModelInterestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload>[]
            payload: UserModelInterestPayload<ExtArgs>
          }
          create: {
            args: Prisma.UserModelInterestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload>
            payload: UserModelInterestPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.UserModelInterestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserModelInterestPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UserModelInterestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload>
            payload: UserModelInterestPayload<ExtArgs>
          }
          update: {
            args: Prisma.UserModelInterestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload>
            payload: UserModelInterestPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UserModelInterestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserModelInterestPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UserModelInterestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserModelInterestPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UserModelInterestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserModelInterestPayload>
            payload: UserModelInterestPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UserModelInterestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserModelInterest>
            payload: UserModelInterestPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UserModelInterestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserModelInterestGroupByOutputType>[]
            payload: UserModelInterestPayload<ExtArgs>
          }
          count: {
            args: Prisma.UserModelInterestCountArgs<ExtArgs>,
            result: $Utils.Optional<UserModelInterestCountAggregateOutputType> | number
            payload: UserModelInterestPayload<ExtArgs>
          }
        }
      }
      UserDeviceInterest: {
        operations: {
          findUnique: {
            args: Prisma.UserDeviceInterestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload> | null
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UserDeviceInterestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload>
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UserDeviceInterestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload> | null
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UserDeviceInterestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload>
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UserDeviceInterestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload>[]
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          create: {
            args: Prisma.UserDeviceInterestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload>
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.UserDeviceInterestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UserDeviceInterestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload>
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          update: {
            args: Prisma.UserDeviceInterestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload>
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UserDeviceInterestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UserDeviceInterestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UserDeviceInterestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserDeviceInterestPayload>
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UserDeviceInterestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserDeviceInterest>
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UserDeviceInterestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserDeviceInterestGroupByOutputType>[]
            payload: UserDeviceInterestPayload<ExtArgs>
          }
          count: {
            args: Prisma.UserDeviceInterestCountArgs<ExtArgs>,
            result: $Utils.Optional<UserDeviceInterestCountAggregateOutputType> | number
            payload: UserDeviceInterestPayload<ExtArgs>
          }
        }
      }
      PushToken: {
        operations: {
          findUnique: {
            args: Prisma.PushTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload> | null
            payload: PushTokenPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.PushTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload>
            payload: PushTokenPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.PushTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload> | null
            payload: PushTokenPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.PushTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload>
            payload: PushTokenPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.PushTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload>[]
            payload: PushTokenPayload<ExtArgs>
          }
          create: {
            args: Prisma.PushTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload>
            payload: PushTokenPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.PushTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: PushTokenPayload<ExtArgs>
          }
          delete: {
            args: Prisma.PushTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload>
            payload: PushTokenPayload<ExtArgs>
          }
          update: {
            args: Prisma.PushTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload>
            payload: PushTokenPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.PushTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: PushTokenPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.PushTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: PushTokenPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.PushTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PushTokenPayload>
            payload: PushTokenPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.PushTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePushToken>
            payload: PushTokenPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.PushTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PushTokenGroupByOutputType>[]
            payload: PushTokenPayload<ExtArgs>
          }
          count: {
            args: Prisma.PushTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<PushTokenCountAggregateOutputType> | number
            payload: PushTokenPayload<ExtArgs>
          }
        }
      }
      UserCar: {
        operations: {
          findUnique: {
            args: Prisma.UserCarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload> | null
            payload: UserCarPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UserCarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload>
            payload: UserCarPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UserCarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload> | null
            payload: UserCarPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UserCarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload>
            payload: UserCarPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UserCarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload>[]
            payload: UserCarPayload<ExtArgs>
          }
          create: {
            args: Prisma.UserCarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload>
            payload: UserCarPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.UserCarCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserCarPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UserCarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload>
            payload: UserCarPayload<ExtArgs>
          }
          update: {
            args: Prisma.UserCarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload>
            payload: UserCarPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UserCarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserCarPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UserCarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserCarPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UserCarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserCarPayload>
            payload: UserCarPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UserCarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserCar>
            payload: UserCarPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UserCarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserCarGroupByOutputType>[]
            payload: UserCarPayload<ExtArgs>
          }
          count: {
            args: Prisma.UserCarCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCarCountAggregateOutputType> | number
            payload: UserCarPayload<ExtArgs>
          }
        }
      }
      CarCenter: {
        operations: {
          findUnique: {
            args: Prisma.CarCenterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload> | null
            payload: CarCenterPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.CarCenterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload>
            payload: CarCenterPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.CarCenterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload> | null
            payload: CarCenterPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.CarCenterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload>
            payload: CarCenterPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.CarCenterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload>[]
            payload: CarCenterPayload<ExtArgs>
          }
          create: {
            args: Prisma.CarCenterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload>
            payload: CarCenterPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.CarCenterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarCenterPayload<ExtArgs>
          }
          delete: {
            args: Prisma.CarCenterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload>
            payload: CarCenterPayload<ExtArgs>
          }
          update: {
            args: Prisma.CarCenterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload>
            payload: CarCenterPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.CarCenterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarCenterPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.CarCenterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarCenterPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.CarCenterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterPayload>
            payload: CarCenterPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CarCenterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarCenter>
            payload: CarCenterPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CarCenterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarCenterGroupByOutputType>[]
            payload: CarCenterPayload<ExtArgs>
          }
          count: {
            args: Prisma.CarCenterCountArgs<ExtArgs>,
            result: $Utils.Optional<CarCenterCountAggregateOutputType> | number
            payload: CarCenterPayload<ExtArgs>
          }
        }
      }
      CarService: {
        operations: {
          findUnique: {
            args: Prisma.CarServiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload> | null
            payload: CarServicePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.CarServiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload>
            payload: CarServicePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.CarServiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload> | null
            payload: CarServicePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.CarServiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload>
            payload: CarServicePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.CarServiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload>[]
            payload: CarServicePayload<ExtArgs>
          }
          create: {
            args: Prisma.CarServiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload>
            payload: CarServicePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.CarServiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarServicePayload<ExtArgs>
          }
          delete: {
            args: Prisma.CarServiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload>
            payload: CarServicePayload<ExtArgs>
          }
          update: {
            args: Prisma.CarServiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload>
            payload: CarServicePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.CarServiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarServicePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.CarServiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarServicePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.CarServiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarServicePayload>
            payload: CarServicePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CarServiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarService>
            payload: CarServicePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CarServiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarServiceGroupByOutputType>[]
            payload: CarServicePayload<ExtArgs>
          }
          count: {
            args: Prisma.CarServiceCountArgs<ExtArgs>,
            result: $Utils.Optional<CarServiceCountAggregateOutputType> | number
            payload: CarServicePayload<ExtArgs>
          }
        }
      }
      CarCenterService: {
        operations: {
          findUnique: {
            args: Prisma.CarCenterServiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload> | null
            payload: CarCenterServicePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.CarCenterServiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload>
            payload: CarCenterServicePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.CarCenterServiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload> | null
            payload: CarCenterServicePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.CarCenterServiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload>
            payload: CarCenterServicePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.CarCenterServiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload>[]
            payload: CarCenterServicePayload<ExtArgs>
          }
          create: {
            args: Prisma.CarCenterServiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload>
            payload: CarCenterServicePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.CarCenterServiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarCenterServicePayload<ExtArgs>
          }
          delete: {
            args: Prisma.CarCenterServiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload>
            payload: CarCenterServicePayload<ExtArgs>
          }
          update: {
            args: Prisma.CarCenterServiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload>
            payload: CarCenterServicePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.CarCenterServiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarCenterServicePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.CarCenterServiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CarCenterServicePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.CarCenterServiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarCenterServicePayload>
            payload: CarCenterServicePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CarCenterServiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarCenterService>
            payload: CarCenterServicePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CarCenterServiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarCenterServiceGroupByOutputType>[]
            payload: CarCenterServicePayload<ExtArgs>
          }
          count: {
            args: Prisma.CarCenterServiceCountArgs<ExtArgs>,
            result: $Utils.Optional<CarCenterServiceCountAggregateOutputType> | number
            payload: CarCenterServicePayload<ExtArgs>
          }
        }
      }
      UserAddress: {
        operations: {
          findUnique: {
            args: Prisma.UserAddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload> | null
            payload: UserAddressPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UserAddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload>
            payload: UserAddressPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UserAddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload> | null
            payload: UserAddressPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UserAddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload>
            payload: UserAddressPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UserAddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload>[]
            payload: UserAddressPayload<ExtArgs>
          }
          create: {
            args: Prisma.UserAddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload>
            payload: UserAddressPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.UserAddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserAddressPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UserAddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload>
            payload: UserAddressPayload<ExtArgs>
          }
          update: {
            args: Prisma.UserAddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload>
            payload: UserAddressPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UserAddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserAddressPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UserAddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserAddressPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UserAddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserAddressPayload>
            payload: UserAddressPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UserAddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserAddress>
            payload: UserAddressPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UserAddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserAddressGroupByOutputType>[]
            payload: UserAddressPayload<ExtArgs>
          }
          count: {
            args: Prisma.UserAddressCountArgs<ExtArgs>,
            result: $Utils.Optional<UserAddressCountAggregateOutputType> | number
            payload: UserAddressPayload<ExtArgs>
          }
        }
      }
    }
  } & {
    other: {
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CarBrandCountOutputType
   */


  export type CarBrandCountOutputType = {
    models: number
  }

  export type CarBrandCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    models?: boolean | CarBrandCountOutputTypeCountModelsArgs
  }

  // Custom InputTypes

  /**
   * CarBrandCountOutputType without action
   */
  export type CarBrandCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrandCountOutputType
     */
    select?: CarBrandCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarBrandCountOutputType without action
   */
  export type CarBrandCountOutputTypeCountModelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarModelWhereInput
  }



  /**
   * Count Type CarModelCountOutputType
   */


  export type CarModelCountOutputType = {
    scrapedCars: number
    devices: number
    interestedUsers: number
    users: number
  }

  export type CarModelCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    scrapedCars?: boolean | CarModelCountOutputTypeCountScrapedCarsArgs
    devices?: boolean | CarModelCountOutputTypeCountDevicesArgs
    interestedUsers?: boolean | CarModelCountOutputTypeCountInterestedUsersArgs
    users?: boolean | CarModelCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * CarModelCountOutputType without action
   */
  export type CarModelCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModelCountOutputType
     */
    select?: CarModelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarModelCountOutputType without action
   */
  export type CarModelCountOutputTypeCountScrapedCarsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ScrapedCarWhereInput
  }


  /**
   * CarModelCountOutputType without action
   */
  export type CarModelCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
  }


  /**
   * CarModelCountOutputType without action
   */
  export type CarModelCountOutputTypeCountInterestedUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserModelInterestWhereInput
  }


  /**
   * CarModelCountOutputType without action
   */
  export type CarModelCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserCarWhereInput
  }



  /**
   * Count Type SectionCountOutputType
   */


  export type SectionCountOutputType = {
    devices: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    devices?: boolean | SectionCountOutputTypeCountDevicesArgs
  }

  // Custom InputTypes

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
  }



  /**
   * Count Type DeviceCountOutputType
   */


  export type DeviceCountOutputType = {
    dealers: number
    interestedUsers: number
  }

  export type DeviceCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    dealers?: boolean | DeviceCountOutputTypeCountDealersArgs
    interestedUsers?: boolean | DeviceCountOutputTypeCountInterestedUsersArgs
  }

  // Custom InputTypes

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceCountOutputType
     */
    select?: DeviceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountDealersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeviceDealerWhereInput
  }


  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountInterestedUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserDeviceInterestWhereInput
  }



  /**
   * Count Type DealerCountOutputType
   */


  export type DealerCountOutputType = {
    devices: number
    stocks: number
  }

  export type DealerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    devices?: boolean | DealerCountOutputTypeCountDevicesArgs
    stocks?: boolean | DealerCountOutputTypeCountStocksArgs
  }

  // Custom InputTypes

  /**
   * DealerCountOutputType without action
   */
  export type DealerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealerCountOutputType
     */
    select?: DealerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DealerCountOutputType without action
   */
  export type DealerCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeviceDealerWhereInput
  }


  /**
   * DealerCountOutputType without action
   */
  export type DealerCountOutputTypeCountStocksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }



  /**
   * Count Type StockCountOutputType
   */


  export type StockCountOutputType = {
    devices: number
    ScrapedCar: number
  }

  export type StockCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    devices?: boolean | StockCountOutputTypeCountDevicesArgs
    ScrapedCar?: boolean | StockCountOutputTypeCountScrapedCarArgs
  }

  // Custom InputTypes

  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockCountOutputType
     */
    select?: StockCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeviceDealerWhereInput
  }


  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeCountScrapedCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ScrapedCarWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    pushTokens: number
    interestedModels: number
    interestedDevices: number
    cars: number
    addresses: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    pushTokens?: boolean | UserCountOutputTypeCountPushTokensArgs
    interestedModels?: boolean | UserCountOutputTypeCountInterestedModelsArgs
    interestedDevices?: boolean | UserCountOutputTypeCountInterestedDevicesArgs
    cars?: boolean | UserCountOutputTypeCountCarsArgs
    addresses?: boolean | UserCountOutputTypeCountAddressesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPushTokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PushTokenWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInterestedModelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserModelInterestWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInterestedDevicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserDeviceInterestWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserCarWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAddressesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserAddressWhereInput
  }



  /**
   * Count Type CarCenterCountOutputType
   */


  export type CarCenterCountOutputType = {
    services: number
  }

  export type CarCenterCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    services?: boolean | CarCenterCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes

  /**
   * CarCenterCountOutputType without action
   */
  export type CarCenterCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterCountOutputType
     */
    select?: CarCenterCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarCenterCountOutputType without action
   */
  export type CarCenterCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarCenterServiceWhereInput
  }



  /**
   * Count Type CarServiceCountOutputType
   */


  export type CarServiceCountOutputType = {
    centers: number
  }

  export type CarServiceCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    centers?: boolean | CarServiceCountOutputTypeCountCentersArgs
  }

  // Custom InputTypes

  /**
   * CarServiceCountOutputType without action
   */
  export type CarServiceCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarServiceCountOutputType
     */
    select?: CarServiceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarServiceCountOutputType without action
   */
  export type CarServiceCountOutputTypeCountCentersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarCenterServiceWhereInput
  }



  /**
   * Models
   */

  /**
   * Model CarBrand
   */


  export type AggregateCarBrand = {
    _count: CarBrandCountAggregateOutputType | null
    _min: CarBrandMinAggregateOutputType | null
    _max: CarBrandMaxAggregateOutputType | null
  }

  export type CarBrandMinAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    reference: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarBrandMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    reference: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarBrandCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    reference: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarBrandMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    reference?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarBrandMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    reference?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarBrandCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    reference?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarBrandAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarBrand to aggregate.
     */
    where?: CarBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarBrands to fetch.
     */
    orderBy?: Enumerable<CarBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarBrands
    **/
    _count?: true | CarBrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarBrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarBrandMaxAggregateInputType
  }

  export type GetCarBrandAggregateType<T extends CarBrandAggregateArgs> = {
        [P in keyof T & keyof AggregateCarBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarBrand[P]>
      : GetScalarType<T[P], AggregateCarBrand[P]>
  }




  export type CarBrandGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarBrandWhereInput
    orderBy?: Enumerable<CarBrandOrderByWithAggregationInput>
    by: CarBrandScalarFieldEnum[]
    having?: CarBrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarBrandCountAggregateInputType | true
    _min?: CarBrandMinAggregateInputType
    _max?: CarBrandMaxAggregateInputType
  }


  export type CarBrandGroupByOutputType = {
    id: string
    name: string
    logo: string
    reference: string
    createdAt: Date
    updatedAt: Date
    _count: CarBrandCountAggregateOutputType | null
    _min: CarBrandMinAggregateOutputType | null
    _max: CarBrandMaxAggregateOutputType | null
  }

  type GetCarBrandGroupByPayload<T extends CarBrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarBrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarBrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarBrandGroupByOutputType[P]>
            : GetScalarType<T[P], CarBrandGroupByOutputType[P]>
        }
      >
    >


  export type CarBrandSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    reference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    models?: boolean | CarBrand$modelsArgs<ExtArgs>
    _count?: boolean | CarBrandCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["carBrand"]>

  export type CarBrandSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    reference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CarBrandInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    models?: boolean | CarBrand$modelsArgs<ExtArgs>
    _count?: boolean | CarBrandCountOutputTypeArgs<ExtArgs>
  }


  type CarBrandGetPayload<S extends boolean | null | undefined | CarBrandArgs> = $Types.GetResult<CarBrandPayload, S>

  type CarBrandCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CarBrandFindManyArgs, 'select' | 'include'> & {
      select?: CarBrandCountAggregateInputType | true
    }

  export interface CarBrandDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarBrand'], meta: { name: 'CarBrand' } }
    /**
     * Find zero or one CarBrand that matches the filter.
     * @param {CarBrandFindUniqueArgs} args - Arguments to find a CarBrand
     * @example
     * // Get one CarBrand
     * const carBrand = await prisma.carBrand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarBrandFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarBrandFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CarBrand'> extends True ? Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CarBrand that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarBrandFindUniqueOrThrowArgs} args - Arguments to find a CarBrand
     * @example
     * // Get one CarBrand
     * const carBrand = await prisma.carBrand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarBrandFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarBrandFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CarBrand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandFindFirstArgs} args - Arguments to find a CarBrand
     * @example
     * // Get one CarBrand
     * const carBrand = await prisma.carBrand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarBrandFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarBrandFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CarBrand'> extends True ? Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CarBrand that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandFindFirstOrThrowArgs} args - Arguments to find a CarBrand
     * @example
     * // Get one CarBrand
     * const carBrand = await prisma.carBrand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarBrandFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarBrandFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CarBrands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarBrands
     * const carBrands = await prisma.carBrand.findMany()
     * 
     * // Get first 10 CarBrands
     * const carBrands = await prisma.carBrand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carBrandWithIdOnly = await prisma.carBrand.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarBrandFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarBrandFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CarBrand.
     * @param {CarBrandCreateArgs} args - Arguments to create a CarBrand.
     * @example
     * // Create one CarBrand
     * const CarBrand = await prisma.carBrand.create({
     *   data: {
     *     // ... data to create a CarBrand
     *   }
     * })
     * 
    **/
    create<T extends CarBrandCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarBrandCreateArgs<ExtArgs>>
    ): Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CarBrands.
     *     @param {CarBrandCreateManyArgs} args - Arguments to create many CarBrands.
     *     @example
     *     // Create many CarBrands
     *     const carBrand = await prisma.carBrand.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarBrandCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarBrandCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarBrand.
     * @param {CarBrandDeleteArgs} args - Arguments to delete one CarBrand.
     * @example
     * // Delete one CarBrand
     * const CarBrand = await prisma.carBrand.delete({
     *   where: {
     *     // ... filter to delete one CarBrand
     *   }
     * })
     * 
    **/
    delete<T extends CarBrandDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarBrandDeleteArgs<ExtArgs>>
    ): Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CarBrand.
     * @param {CarBrandUpdateArgs} args - Arguments to update one CarBrand.
     * @example
     * // Update one CarBrand
     * const carBrand = await prisma.carBrand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarBrandUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarBrandUpdateArgs<ExtArgs>>
    ): Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CarBrands.
     * @param {CarBrandDeleteManyArgs} args - Arguments to filter CarBrands to delete.
     * @example
     * // Delete a few CarBrands
     * const { count } = await prisma.carBrand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarBrandDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarBrandDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarBrands
     * const carBrand = await prisma.carBrand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarBrandUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarBrandUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarBrand.
     * @param {CarBrandUpsertArgs} args - Arguments to update or create a CarBrand.
     * @example
     * // Update or create a CarBrand
     * const carBrand = await prisma.carBrand.upsert({
     *   create: {
     *     // ... data to create a CarBrand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarBrand we want to update
     *   }
     * })
    **/
    upsert<T extends CarBrandUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarBrandUpsertArgs<ExtArgs>>
    ): Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CarBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandCountArgs} args - Arguments to filter CarBrands to count.
     * @example
     * // Count the number of CarBrands
     * const count = await prisma.carBrand.count({
     *   where: {
     *     // ... the filter for the CarBrands we want to count
     *   }
     * })
    **/
    count<T extends CarBrandCountArgs>(
      args?: Subset<T, CarBrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarBrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarBrandAggregateArgs>(args: Subset<T, CarBrandAggregateArgs>): Prisma.PrismaPromise<GetCarBrandAggregateType<T>>

    /**
     * Group by CarBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarBrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarBrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarBrandGroupByArgs['orderBy'] }
        : { orderBy?: CarBrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarBrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CarBrand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarBrandClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    models<T extends CarBrand$modelsArgs<ExtArgs> = {}>(args?: Subset<T, CarBrand$modelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CarBrand base type for findUnique actions
   */
  export type CarBrandFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * Filter, which CarBrand to fetch.
     */
    where: CarBrandWhereUniqueInput
  }

  /**
   * CarBrand findUnique
   */
  export interface CarBrandFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarBrandFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarBrand findUniqueOrThrow
   */
  export type CarBrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * Filter, which CarBrand to fetch.
     */
    where: CarBrandWhereUniqueInput
  }


  /**
   * CarBrand base type for findFirst actions
   */
  export type CarBrandFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * Filter, which CarBrand to fetch.
     */
    where?: CarBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarBrands to fetch.
     */
    orderBy?: Enumerable<CarBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarBrands.
     */
    cursor?: CarBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarBrands.
     */
    distinct?: Enumerable<CarBrandScalarFieldEnum>
  }

  /**
   * CarBrand findFirst
   */
  export interface CarBrandFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarBrandFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarBrand findFirstOrThrow
   */
  export type CarBrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * Filter, which CarBrand to fetch.
     */
    where?: CarBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarBrands to fetch.
     */
    orderBy?: Enumerable<CarBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarBrands.
     */
    cursor?: CarBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarBrands.
     */
    distinct?: Enumerable<CarBrandScalarFieldEnum>
  }


  /**
   * CarBrand findMany
   */
  export type CarBrandFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * Filter, which CarBrands to fetch.
     */
    where?: CarBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarBrands to fetch.
     */
    orderBy?: Enumerable<CarBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarBrands.
     */
    cursor?: CarBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarBrands.
     */
    skip?: number
    distinct?: Enumerable<CarBrandScalarFieldEnum>
  }


  /**
   * CarBrand create
   */
  export type CarBrandCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * The data needed to create a CarBrand.
     */
    data: XOR<CarBrandCreateInput, CarBrandUncheckedCreateInput>
  }


  /**
   * CarBrand createMany
   */
  export type CarBrandCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarBrands.
     */
    data: Enumerable<CarBrandCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CarBrand update
   */
  export type CarBrandUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * The data needed to update a CarBrand.
     */
    data: XOR<CarBrandUpdateInput, CarBrandUncheckedUpdateInput>
    /**
     * Choose, which CarBrand to update.
     */
    where: CarBrandWhereUniqueInput
  }


  /**
   * CarBrand updateMany
   */
  export type CarBrandUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarBrands.
     */
    data: XOR<CarBrandUpdateManyMutationInput, CarBrandUncheckedUpdateManyInput>
    /**
     * Filter which CarBrands to update
     */
    where?: CarBrandWhereInput
  }


  /**
   * CarBrand upsert
   */
  export type CarBrandUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * The filter to search for the CarBrand to update in case it exists.
     */
    where: CarBrandWhereUniqueInput
    /**
     * In case the CarBrand found by the `where` argument doesn't exist, create a new CarBrand with this data.
     */
    create: XOR<CarBrandCreateInput, CarBrandUncheckedCreateInput>
    /**
     * In case the CarBrand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarBrandUpdateInput, CarBrandUncheckedUpdateInput>
  }


  /**
   * CarBrand delete
   */
  export type CarBrandDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
    /**
     * Filter which CarBrand to delete.
     */
    where: CarBrandWhereUniqueInput
  }


  /**
   * CarBrand deleteMany
   */
  export type CarBrandDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarBrands to delete
     */
    where?: CarBrandWhereInput
  }


  /**
   * CarBrand.models
   */
  export type CarBrand$modelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    where?: CarModelWhereInput
    orderBy?: Enumerable<CarModelOrderByWithRelationInput>
    cursor?: CarModelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarModelScalarFieldEnum>
  }


  /**
   * CarBrand without action
   */
  export type CarBrandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarBrand
     */
    select?: CarBrandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarBrandInclude<ExtArgs> | null
  }



  /**
   * Model CarModel
   */


  export type AggregateCarModel = {
    _count: CarModelCountAggregateOutputType | null
    _min: CarModelMinAggregateOutputType | null
    _max: CarModelMaxAggregateOutputType | null
  }

  export type CarModelMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    reference: string | null
    createdAt: Date | null
    updatedAt: Date | null
    brandId: string | null
  }

  export type CarModelMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    reference: string | null
    createdAt: Date | null
    updatedAt: Date | null
    brandId: string | null
  }

  export type CarModelCountAggregateOutputType = {
    id: number
    name: number
    image: number
    reference: number
    createdAt: number
    updatedAt: number
    brandId: number
    _all: number
  }


  export type CarModelMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    reference?: true
    createdAt?: true
    updatedAt?: true
    brandId?: true
  }

  export type CarModelMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    reference?: true
    createdAt?: true
    updatedAt?: true
    brandId?: true
  }

  export type CarModelCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    reference?: true
    createdAt?: true
    updatedAt?: true
    brandId?: true
    _all?: true
  }

  export type CarModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarModel to aggregate.
     */
    where?: CarModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarModels to fetch.
     */
    orderBy?: Enumerable<CarModelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarModels
    **/
    _count?: true | CarModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarModelMaxAggregateInputType
  }

  export type GetCarModelAggregateType<T extends CarModelAggregateArgs> = {
        [P in keyof T & keyof AggregateCarModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarModel[P]>
      : GetScalarType<T[P], AggregateCarModel[P]>
  }




  export type CarModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarModelWhereInput
    orderBy?: Enumerable<CarModelOrderByWithAggregationInput>
    by: CarModelScalarFieldEnum[]
    having?: CarModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarModelCountAggregateInputType | true
    _min?: CarModelMinAggregateInputType
    _max?: CarModelMaxAggregateInputType
  }


  export type CarModelGroupByOutputType = {
    id: string
    name: string
    image: string | null
    reference: string | null
    createdAt: Date
    updatedAt: Date
    brandId: string
    _count: CarModelCountAggregateOutputType | null
    _min: CarModelMinAggregateOutputType | null
    _max: CarModelMaxAggregateOutputType | null
  }

  type GetCarModelGroupByPayload<T extends CarModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarModelGroupByOutputType[P]>
            : GetScalarType<T[P], CarModelGroupByOutputType[P]>
        }
      >
    >


  export type CarModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    reference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brandId?: boolean
    brand?: boolean | CarBrandArgs<ExtArgs>
    scrapedCars?: boolean | CarModel$scrapedCarsArgs<ExtArgs>
    devices?: boolean | CarModel$devicesArgs<ExtArgs>
    interestedUsers?: boolean | CarModel$interestedUsersArgs<ExtArgs>
    users?: boolean | CarModel$usersArgs<ExtArgs>
    _count?: boolean | CarModelCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["carModel"]>

  export type CarModelSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    reference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brandId?: boolean
  }

  export type CarModelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    brand?: boolean | CarBrandArgs<ExtArgs>
    scrapedCars?: boolean | CarModel$scrapedCarsArgs<ExtArgs>
    devices?: boolean | CarModel$devicesArgs<ExtArgs>
    interestedUsers?: boolean | CarModel$interestedUsersArgs<ExtArgs>
    users?: boolean | CarModel$usersArgs<ExtArgs>
    _count?: boolean | CarModelCountOutputTypeArgs<ExtArgs>
  }


  type CarModelGetPayload<S extends boolean | null | undefined | CarModelArgs> = $Types.GetResult<CarModelPayload, S>

  type CarModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CarModelFindManyArgs, 'select' | 'include'> & {
      select?: CarModelCountAggregateInputType | true
    }

  export interface CarModelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarModel'], meta: { name: 'CarModel' } }
    /**
     * Find zero or one CarModel that matches the filter.
     * @param {CarModelFindUniqueArgs} args - Arguments to find a CarModel
     * @example
     * // Get one CarModel
     * const carModel = await prisma.carModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarModelFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarModelFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CarModel'> extends True ? Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CarModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarModelFindUniqueOrThrowArgs} args - Arguments to find a CarModel
     * @example
     * // Get one CarModel
     * const carModel = await prisma.carModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CarModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarModelFindFirstArgs} args - Arguments to find a CarModel
     * @example
     * // Get one CarModel
     * const carModel = await prisma.carModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarModelFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarModelFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CarModel'> extends True ? Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CarModel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarModelFindFirstOrThrowArgs} args - Arguments to find a CarModel
     * @example
     * // Get one CarModel
     * const carModel = await prisma.carModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CarModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarModels
     * const carModels = await prisma.carModel.findMany()
     * 
     * // Get first 10 CarModels
     * const carModels = await prisma.carModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carModelWithIdOnly = await prisma.carModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CarModel.
     * @param {CarModelCreateArgs} args - Arguments to create a CarModel.
     * @example
     * // Create one CarModel
     * const CarModel = await prisma.carModel.create({
     *   data: {
     *     // ... data to create a CarModel
     *   }
     * })
     * 
    **/
    create<T extends CarModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarModelCreateArgs<ExtArgs>>
    ): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CarModels.
     *     @param {CarModelCreateManyArgs} args - Arguments to create many CarModels.
     *     @example
     *     // Create many CarModels
     *     const carModel = await prisma.carModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarModel.
     * @param {CarModelDeleteArgs} args - Arguments to delete one CarModel.
     * @example
     * // Delete one CarModel
     * const CarModel = await prisma.carModel.delete({
     *   where: {
     *     // ... filter to delete one CarModel
     *   }
     * })
     * 
    **/
    delete<T extends CarModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarModelDeleteArgs<ExtArgs>>
    ): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CarModel.
     * @param {CarModelUpdateArgs} args - Arguments to update one CarModel.
     * @example
     * // Update one CarModel
     * const carModel = await prisma.carModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarModelUpdateArgs<ExtArgs>>
    ): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CarModels.
     * @param {CarModelDeleteManyArgs} args - Arguments to filter CarModels to delete.
     * @example
     * // Delete a few CarModels
     * const { count } = await prisma.carModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarModels
     * const carModel = await prisma.carModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarModel.
     * @param {CarModelUpsertArgs} args - Arguments to update or create a CarModel.
     * @example
     * // Update or create a CarModel
     * const carModel = await prisma.carModel.upsert({
     *   create: {
     *     // ... data to create a CarModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarModel we want to update
     *   }
     * })
    **/
    upsert<T extends CarModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarModelUpsertArgs<ExtArgs>>
    ): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CarModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarModelCountArgs} args - Arguments to filter CarModels to count.
     * @example
     * // Count the number of CarModels
     * const count = await prisma.carModel.count({
     *   where: {
     *     // ... the filter for the CarModels we want to count
     *   }
     * })
    **/
    count<T extends CarModelCountArgs>(
      args?: Subset<T, CarModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarModelAggregateArgs>(args: Subset<T, CarModelAggregateArgs>): Prisma.PrismaPromise<GetCarModelAggregateType<T>>

    /**
     * Group by CarModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarModelGroupByArgs['orderBy'] }
        : { orderBy?: CarModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CarModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    brand<T extends CarBrandArgs<ExtArgs> = {}>(args?: Subset<T, CarBrandArgs<ExtArgs>>): Prisma__CarBrandClient<$Types.GetResult<CarBrandPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    scrapedCars<T extends CarModel$scrapedCarsArgs<ExtArgs> = {}>(args?: Subset<T, CarModel$scrapedCarsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    devices<T extends CarModel$devicesArgs<ExtArgs> = {}>(args?: Subset<T, CarModel$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findMany', never>| Null>;

    interestedUsers<T extends CarModel$interestedUsersArgs<ExtArgs> = {}>(args?: Subset<T, CarModel$interestedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    users<T extends CarModel$usersArgs<ExtArgs> = {}>(args?: Subset<T, CarModel$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CarModel base type for findUnique actions
   */
  export type CarModelFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * Filter, which CarModel to fetch.
     */
    where: CarModelWhereUniqueInput
  }

  /**
   * CarModel findUnique
   */
  export interface CarModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarModelFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarModel findUniqueOrThrow
   */
  export type CarModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * Filter, which CarModel to fetch.
     */
    where: CarModelWhereUniqueInput
  }


  /**
   * CarModel base type for findFirst actions
   */
  export type CarModelFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * Filter, which CarModel to fetch.
     */
    where?: CarModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarModels to fetch.
     */
    orderBy?: Enumerable<CarModelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarModels.
     */
    cursor?: CarModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarModels.
     */
    distinct?: Enumerable<CarModelScalarFieldEnum>
  }

  /**
   * CarModel findFirst
   */
  export interface CarModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarModelFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarModel findFirstOrThrow
   */
  export type CarModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * Filter, which CarModel to fetch.
     */
    where?: CarModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarModels to fetch.
     */
    orderBy?: Enumerable<CarModelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarModels.
     */
    cursor?: CarModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarModels.
     */
    distinct?: Enumerable<CarModelScalarFieldEnum>
  }


  /**
   * CarModel findMany
   */
  export type CarModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * Filter, which CarModels to fetch.
     */
    where?: CarModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarModels to fetch.
     */
    orderBy?: Enumerable<CarModelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarModels.
     */
    cursor?: CarModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarModels.
     */
    skip?: number
    distinct?: Enumerable<CarModelScalarFieldEnum>
  }


  /**
   * CarModel create
   */
  export type CarModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * The data needed to create a CarModel.
     */
    data: XOR<CarModelCreateInput, CarModelUncheckedCreateInput>
  }


  /**
   * CarModel createMany
   */
  export type CarModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarModels.
     */
    data: Enumerable<CarModelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CarModel update
   */
  export type CarModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * The data needed to update a CarModel.
     */
    data: XOR<CarModelUpdateInput, CarModelUncheckedUpdateInput>
    /**
     * Choose, which CarModel to update.
     */
    where: CarModelWhereUniqueInput
  }


  /**
   * CarModel updateMany
   */
  export type CarModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarModels.
     */
    data: XOR<CarModelUpdateManyMutationInput, CarModelUncheckedUpdateManyInput>
    /**
     * Filter which CarModels to update
     */
    where?: CarModelWhereInput
  }


  /**
   * CarModel upsert
   */
  export type CarModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * The filter to search for the CarModel to update in case it exists.
     */
    where: CarModelWhereUniqueInput
    /**
     * In case the CarModel found by the `where` argument doesn't exist, create a new CarModel with this data.
     */
    create: XOR<CarModelCreateInput, CarModelUncheckedCreateInput>
    /**
     * In case the CarModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarModelUpdateInput, CarModelUncheckedUpdateInput>
  }


  /**
   * CarModel delete
   */
  export type CarModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
    /**
     * Filter which CarModel to delete.
     */
    where: CarModelWhereUniqueInput
  }


  /**
   * CarModel deleteMany
   */
  export type CarModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarModels to delete
     */
    where?: CarModelWhereInput
  }


  /**
   * CarModel.scrapedCars
   */
  export type CarModel$scrapedCarsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    where?: ScrapedCarWhereInput
    orderBy?: Enumerable<ScrapedCarOrderByWithRelationInput>
    cursor?: ScrapedCarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ScrapedCarScalarFieldEnum>
  }


  /**
   * CarModel.devices
   */
  export type CarModel$devicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * CarModel.interestedUsers
   */
  export type CarModel$interestedUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    where?: UserModelInterestWhereInput
    orderBy?: Enumerable<UserModelInterestOrderByWithRelationInput>
    cursor?: UserModelInterestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserModelInterestScalarFieldEnum>
  }


  /**
   * CarModel.users
   */
  export type CarModel$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    where?: UserCarWhereInput
    orderBy?: Enumerable<UserCarOrderByWithRelationInput>
    cursor?: UserCarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserCarScalarFieldEnum>
  }


  /**
   * CarModel without action
   */
  export type CarModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarModel
     */
    select?: CarModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarModelInclude<ExtArgs> | null
  }



  /**
   * Model Section
   */


  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    slug: string | null
    reference: string | null
  }

  export type SectionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    slug: string | null
    reference: string | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    name: number
    image: number
    createdAt: number
    updatedAt: number
    slug: number
    reference: number
    _all: number
  }


  export type SectionMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    slug?: true
    reference?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    slug?: true
    reference?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    slug?: true
    reference?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: Enumerable<SectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: Enumerable<SectionOrderByWithAggregationInput>
    by: SectionScalarFieldEnum[]
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }


  export type SectionGroupByOutputType = {
    id: string
    name: string
    image: string
    createdAt: Date
    updatedAt: Date
    slug: string | null
    reference: string | null
    _count: SectionCountAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    slug?: boolean
    reference?: boolean
    devices?: boolean | Section$devicesArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    slug?: boolean
    reference?: boolean
  }

  export type SectionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    devices?: boolean | Section$devicesArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeArgs<ExtArgs>
  }


  type SectionGetPayload<S extends boolean | null | undefined | SectionArgs> = $Types.GetResult<SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SectionFindManyArgs, 'select' | 'include'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SectionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Section'> extends True ? Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Section that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SectionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Section'> extends True ? Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Section that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SectionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
    **/
    create<T extends SectionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SectionCreateArgs<ExtArgs>>
    ): Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sections.
     *     @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     *     @example
     *     // Create many Sections
     *     const section = await prisma.section.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SectionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
    **/
    delete<T extends SectionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>
    ): Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SectionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>
    ): Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SectionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SectionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
    **/
    upsert<T extends SectionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>
    ): Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends Section$devicesArgs<ExtArgs> = {}>(args?: Subset<T, Section$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Section base type for findUnique actions
   */
  export type SectionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUnique
   */
  export interface SectionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SectionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }


  /**
   * Section base type for findFirst actions
   */
  export type SectionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: Enumerable<SectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: Enumerable<SectionScalarFieldEnum>
  }

  /**
   * Section findFirst
   */
  export interface SectionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SectionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: Enumerable<SectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: Enumerable<SectionScalarFieldEnum>
  }


  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: Enumerable<SectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: Enumerable<SectionScalarFieldEnum>
  }


  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }


  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: Enumerable<SectionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }


  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
  }


  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }


  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }


  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
  }


  /**
   * Section.devices
   */
  export type Section$devicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Section without action
   */
  export type SectionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectionInclude<ExtArgs> | null
  }



  /**
   * Model Device
   */


  export type AggregateDevice = {
    _count: DeviceCountAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  export type DeviceMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sectionId: string | null
    carModelId: string | null
    reference: string | null
    slug: string | null
  }

  export type DeviceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sectionId: string | null
    carModelId: string | null
    reference: string | null
    slug: string | null
  }

  export type DeviceCountAggregateOutputType = {
    id: number
    name: number
    image: number
    createdAt: number
    updatedAt: number
    sectionId: number
    carModelId: number
    reference: number
    slug: number
    _all: number
  }


  export type DeviceMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    sectionId?: true
    carModelId?: true
    reference?: true
    slug?: true
  }

  export type DeviceMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    sectionId?: true
    carModelId?: true
    reference?: true
    slug?: true
  }

  export type DeviceCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    sectionId?: true
    carModelId?: true
    reference?: true
    slug?: true
    _all?: true
  }

  export type DeviceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Device to aggregate.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devices
    **/
    _count?: true | DeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceMaxAggregateInputType
  }

  export type GetDeviceAggregateType<T extends DeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevice[P]>
      : GetScalarType<T[P], AggregateDevice[P]>
  }




  export type DeviceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithAggregationInput>
    by: DeviceScalarFieldEnum[]
    having?: DeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceCountAggregateInputType | true
    _min?: DeviceMinAggregateInputType
    _max?: DeviceMaxAggregateInputType
  }


  export type DeviceGroupByOutputType = {
    id: string
    name: string
    image: string | null
    createdAt: Date
    updatedAt: Date
    sectionId: string
    carModelId: string
    reference: string | null
    slug: string | null
    _count: DeviceCountAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  type GetDeviceGroupByPayload<T extends DeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceGroupByOutputType[P]>
        }
      >
    >


  export type DeviceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sectionId?: boolean
    carModelId?: boolean
    reference?: boolean
    slug?: boolean
    dealers?: boolean | Device$dealersArgs<ExtArgs>
    section?: boolean | SectionArgs<ExtArgs>
    carModel?: boolean | CarModelArgs<ExtArgs>
    interestedUsers?: boolean | Device$interestedUsersArgs<ExtArgs>
    _count?: boolean | DeviceCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sectionId?: boolean
    carModelId?: boolean
    reference?: boolean
    slug?: boolean
  }

  export type DeviceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    dealers?: boolean | Device$dealersArgs<ExtArgs>
    section?: boolean | SectionArgs<ExtArgs>
    carModel?: boolean | CarModelArgs<ExtArgs>
    interestedUsers?: boolean | Device$interestedUsersArgs<ExtArgs>
    _count?: boolean | DeviceCountOutputTypeArgs<ExtArgs>
  }


  type DeviceGetPayload<S extends boolean | null | undefined | DeviceArgs> = $Types.GetResult<DevicePayload, S>

  type DeviceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DeviceFindManyArgs, 'select' | 'include'> & {
      select?: DeviceCountAggregateInputType | true
    }

  export interface DeviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Device'], meta: { name: 'Device' } }
    /**
     * Find zero or one Device that matches the filter.
     * @param {DeviceFindUniqueArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeviceFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeviceFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Device'> extends True ? Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Device that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DeviceFindUniqueOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeviceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Device that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeviceFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeviceFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Device'> extends True ? Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Device that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeviceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.device.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.device.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceWithIdOnly = await prisma.device.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeviceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Device.
     * @param {DeviceCreateArgs} args - Arguments to create a Device.
     * @example
     * // Create one Device
     * const Device = await prisma.device.create({
     *   data: {
     *     // ... data to create a Device
     *   }
     * })
     * 
    **/
    create<T extends DeviceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceCreateArgs<ExtArgs>>
    ): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Devices.
     *     @param {DeviceCreateManyArgs} args - Arguments to create many Devices.
     *     @example
     *     // Create many Devices
     *     const device = await prisma.device.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeviceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Device.
     * @param {DeviceDeleteArgs} args - Arguments to delete one Device.
     * @example
     * // Delete one Device
     * const Device = await prisma.device.delete({
     *   where: {
     *     // ... filter to delete one Device
     *   }
     * })
     * 
    **/
    delete<T extends DeviceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceDeleteArgs<ExtArgs>>
    ): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Device.
     * @param {DeviceUpdateArgs} args - Arguments to update one Device.
     * @example
     * // Update one Device
     * const device = await prisma.device.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeviceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceUpdateArgs<ExtArgs>>
    ): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Devices.
     * @param {DeviceDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.device.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeviceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeviceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Device.
     * @param {DeviceUpsertArgs} args - Arguments to update or create a Device.
     * @example
     * // Update or create a Device
     * const device = await prisma.device.upsert({
     *   create: {
     *     // ... data to create a Device
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Device we want to update
     *   }
     * })
    **/
    upsert<T extends DeviceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceUpsertArgs<ExtArgs>>
    ): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.device.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends DeviceCountArgs>(
      args?: Subset<T, DeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceAggregateArgs>(args: Subset<T, DeviceAggregateArgs>): Prisma.PrismaPromise<GetDeviceAggregateType<T>>

    /**
     * Group by Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceGroupByArgs['orderBy'] }
        : { orderBy?: DeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Device.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeviceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    dealers<T extends Device$dealersArgs<ExtArgs> = {}>(args?: Subset<T, Device$dealersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findMany', never>| Null>;

    section<T extends SectionArgs<ExtArgs> = {}>(args?: Subset<T, SectionArgs<ExtArgs>>): Prisma__SectionClient<$Types.GetResult<SectionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    carModel<T extends CarModelArgs<ExtArgs> = {}>(args?: Subset<T, CarModelArgs<ExtArgs>>): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    interestedUsers<T extends Device$interestedUsersArgs<ExtArgs> = {}>(args?: Subset<T, Device$interestedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Device base type for findUnique actions
   */
  export type DeviceFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findUnique
   */
  export interface DeviceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DeviceFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Device findUniqueOrThrow
   */
  export type DeviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device base type for findFirst actions
   */
  export type DeviceFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }

  /**
   * Device findFirst
   */
  export interface DeviceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DeviceFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Device findFirstOrThrow
   */
  export type DeviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Device findMany
   */
  export type DeviceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Device create
   */
  export type DeviceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to create a Device.
     */
    data: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
  }


  /**
   * Device createMany
   */
  export type DeviceCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Devices.
     */
    data: Enumerable<DeviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Device update
   */
  export type DeviceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to update a Device.
     */
    data: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
    /**
     * Choose, which Device to update.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device updateMany
   */
  export type DeviceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
  }


  /**
   * Device upsert
   */
  export type DeviceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The filter to search for the Device to update in case it exists.
     */
    where: DeviceWhereUniqueInput
    /**
     * In case the Device found by the `where` argument doesn't exist, create a new Device with this data.
     */
    create: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
    /**
     * In case the Device was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
  }


  /**
   * Device delete
   */
  export type DeviceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter which Device to delete.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device deleteMany
   */
  export type DeviceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Devices to delete
     */
    where?: DeviceWhereInput
  }


  /**
   * Device.dealers
   */
  export type Device$dealersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    where?: DeviceDealerWhereInput
    orderBy?: Enumerable<DeviceDealerOrderByWithRelationInput>
    cursor?: DeviceDealerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceDealerScalarFieldEnum>
  }


  /**
   * Device.interestedUsers
   */
  export type Device$interestedUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    where?: UserDeviceInterestWhereInput
    orderBy?: Enumerable<UserDeviceInterestOrderByWithRelationInput>
    cursor?: UserDeviceInterestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDeviceInterestScalarFieldEnum>
  }


  /**
   * Device without action
   */
  export type DeviceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude<ExtArgs> | null
  }



  /**
   * Model Dealer
   */


  export type AggregateDealer = {
    _count: DealerCountAggregateOutputType | null
    _min: DealerMinAggregateOutputType | null
    _max: DealerMaxAggregateOutputType | null
  }

  export type DealerMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    website: string | null
    phone: string | null
    email: string | null
    reference: string | null
  }

  export type DealerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    website: string | null
    phone: string | null
    email: string | null
    reference: string | null
  }

  export type DealerCountAggregateOutputType = {
    id: number
    name: number
    image: number
    createdAt: number
    updatedAt: number
    website: number
    phone: number
    email: number
    reference: number
    _all: number
  }


  export type DealerMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    website?: true
    phone?: true
    email?: true
    reference?: true
  }

  export type DealerMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    website?: true
    phone?: true
    email?: true
    reference?: true
  }

  export type DealerCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    website?: true
    phone?: true
    email?: true
    reference?: true
    _all?: true
  }

  export type DealerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dealer to aggregate.
     */
    where?: DealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dealers to fetch.
     */
    orderBy?: Enumerable<DealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dealers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dealers
    **/
    _count?: true | DealerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DealerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DealerMaxAggregateInputType
  }

  export type GetDealerAggregateType<T extends DealerAggregateArgs> = {
        [P in keyof T & keyof AggregateDealer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDealer[P]>
      : GetScalarType<T[P], AggregateDealer[P]>
  }




  export type DealerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DealerWhereInput
    orderBy?: Enumerable<DealerOrderByWithAggregationInput>
    by: DealerScalarFieldEnum[]
    having?: DealerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DealerCountAggregateInputType | true
    _min?: DealerMinAggregateInputType
    _max?: DealerMaxAggregateInputType
  }


  export type DealerGroupByOutputType = {
    id: string
    name: string
    image: string
    createdAt: Date
    updatedAt: Date
    website: string | null
    phone: string | null
    email: string | null
    reference: string | null
    _count: DealerCountAggregateOutputType | null
    _min: DealerMinAggregateOutputType | null
    _max: DealerMaxAggregateOutputType | null
  }

  type GetDealerGroupByPayload<T extends DealerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DealerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DealerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DealerGroupByOutputType[P]>
            : GetScalarType<T[P], DealerGroupByOutputType[P]>
        }
      >
    >


  export type DealerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    website?: boolean
    phone?: boolean
    email?: boolean
    reference?: boolean
    devices?: boolean | Dealer$devicesArgs<ExtArgs>
    stocks?: boolean | Dealer$stocksArgs<ExtArgs>
    _count?: boolean | DealerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["dealer"]>

  export type DealerSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    website?: boolean
    phone?: boolean
    email?: boolean
    reference?: boolean
  }

  export type DealerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    devices?: boolean | Dealer$devicesArgs<ExtArgs>
    stocks?: boolean | Dealer$stocksArgs<ExtArgs>
    _count?: boolean | DealerCountOutputTypeArgs<ExtArgs>
  }


  type DealerGetPayload<S extends boolean | null | undefined | DealerArgs> = $Types.GetResult<DealerPayload, S>

  type DealerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DealerFindManyArgs, 'select' | 'include'> & {
      select?: DealerCountAggregateInputType | true
    }

  export interface DealerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dealer'], meta: { name: 'Dealer' } }
    /**
     * Find zero or one Dealer that matches the filter.
     * @param {DealerFindUniqueArgs} args - Arguments to find a Dealer
     * @example
     * // Get one Dealer
     * const dealer = await prisma.dealer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DealerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DealerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Dealer'> extends True ? Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Dealer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DealerFindUniqueOrThrowArgs} args - Arguments to find a Dealer
     * @example
     * // Get one Dealer
     * const dealer = await prisma.dealer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DealerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DealerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Dealer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealerFindFirstArgs} args - Arguments to find a Dealer
     * @example
     * // Get one Dealer
     * const dealer = await prisma.dealer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DealerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DealerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Dealer'> extends True ? Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Dealer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealerFindFirstOrThrowArgs} args - Arguments to find a Dealer
     * @example
     * // Get one Dealer
     * const dealer = await prisma.dealer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DealerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DealerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Dealers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dealers
     * const dealers = await prisma.dealer.findMany()
     * 
     * // Get first 10 Dealers
     * const dealers = await prisma.dealer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dealerWithIdOnly = await prisma.dealer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DealerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DealerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Dealer.
     * @param {DealerCreateArgs} args - Arguments to create a Dealer.
     * @example
     * // Create one Dealer
     * const Dealer = await prisma.dealer.create({
     *   data: {
     *     // ... data to create a Dealer
     *   }
     * })
     * 
    **/
    create<T extends DealerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DealerCreateArgs<ExtArgs>>
    ): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Dealers.
     *     @param {DealerCreateManyArgs} args - Arguments to create many Dealers.
     *     @example
     *     // Create many Dealers
     *     const dealer = await prisma.dealer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DealerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DealerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dealer.
     * @param {DealerDeleteArgs} args - Arguments to delete one Dealer.
     * @example
     * // Delete one Dealer
     * const Dealer = await prisma.dealer.delete({
     *   where: {
     *     // ... filter to delete one Dealer
     *   }
     * })
     * 
    **/
    delete<T extends DealerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DealerDeleteArgs<ExtArgs>>
    ): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Dealer.
     * @param {DealerUpdateArgs} args - Arguments to update one Dealer.
     * @example
     * // Update one Dealer
     * const dealer = await prisma.dealer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DealerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DealerUpdateArgs<ExtArgs>>
    ): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Dealers.
     * @param {DealerDeleteManyArgs} args - Arguments to filter Dealers to delete.
     * @example
     * // Delete a few Dealers
     * const { count } = await prisma.dealer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DealerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DealerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dealers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dealers
     * const dealer = await prisma.dealer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DealerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DealerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dealer.
     * @param {DealerUpsertArgs} args - Arguments to update or create a Dealer.
     * @example
     * // Update or create a Dealer
     * const dealer = await prisma.dealer.upsert({
     *   create: {
     *     // ... data to create a Dealer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dealer we want to update
     *   }
     * })
    **/
    upsert<T extends DealerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DealerUpsertArgs<ExtArgs>>
    ): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Dealers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealerCountArgs} args - Arguments to filter Dealers to count.
     * @example
     * // Count the number of Dealers
     * const count = await prisma.dealer.count({
     *   where: {
     *     // ... the filter for the Dealers we want to count
     *   }
     * })
    **/
    count<T extends DealerCountArgs>(
      args?: Subset<T, DealerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DealerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dealer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DealerAggregateArgs>(args: Subset<T, DealerAggregateArgs>): Prisma.PrismaPromise<GetDealerAggregateType<T>>

    /**
     * Group by Dealer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DealerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DealerGroupByArgs['orderBy'] }
        : { orderBy?: DealerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DealerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Dealer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DealerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends Dealer$devicesArgs<ExtArgs> = {}>(args?: Subset<T, Dealer$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findMany', never>| Null>;

    stocks<T extends Dealer$stocksArgs<ExtArgs> = {}>(args?: Subset<T, Dealer$stocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<StockPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Dealer base type for findUnique actions
   */
  export type DealerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * Filter, which Dealer to fetch.
     */
    where: DealerWhereUniqueInput
  }

  /**
   * Dealer findUnique
   */
  export interface DealerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DealerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Dealer findUniqueOrThrow
   */
  export type DealerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * Filter, which Dealer to fetch.
     */
    where: DealerWhereUniqueInput
  }


  /**
   * Dealer base type for findFirst actions
   */
  export type DealerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * Filter, which Dealer to fetch.
     */
    where?: DealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dealers to fetch.
     */
    orderBy?: Enumerable<DealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dealers.
     */
    cursor?: DealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dealers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dealers.
     */
    distinct?: Enumerable<DealerScalarFieldEnum>
  }

  /**
   * Dealer findFirst
   */
  export interface DealerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DealerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Dealer findFirstOrThrow
   */
  export type DealerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * Filter, which Dealer to fetch.
     */
    where?: DealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dealers to fetch.
     */
    orderBy?: Enumerable<DealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dealers.
     */
    cursor?: DealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dealers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dealers.
     */
    distinct?: Enumerable<DealerScalarFieldEnum>
  }


  /**
   * Dealer findMany
   */
  export type DealerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * Filter, which Dealers to fetch.
     */
    where?: DealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dealers to fetch.
     */
    orderBy?: Enumerable<DealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dealers.
     */
    cursor?: DealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dealers.
     */
    skip?: number
    distinct?: Enumerable<DealerScalarFieldEnum>
  }


  /**
   * Dealer create
   */
  export type DealerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * The data needed to create a Dealer.
     */
    data: XOR<DealerCreateInput, DealerUncheckedCreateInput>
  }


  /**
   * Dealer createMany
   */
  export type DealerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dealers.
     */
    data: Enumerable<DealerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Dealer update
   */
  export type DealerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * The data needed to update a Dealer.
     */
    data: XOR<DealerUpdateInput, DealerUncheckedUpdateInput>
    /**
     * Choose, which Dealer to update.
     */
    where: DealerWhereUniqueInput
  }


  /**
   * Dealer updateMany
   */
  export type DealerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dealers.
     */
    data: XOR<DealerUpdateManyMutationInput, DealerUncheckedUpdateManyInput>
    /**
     * Filter which Dealers to update
     */
    where?: DealerWhereInput
  }


  /**
   * Dealer upsert
   */
  export type DealerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * The filter to search for the Dealer to update in case it exists.
     */
    where: DealerWhereUniqueInput
    /**
     * In case the Dealer found by the `where` argument doesn't exist, create a new Dealer with this data.
     */
    create: XOR<DealerCreateInput, DealerUncheckedCreateInput>
    /**
     * In case the Dealer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DealerUpdateInput, DealerUncheckedUpdateInput>
  }


  /**
   * Dealer delete
   */
  export type DealerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
    /**
     * Filter which Dealer to delete.
     */
    where: DealerWhereUniqueInput
  }


  /**
   * Dealer deleteMany
   */
  export type DealerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dealers to delete
     */
    where?: DealerWhereInput
  }


  /**
   * Dealer.devices
   */
  export type Dealer$devicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    where?: DeviceDealerWhereInput
    orderBy?: Enumerable<DeviceDealerOrderByWithRelationInput>
    cursor?: DeviceDealerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceDealerScalarFieldEnum>
  }


  /**
   * Dealer.stocks
   */
  export type Dealer$stocksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StockScalarFieldEnum>
  }


  /**
   * Dealer without action
   */
  export type DealerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dealer
     */
    select?: DealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DealerInclude<ExtArgs> | null
  }



  /**
   * Model Stock
   */


  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    longitude: number | null
    latitude: number | null
  }

  export type StockSumAggregateOutputType = {
    longitude: number | null
    latitude: number | null
  }

  export type StockMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dealerId: string | null
    address: string | null
    phone: string | null
    email: string | null
    longitude: number | null
    latitude: number | null
    openHours: string | null
  }

  export type StockMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dealerId: string | null
    address: string | null
    phone: string | null
    email: string | null
    longitude: number | null
    latitude: number | null
    openHours: string | null
  }

  export type StockCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    dealerId: number
    address: number
    phone: number
    email: number
    longitude: number
    latitude: number
    openHours: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    longitude?: true
    latitude?: true
  }

  export type StockSumAggregateInputType = {
    longitude?: true
    latitude?: true
  }

  export type StockMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    dealerId?: true
    address?: true
    phone?: true
    email?: true
    longitude?: true
    latitude?: true
    openHours?: true
  }

  export type StockMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    dealerId?: true
    address?: true
    phone?: true
    email?: true
    longitude?: true
    latitude?: true
    openHours?: true
  }

  export type StockCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    dealerId?: true
    address?: true
    phone?: true
    email?: true
    longitude?: true
    latitude?: true
    openHours?: true
    _all?: true
  }

  export type StockAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stock to aggregate.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
    orderBy?: Enumerable<StockOrderByWithAggregationInput>
    by: StockScalarFieldEnum[]
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }


  export type StockGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    dealerId: string
    address: string | null
    phone: string | null
    email: string | null
    longitude: number
    latitude: number
    openHours: string | null
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dealerId?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    longitude?: boolean
    latitude?: boolean
    openHours?: boolean
    devices?: boolean | Stock$devicesArgs<ExtArgs>
    dealer?: boolean | DealerArgs<ExtArgs>
    ScrapedCar?: boolean | Stock$ScrapedCarArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dealerId?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    longitude?: boolean
    latitude?: boolean
    openHours?: boolean
  }

  export type StockInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    devices?: boolean | Stock$devicesArgs<ExtArgs>
    dealer?: boolean | DealerArgs<ExtArgs>
    ScrapedCar?: boolean | Stock$ScrapedCarArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeArgs<ExtArgs>
  }


  type StockGetPayload<S extends boolean | null | undefined | StockArgs> = $Types.GetResult<StockPayload, S>

  type StockCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<StockFindManyArgs, 'select' | 'include'> & {
      select?: StockCountAggregateInputType | true
    }

  export interface StockDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stock'], meta: { name: 'Stock' } }
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StockFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StockFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stock'> extends True ? Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Stock that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StockFindUniqueOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StockFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StockFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StockFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StockFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stock'> extends True ? Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Stock that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StockFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StockFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockWithIdOnly = await prisma.stock.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StockFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StockFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<StockPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
    **/
    create<T extends StockCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StockCreateArgs<ExtArgs>>
    ): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Stocks.
     *     @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     *     @example
     *     // Create many Stocks
     *     const stock = await prisma.stock.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StockCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StockCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
    **/
    delete<T extends StockDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StockDeleteArgs<ExtArgs>>
    ): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StockUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StockUpdateArgs<ExtArgs>>
    ): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StockDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StockDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StockUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StockUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
    **/
    upsert<T extends StockUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StockUpsertArgs<ExtArgs>>
    ): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): Prisma.PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StockClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends Stock$devicesArgs<ExtArgs> = {}>(args?: Subset<T, Stock$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findMany', never>| Null>;

    dealer<T extends DealerArgs<ExtArgs> = {}>(args?: Subset<T, DealerArgs<ExtArgs>>): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    ScrapedCar<T extends Stock$ScrapedCarArgs<ExtArgs> = {}>(args?: Subset<T, Stock$ScrapedCarArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Stock base type for findUnique actions
   */
  export type StockFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findUnique
   */
  export interface StockFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends StockFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stock findUniqueOrThrow
   */
  export type StockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }


  /**
   * Stock base type for findFirst actions
   */
  export type StockFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: Enumerable<StockScalarFieldEnum>
  }

  /**
   * Stock findFirst
   */
  export interface StockFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends StockFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stock findFirstOrThrow
   */
  export type StockFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: Enumerable<StockScalarFieldEnum>
  }


  /**
   * Stock findMany
   */
  export type StockFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stocks to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    distinct?: Enumerable<StockScalarFieldEnum>
  }


  /**
   * Stock create
   */
  export type StockCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to create a Stock.
     */
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }


  /**
   * Stock createMany
   */
  export type StockCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stocks.
     */
    data: Enumerable<StockCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stock update
   */
  export type StockUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to update a Stock.
     */
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     */
    where: StockWhereUniqueInput
  }


  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
  }


  /**
   * Stock upsert
   */
  export type StockUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The filter to search for the Stock to update in case it exists.
     */
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     */
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }


  /**
   * Stock delete
   */
  export type StockDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter which Stock to delete.
     */
    where: StockWhereUniqueInput
  }


  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocks to delete
     */
    where?: StockWhereInput
  }


  /**
   * Stock.devices
   */
  export type Stock$devicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    where?: DeviceDealerWhereInput
    orderBy?: Enumerable<DeviceDealerOrderByWithRelationInput>
    cursor?: DeviceDealerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceDealerScalarFieldEnum>
  }


  /**
   * Stock.ScrapedCar
   */
  export type Stock$ScrapedCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    where?: ScrapedCarWhereInput
    orderBy?: Enumerable<ScrapedCarOrderByWithRelationInput>
    cursor?: ScrapedCarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ScrapedCarScalarFieldEnum>
  }


  /**
   * Stock without action
   */
  export type StockArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StockInclude<ExtArgs> | null
  }



  /**
   * Model ScrapedCar
   */


  export type AggregateScrapedCar = {
    _count: ScrapedCarCountAggregateOutputType | null
    _min: ScrapedCarMinAggregateOutputType | null
    _max: ScrapedCarMaxAggregateOutputType | null
  }

  export type ScrapedCarMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
    fuel: string | null
    chassis: string | null
    carModelId: string | null
    reference: string | null
    stockId: string | null
    description: string | null
    body: string | null
    mileage: string | null
    modelYear: string | null
  }

  export type ScrapedCarMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
    fuel: string | null
    chassis: string | null
    carModelId: string | null
    reference: string | null
    stockId: string | null
    description: string | null
    body: string | null
    mileage: string | null
    modelYear: string | null
  }

  export type ScrapedCarCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    image: number
    images: number
    fuel: number
    chassis: number
    carModelId: number
    reference: number
    stockId: number
    description: number
    body: number
    mileage: number
    modelYear: number
    _all: number
  }


  export type ScrapedCarMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    fuel?: true
    chassis?: true
    carModelId?: true
    reference?: true
    stockId?: true
    description?: true
    body?: true
    mileage?: true
    modelYear?: true
  }

  export type ScrapedCarMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    fuel?: true
    chassis?: true
    carModelId?: true
    reference?: true
    stockId?: true
    description?: true
    body?: true
    mileage?: true
    modelYear?: true
  }

  export type ScrapedCarCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    images?: true
    fuel?: true
    chassis?: true
    carModelId?: true
    reference?: true
    stockId?: true
    description?: true
    body?: true
    mileage?: true
    modelYear?: true
    _all?: true
  }

  export type ScrapedCarAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapedCar to aggregate.
     */
    where?: ScrapedCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedCars to fetch.
     */
    orderBy?: Enumerable<ScrapedCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScrapedCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedCars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScrapedCars
    **/
    _count?: true | ScrapedCarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScrapedCarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScrapedCarMaxAggregateInputType
  }

  export type GetScrapedCarAggregateType<T extends ScrapedCarAggregateArgs> = {
        [P in keyof T & keyof AggregateScrapedCar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScrapedCar[P]>
      : GetScalarType<T[P], AggregateScrapedCar[P]>
  }




  export type ScrapedCarGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ScrapedCarWhereInput
    orderBy?: Enumerable<ScrapedCarOrderByWithAggregationInput>
    by: ScrapedCarScalarFieldEnum[]
    having?: ScrapedCarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScrapedCarCountAggregateInputType | true
    _min?: ScrapedCarMinAggregateInputType
    _max?: ScrapedCarMaxAggregateInputType
  }


  export type ScrapedCarGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    image: string | null
    images: string[]
    fuel: string | null
    chassis: string | null
    carModelId: string
    reference: string | null
    stockId: string | null
    description: string | null
    body: string | null
    mileage: string | null
    modelYear: string | null
    _count: ScrapedCarCountAggregateOutputType | null
    _min: ScrapedCarMinAggregateOutputType | null
    _max: ScrapedCarMaxAggregateOutputType | null
  }

  type GetScrapedCarGroupByPayload<T extends ScrapedCarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ScrapedCarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScrapedCarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScrapedCarGroupByOutputType[P]>
            : GetScalarType<T[P], ScrapedCarGroupByOutputType[P]>
        }
      >
    >


  export type ScrapedCarSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    image?: boolean
    images?: boolean
    fuel?: boolean
    chassis?: boolean
    carModelId?: boolean
    reference?: boolean
    stockId?: boolean
    description?: boolean
    body?: boolean
    mileage?: boolean
    modelYear?: boolean
    carModel?: boolean | CarModelArgs<ExtArgs>
    Stock?: boolean | StockArgs<ExtArgs>
  }, ExtArgs["result"]["scrapedCar"]>

  export type ScrapedCarSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    image?: boolean
    images?: boolean
    fuel?: boolean
    chassis?: boolean
    carModelId?: boolean
    reference?: boolean
    stockId?: boolean
    description?: boolean
    body?: boolean
    mileage?: boolean
    modelYear?: boolean
  }

  export type ScrapedCarInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    carModel?: boolean | CarModelArgs<ExtArgs>
    Stock?: boolean | StockArgs<ExtArgs>
  }


  type ScrapedCarGetPayload<S extends boolean | null | undefined | ScrapedCarArgs> = $Types.GetResult<ScrapedCarPayload, S>

  type ScrapedCarCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ScrapedCarFindManyArgs, 'select' | 'include'> & {
      select?: ScrapedCarCountAggregateInputType | true
    }

  export interface ScrapedCarDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScrapedCar'], meta: { name: 'ScrapedCar' } }
    /**
     * Find zero or one ScrapedCar that matches the filter.
     * @param {ScrapedCarFindUniqueArgs} args - Arguments to find a ScrapedCar
     * @example
     * // Get one ScrapedCar
     * const scrapedCar = await prisma.scrapedCar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ScrapedCarFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ScrapedCarFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ScrapedCar'> extends True ? Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ScrapedCar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ScrapedCarFindUniqueOrThrowArgs} args - Arguments to find a ScrapedCar
     * @example
     * // Get one ScrapedCar
     * const scrapedCar = await prisma.scrapedCar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ScrapedCarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScrapedCarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ScrapedCar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedCarFindFirstArgs} args - Arguments to find a ScrapedCar
     * @example
     * // Get one ScrapedCar
     * const scrapedCar = await prisma.scrapedCar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ScrapedCarFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ScrapedCarFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ScrapedCar'> extends True ? Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ScrapedCar that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedCarFindFirstOrThrowArgs} args - Arguments to find a ScrapedCar
     * @example
     * // Get one ScrapedCar
     * const scrapedCar = await prisma.scrapedCar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ScrapedCarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ScrapedCarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ScrapedCars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedCarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScrapedCars
     * const scrapedCars = await prisma.scrapedCar.findMany()
     * 
     * // Get first 10 ScrapedCars
     * const scrapedCars = await prisma.scrapedCar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scrapedCarWithIdOnly = await prisma.scrapedCar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ScrapedCarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScrapedCarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ScrapedCar.
     * @param {ScrapedCarCreateArgs} args - Arguments to create a ScrapedCar.
     * @example
     * // Create one ScrapedCar
     * const ScrapedCar = await prisma.scrapedCar.create({
     *   data: {
     *     // ... data to create a ScrapedCar
     *   }
     * })
     * 
    **/
    create<T extends ScrapedCarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ScrapedCarCreateArgs<ExtArgs>>
    ): Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ScrapedCars.
     *     @param {ScrapedCarCreateManyArgs} args - Arguments to create many ScrapedCars.
     *     @example
     *     // Create many ScrapedCars
     *     const scrapedCar = await prisma.scrapedCar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ScrapedCarCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScrapedCarCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ScrapedCar.
     * @param {ScrapedCarDeleteArgs} args - Arguments to delete one ScrapedCar.
     * @example
     * // Delete one ScrapedCar
     * const ScrapedCar = await prisma.scrapedCar.delete({
     *   where: {
     *     // ... filter to delete one ScrapedCar
     *   }
     * })
     * 
    **/
    delete<T extends ScrapedCarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ScrapedCarDeleteArgs<ExtArgs>>
    ): Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ScrapedCar.
     * @param {ScrapedCarUpdateArgs} args - Arguments to update one ScrapedCar.
     * @example
     * // Update one ScrapedCar
     * const scrapedCar = await prisma.scrapedCar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ScrapedCarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ScrapedCarUpdateArgs<ExtArgs>>
    ): Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ScrapedCars.
     * @param {ScrapedCarDeleteManyArgs} args - Arguments to filter ScrapedCars to delete.
     * @example
     * // Delete a few ScrapedCars
     * const { count } = await prisma.scrapedCar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ScrapedCarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ScrapedCarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScrapedCars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedCarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScrapedCars
     * const scrapedCar = await prisma.scrapedCar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ScrapedCarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ScrapedCarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScrapedCar.
     * @param {ScrapedCarUpsertArgs} args - Arguments to update or create a ScrapedCar.
     * @example
     * // Update or create a ScrapedCar
     * const scrapedCar = await prisma.scrapedCar.upsert({
     *   create: {
     *     // ... data to create a ScrapedCar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScrapedCar we want to update
     *   }
     * })
    **/
    upsert<T extends ScrapedCarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ScrapedCarUpsertArgs<ExtArgs>>
    ): Prisma__ScrapedCarClient<$Types.GetResult<ScrapedCarPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ScrapedCars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedCarCountArgs} args - Arguments to filter ScrapedCars to count.
     * @example
     * // Count the number of ScrapedCars
     * const count = await prisma.scrapedCar.count({
     *   where: {
     *     // ... the filter for the ScrapedCars we want to count
     *   }
     * })
    **/
    count<T extends ScrapedCarCountArgs>(
      args?: Subset<T, ScrapedCarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScrapedCarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScrapedCar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedCarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScrapedCarAggregateArgs>(args: Subset<T, ScrapedCarAggregateArgs>): Prisma.PrismaPromise<GetScrapedCarAggregateType<T>>

    /**
     * Group by ScrapedCar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedCarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScrapedCarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScrapedCarGroupByArgs['orderBy'] }
        : { orderBy?: ScrapedCarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScrapedCarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScrapedCarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ScrapedCar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ScrapedCarClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    carModel<T extends CarModelArgs<ExtArgs> = {}>(args?: Subset<T, CarModelArgs<ExtArgs>>): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Stock<T extends StockArgs<ExtArgs> = {}>(args?: Subset<T, StockArgs<ExtArgs>>): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ScrapedCar base type for findUnique actions
   */
  export type ScrapedCarFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * Filter, which ScrapedCar to fetch.
     */
    where: ScrapedCarWhereUniqueInput
  }

  /**
   * ScrapedCar findUnique
   */
  export interface ScrapedCarFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ScrapedCarFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ScrapedCar findUniqueOrThrow
   */
  export type ScrapedCarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * Filter, which ScrapedCar to fetch.
     */
    where: ScrapedCarWhereUniqueInput
  }


  /**
   * ScrapedCar base type for findFirst actions
   */
  export type ScrapedCarFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * Filter, which ScrapedCar to fetch.
     */
    where?: ScrapedCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedCars to fetch.
     */
    orderBy?: Enumerable<ScrapedCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapedCars.
     */
    cursor?: ScrapedCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedCars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapedCars.
     */
    distinct?: Enumerable<ScrapedCarScalarFieldEnum>
  }

  /**
   * ScrapedCar findFirst
   */
  export interface ScrapedCarFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ScrapedCarFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ScrapedCar findFirstOrThrow
   */
  export type ScrapedCarFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * Filter, which ScrapedCar to fetch.
     */
    where?: ScrapedCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedCars to fetch.
     */
    orderBy?: Enumerable<ScrapedCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapedCars.
     */
    cursor?: ScrapedCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedCars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapedCars.
     */
    distinct?: Enumerable<ScrapedCarScalarFieldEnum>
  }


  /**
   * ScrapedCar findMany
   */
  export type ScrapedCarFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * Filter, which ScrapedCars to fetch.
     */
    where?: ScrapedCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedCars to fetch.
     */
    orderBy?: Enumerable<ScrapedCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScrapedCars.
     */
    cursor?: ScrapedCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedCars.
     */
    skip?: number
    distinct?: Enumerable<ScrapedCarScalarFieldEnum>
  }


  /**
   * ScrapedCar create
   */
  export type ScrapedCarCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * The data needed to create a ScrapedCar.
     */
    data: XOR<ScrapedCarCreateInput, ScrapedCarUncheckedCreateInput>
  }


  /**
   * ScrapedCar createMany
   */
  export type ScrapedCarCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScrapedCars.
     */
    data: Enumerable<ScrapedCarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ScrapedCar update
   */
  export type ScrapedCarUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * The data needed to update a ScrapedCar.
     */
    data: XOR<ScrapedCarUpdateInput, ScrapedCarUncheckedUpdateInput>
    /**
     * Choose, which ScrapedCar to update.
     */
    where: ScrapedCarWhereUniqueInput
  }


  /**
   * ScrapedCar updateMany
   */
  export type ScrapedCarUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScrapedCars.
     */
    data: XOR<ScrapedCarUpdateManyMutationInput, ScrapedCarUncheckedUpdateManyInput>
    /**
     * Filter which ScrapedCars to update
     */
    where?: ScrapedCarWhereInput
  }


  /**
   * ScrapedCar upsert
   */
  export type ScrapedCarUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * The filter to search for the ScrapedCar to update in case it exists.
     */
    where: ScrapedCarWhereUniqueInput
    /**
     * In case the ScrapedCar found by the `where` argument doesn't exist, create a new ScrapedCar with this data.
     */
    create: XOR<ScrapedCarCreateInput, ScrapedCarUncheckedCreateInput>
    /**
     * In case the ScrapedCar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScrapedCarUpdateInput, ScrapedCarUncheckedUpdateInput>
  }


  /**
   * ScrapedCar delete
   */
  export type ScrapedCarDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
    /**
     * Filter which ScrapedCar to delete.
     */
    where: ScrapedCarWhereUniqueInput
  }


  /**
   * ScrapedCar deleteMany
   */
  export type ScrapedCarDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapedCars to delete
     */
    where?: ScrapedCarWhereInput
  }


  /**
   * ScrapedCar without action
   */
  export type ScrapedCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedCar
     */
    select?: ScrapedCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScrapedCarInclude<ExtArgs> | null
  }



  /**
   * Model DeviceDealer
   */


  export type AggregateDeviceDealer = {
    _count: DeviceDealerCountAggregateOutputType | null
    _avg: DeviceDealerAvgAggregateOutputType | null
    _sum: DeviceDealerSumAggregateOutputType | null
    _min: DeviceDealerMinAggregateOutputType | null
    _max: DeviceDealerMaxAggregateOutputType | null
  }

  export type DeviceDealerAvgAggregateOutputType = {
    price: number | null
    discount: number | null
  }

  export type DeviceDealerSumAggregateOutputType = {
    price: number | null
    discount: number | null
  }

  export type DeviceDealerMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deviceId: string | null
    dealerId: string | null
    name: string | null
    image: string | null
    originalNumber: string | null
    manufacturerCode: string | null
    manufacturer: string | null
    reference: string | null
    price: number | null
    discount: number | null
    stockId: string | null
    type: string | null
    subtype: string | null
    description: string | null
    quality: string | null
    articleNumber: string | null
    isUsed: boolean | null
    status: string | null
    modelYear: string | null
  }

  export type DeviceDealerMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deviceId: string | null
    dealerId: string | null
    name: string | null
    image: string | null
    originalNumber: string | null
    manufacturerCode: string | null
    manufacturer: string | null
    reference: string | null
    price: number | null
    discount: number | null
    stockId: string | null
    type: string | null
    subtype: string | null
    description: string | null
    quality: string | null
    articleNumber: string | null
    isUsed: boolean | null
    status: string | null
    modelYear: string | null
  }

  export type DeviceDealerCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    deviceId: number
    dealerId: number
    name: number
    image: number
    images: number
    originalNumber: number
    manufacturerCode: number
    manufacturer: number
    reference: number
    price: number
    discount: number
    stockId: number
    type: number
    subtype: number
    description: number
    quality: number
    articleNumber: number
    isUsed: number
    status: number
    modelYear: number
    _all: number
  }


  export type DeviceDealerAvgAggregateInputType = {
    price?: true
    discount?: true
  }

  export type DeviceDealerSumAggregateInputType = {
    price?: true
    discount?: true
  }

  export type DeviceDealerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deviceId?: true
    dealerId?: true
    name?: true
    image?: true
    originalNumber?: true
    manufacturerCode?: true
    manufacturer?: true
    reference?: true
    price?: true
    discount?: true
    stockId?: true
    type?: true
    subtype?: true
    description?: true
    quality?: true
    articleNumber?: true
    isUsed?: true
    status?: true
    modelYear?: true
  }

  export type DeviceDealerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deviceId?: true
    dealerId?: true
    name?: true
    image?: true
    originalNumber?: true
    manufacturerCode?: true
    manufacturer?: true
    reference?: true
    price?: true
    discount?: true
    stockId?: true
    type?: true
    subtype?: true
    description?: true
    quality?: true
    articleNumber?: true
    isUsed?: true
    status?: true
    modelYear?: true
  }

  export type DeviceDealerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deviceId?: true
    dealerId?: true
    name?: true
    image?: true
    images?: true
    originalNumber?: true
    manufacturerCode?: true
    manufacturer?: true
    reference?: true
    price?: true
    discount?: true
    stockId?: true
    type?: true
    subtype?: true
    description?: true
    quality?: true
    articleNumber?: true
    isUsed?: true
    status?: true
    modelYear?: true
    _all?: true
  }

  export type DeviceDealerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceDealer to aggregate.
     */
    where?: DeviceDealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceDealers to fetch.
     */
    orderBy?: Enumerable<DeviceDealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceDealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceDealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceDealers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceDealers
    **/
    _count?: true | DeviceDealerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceDealerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceDealerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceDealerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceDealerMaxAggregateInputType
  }

  export type GetDeviceDealerAggregateType<T extends DeviceDealerAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceDealer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceDealer[P]>
      : GetScalarType<T[P], AggregateDeviceDealer[P]>
  }




  export type DeviceDealerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeviceDealerWhereInput
    orderBy?: Enumerable<DeviceDealerOrderByWithAggregationInput>
    by: DeviceDealerScalarFieldEnum[]
    having?: DeviceDealerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceDealerCountAggregateInputType | true
    _avg?: DeviceDealerAvgAggregateInputType
    _sum?: DeviceDealerSumAggregateInputType
    _min?: DeviceDealerMinAggregateInputType
    _max?: DeviceDealerMaxAggregateInputType
  }


  export type DeviceDealerGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    deviceId: string
    dealerId: string
    name: string
    image: string | null
    images: string[]
    originalNumber: string | null
    manufacturerCode: string | null
    manufacturer: string | null
    reference: string | null
    price: number | null
    discount: number | null
    stockId: string | null
    type: string | null
    subtype: string | null
    description: string | null
    quality: string | null
    articleNumber: string | null
    isUsed: boolean | null
    status: string | null
    modelYear: string | null
    _count: DeviceDealerCountAggregateOutputType | null
    _avg: DeviceDealerAvgAggregateOutputType | null
    _sum: DeviceDealerSumAggregateOutputType | null
    _min: DeviceDealerMinAggregateOutputType | null
    _max: DeviceDealerMaxAggregateOutputType | null
  }

  type GetDeviceDealerGroupByPayload<T extends DeviceDealerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DeviceDealerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceDealerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceDealerGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceDealerGroupByOutputType[P]>
        }
      >
    >


  export type DeviceDealerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deviceId?: boolean
    dealerId?: boolean
    name?: boolean
    image?: boolean
    images?: boolean
    originalNumber?: boolean
    manufacturerCode?: boolean
    manufacturer?: boolean
    reference?: boolean
    price?: boolean
    discount?: boolean
    stockId?: boolean
    type?: boolean
    subtype?: boolean
    description?: boolean
    quality?: boolean
    articleNumber?: boolean
    isUsed?: boolean
    status?: boolean
    modelYear?: boolean
    device?: boolean | DeviceArgs<ExtArgs>
    dealer?: boolean | DealerArgs<ExtArgs>
    Stock?: boolean | StockArgs<ExtArgs>
  }, ExtArgs["result"]["deviceDealer"]>

  export type DeviceDealerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deviceId?: boolean
    dealerId?: boolean
    name?: boolean
    image?: boolean
    images?: boolean
    originalNumber?: boolean
    manufacturerCode?: boolean
    manufacturer?: boolean
    reference?: boolean
    price?: boolean
    discount?: boolean
    stockId?: boolean
    type?: boolean
    subtype?: boolean
    description?: boolean
    quality?: boolean
    articleNumber?: boolean
    isUsed?: boolean
    status?: boolean
    modelYear?: boolean
  }

  export type DeviceDealerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceArgs<ExtArgs>
    dealer?: boolean | DealerArgs<ExtArgs>
    Stock?: boolean | StockArgs<ExtArgs>
  }


  type DeviceDealerGetPayload<S extends boolean | null | undefined | DeviceDealerArgs> = $Types.GetResult<DeviceDealerPayload, S>

  type DeviceDealerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DeviceDealerFindManyArgs, 'select' | 'include'> & {
      select?: DeviceDealerCountAggregateInputType | true
    }

  export interface DeviceDealerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceDealer'], meta: { name: 'DeviceDealer' } }
    /**
     * Find zero or one DeviceDealer that matches the filter.
     * @param {DeviceDealerFindUniqueArgs} args - Arguments to find a DeviceDealer
     * @example
     * // Get one DeviceDealer
     * const deviceDealer = await prisma.deviceDealer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeviceDealerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeviceDealerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DeviceDealer'> extends True ? Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one DeviceDealer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DeviceDealerFindUniqueOrThrowArgs} args - Arguments to find a DeviceDealer
     * @example
     * // Get one DeviceDealer
     * const deviceDealer = await prisma.deviceDealer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeviceDealerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceDealerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first DeviceDealer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceDealerFindFirstArgs} args - Arguments to find a DeviceDealer
     * @example
     * // Get one DeviceDealer
     * const deviceDealer = await prisma.deviceDealer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeviceDealerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeviceDealerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DeviceDealer'> extends True ? Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first DeviceDealer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceDealerFindFirstOrThrowArgs} args - Arguments to find a DeviceDealer
     * @example
     * // Get one DeviceDealer
     * const deviceDealer = await prisma.deviceDealer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeviceDealerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceDealerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more DeviceDealers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceDealerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceDealers
     * const deviceDealers = await prisma.deviceDealer.findMany()
     * 
     * // Get first 10 DeviceDealers
     * const deviceDealers = await prisma.deviceDealer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceDealerWithIdOnly = await prisma.deviceDealer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeviceDealerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceDealerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a DeviceDealer.
     * @param {DeviceDealerCreateArgs} args - Arguments to create a DeviceDealer.
     * @example
     * // Create one DeviceDealer
     * const DeviceDealer = await prisma.deviceDealer.create({
     *   data: {
     *     // ... data to create a DeviceDealer
     *   }
     * })
     * 
    **/
    create<T extends DeviceDealerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceDealerCreateArgs<ExtArgs>>
    ): Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many DeviceDealers.
     *     @param {DeviceDealerCreateManyArgs} args - Arguments to create many DeviceDealers.
     *     @example
     *     // Create many DeviceDealers
     *     const deviceDealer = await prisma.deviceDealer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeviceDealerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceDealerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DeviceDealer.
     * @param {DeviceDealerDeleteArgs} args - Arguments to delete one DeviceDealer.
     * @example
     * // Delete one DeviceDealer
     * const DeviceDealer = await prisma.deviceDealer.delete({
     *   where: {
     *     // ... filter to delete one DeviceDealer
     *   }
     * })
     * 
    **/
    delete<T extends DeviceDealerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceDealerDeleteArgs<ExtArgs>>
    ): Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one DeviceDealer.
     * @param {DeviceDealerUpdateArgs} args - Arguments to update one DeviceDealer.
     * @example
     * // Update one DeviceDealer
     * const deviceDealer = await prisma.deviceDealer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeviceDealerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceDealerUpdateArgs<ExtArgs>>
    ): Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more DeviceDealers.
     * @param {DeviceDealerDeleteManyArgs} args - Arguments to filter DeviceDealers to delete.
     * @example
     * // Delete a few DeviceDealers
     * const { count } = await prisma.deviceDealer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeviceDealerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeviceDealerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceDealers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceDealerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceDealers
     * const deviceDealer = await prisma.deviceDealer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeviceDealerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceDealerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeviceDealer.
     * @param {DeviceDealerUpsertArgs} args - Arguments to update or create a DeviceDealer.
     * @example
     * // Update or create a DeviceDealer
     * const deviceDealer = await prisma.deviceDealer.upsert({
     *   create: {
     *     // ... data to create a DeviceDealer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceDealer we want to update
     *   }
     * })
    **/
    upsert<T extends DeviceDealerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DeviceDealerUpsertArgs<ExtArgs>>
    ): Prisma__DeviceDealerClient<$Types.GetResult<DeviceDealerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of DeviceDealers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceDealerCountArgs} args - Arguments to filter DeviceDealers to count.
     * @example
     * // Count the number of DeviceDealers
     * const count = await prisma.deviceDealer.count({
     *   where: {
     *     // ... the filter for the DeviceDealers we want to count
     *   }
     * })
    **/
    count<T extends DeviceDealerCountArgs>(
      args?: Subset<T, DeviceDealerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceDealerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceDealer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceDealerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceDealerAggregateArgs>(args: Subset<T, DeviceDealerAggregateArgs>): Prisma.PrismaPromise<GetDeviceDealerAggregateType<T>>

    /**
     * Group by DeviceDealer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceDealerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceDealerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceDealerGroupByArgs['orderBy'] }
        : { orderBy?: DeviceDealerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceDealerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceDealerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceDealer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeviceDealerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    device<T extends DeviceArgs<ExtArgs> = {}>(args?: Subset<T, DeviceArgs<ExtArgs>>): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    dealer<T extends DealerArgs<ExtArgs> = {}>(args?: Subset<T, DealerArgs<ExtArgs>>): Prisma__DealerClient<$Types.GetResult<DealerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Stock<T extends StockArgs<ExtArgs> = {}>(args?: Subset<T, StockArgs<ExtArgs>>): Prisma__StockClient<$Types.GetResult<StockPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DeviceDealer base type for findUnique actions
   */
  export type DeviceDealerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * Filter, which DeviceDealer to fetch.
     */
    where: DeviceDealerWhereUniqueInput
  }

  /**
   * DeviceDealer findUnique
   */
  export interface DeviceDealerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DeviceDealerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DeviceDealer findUniqueOrThrow
   */
  export type DeviceDealerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * Filter, which DeviceDealer to fetch.
     */
    where: DeviceDealerWhereUniqueInput
  }


  /**
   * DeviceDealer base type for findFirst actions
   */
  export type DeviceDealerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * Filter, which DeviceDealer to fetch.
     */
    where?: DeviceDealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceDealers to fetch.
     */
    orderBy?: Enumerable<DeviceDealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceDealers.
     */
    cursor?: DeviceDealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceDealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceDealers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceDealers.
     */
    distinct?: Enumerable<DeviceDealerScalarFieldEnum>
  }

  /**
   * DeviceDealer findFirst
   */
  export interface DeviceDealerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DeviceDealerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DeviceDealer findFirstOrThrow
   */
  export type DeviceDealerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * Filter, which DeviceDealer to fetch.
     */
    where?: DeviceDealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceDealers to fetch.
     */
    orderBy?: Enumerable<DeviceDealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceDealers.
     */
    cursor?: DeviceDealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceDealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceDealers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceDealers.
     */
    distinct?: Enumerable<DeviceDealerScalarFieldEnum>
  }


  /**
   * DeviceDealer findMany
   */
  export type DeviceDealerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * Filter, which DeviceDealers to fetch.
     */
    where?: DeviceDealerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceDealers to fetch.
     */
    orderBy?: Enumerable<DeviceDealerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceDealers.
     */
    cursor?: DeviceDealerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceDealers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceDealers.
     */
    skip?: number
    distinct?: Enumerable<DeviceDealerScalarFieldEnum>
  }


  /**
   * DeviceDealer create
   */
  export type DeviceDealerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * The data needed to create a DeviceDealer.
     */
    data: XOR<DeviceDealerCreateInput, DeviceDealerUncheckedCreateInput>
  }


  /**
   * DeviceDealer createMany
   */
  export type DeviceDealerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceDealers.
     */
    data: Enumerable<DeviceDealerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DeviceDealer update
   */
  export type DeviceDealerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * The data needed to update a DeviceDealer.
     */
    data: XOR<DeviceDealerUpdateInput, DeviceDealerUncheckedUpdateInput>
    /**
     * Choose, which DeviceDealer to update.
     */
    where: DeviceDealerWhereUniqueInput
  }


  /**
   * DeviceDealer updateMany
   */
  export type DeviceDealerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceDealers.
     */
    data: XOR<DeviceDealerUpdateManyMutationInput, DeviceDealerUncheckedUpdateManyInput>
    /**
     * Filter which DeviceDealers to update
     */
    where?: DeviceDealerWhereInput
  }


  /**
   * DeviceDealer upsert
   */
  export type DeviceDealerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * The filter to search for the DeviceDealer to update in case it exists.
     */
    where: DeviceDealerWhereUniqueInput
    /**
     * In case the DeviceDealer found by the `where` argument doesn't exist, create a new DeviceDealer with this data.
     */
    create: XOR<DeviceDealerCreateInput, DeviceDealerUncheckedCreateInput>
    /**
     * In case the DeviceDealer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceDealerUpdateInput, DeviceDealerUncheckedUpdateInput>
  }


  /**
   * DeviceDealer delete
   */
  export type DeviceDealerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
    /**
     * Filter which DeviceDealer to delete.
     */
    where: DeviceDealerWhereUniqueInput
  }


  /**
   * DeviceDealer deleteMany
   */
  export type DeviceDealerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceDealers to delete
     */
    where?: DeviceDealerWhereInput
  }


  /**
   * DeviceDealer without action
   */
  export type DeviceDealerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceDealer
     */
    select?: DeviceDealerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceDealerInclude<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    appleId: string | null
    stripeId: string | null
    telephone: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    appleId: string | null
    stripeId: string | null
    telephone: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    image: number
    password: number
    createdAt: number
    updatedAt: number
    role: number
    appleId: number
    stripeId: number
    telephone: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    appleId?: true
    stripeId?: true
    telephone?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    appleId?: true
    stripeId?: true
    telephone?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    appleId?: true
    stripeId?: true
    telephone?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    image: string | null
    password: string
    createdAt: Date
    updatedAt: Date
    role: string
    appleId: string | null
    stripeId: string | null
    telephone: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    appleId?: boolean
    stripeId?: boolean
    telephone?: boolean
    pushTokens?: boolean | User$pushTokensArgs<ExtArgs>
    interestedModels?: boolean | User$interestedModelsArgs<ExtArgs>
    interestedDevices?: boolean | User$interestedDevicesArgs<ExtArgs>
    cars?: boolean | User$carsArgs<ExtArgs>
    addresses?: boolean | User$addressesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    appleId?: boolean
    stripeId?: boolean
    telephone?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    pushTokens?: boolean | User$pushTokensArgs<ExtArgs>
    interestedModels?: boolean | User$interestedModelsArgs<ExtArgs>
    interestedDevices?: boolean | User$interestedDevicesArgs<ExtArgs>
    cars?: boolean | User$carsArgs<ExtArgs>
    addresses?: boolean | User$addressesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pushTokens<T extends User$pushTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$pushTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findMany', never>| Null>;

    interestedModels<T extends User$interestedModelsArgs<ExtArgs> = {}>(args?: Subset<T, User$interestedModelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    interestedDevices<T extends User$interestedDevicesArgs<ExtArgs> = {}>(args?: Subset<T, User$interestedDevicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    cars<T extends User$carsArgs<ExtArgs> = {}>(args?: Subset<T, User$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    addresses<T extends User$addressesArgs<ExtArgs> = {}>(args?: Subset<T, User$addressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.pushTokens
   */
  export type User$pushTokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    where?: PushTokenWhereInput
    orderBy?: Enumerable<PushTokenOrderByWithRelationInput>
    cursor?: PushTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PushTokenScalarFieldEnum>
  }


  /**
   * User.interestedModels
   */
  export type User$interestedModelsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    where?: UserModelInterestWhereInput
    orderBy?: Enumerable<UserModelInterestOrderByWithRelationInput>
    cursor?: UserModelInterestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserModelInterestScalarFieldEnum>
  }


  /**
   * User.interestedDevices
   */
  export type User$interestedDevicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    where?: UserDeviceInterestWhereInput
    orderBy?: Enumerable<UserDeviceInterestOrderByWithRelationInput>
    cursor?: UserDeviceInterestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDeviceInterestScalarFieldEnum>
  }


  /**
   * User.cars
   */
  export type User$carsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    where?: UserCarWhereInput
    orderBy?: Enumerable<UserCarOrderByWithRelationInput>
    cursor?: UserCarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserCarScalarFieldEnum>
  }


  /**
   * User.addresses
   */
  export type User$addressesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    where?: UserAddressWhereInput
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    cursor?: UserAddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserAddressScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model UserModelInterest
   */


  export type AggregateUserModelInterest = {
    _count: UserModelInterestCountAggregateOutputType | null
    _min: UserModelInterestMinAggregateOutputType | null
    _max: UserModelInterestMaxAggregateOutputType | null
  }

  export type UserModelInterestMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    carModelId: string | null
  }

  export type UserModelInterestMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    carModelId: string | null
  }

  export type UserModelInterestCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    carModelId: number
    _all: number
  }


  export type UserModelInterestMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    carModelId?: true
  }

  export type UserModelInterestMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    carModelId?: true
  }

  export type UserModelInterestCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    carModelId?: true
    _all?: true
  }

  export type UserModelInterestAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserModelInterest to aggregate.
     */
    where?: UserModelInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserModelInterests to fetch.
     */
    orderBy?: Enumerable<UserModelInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserModelInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserModelInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserModelInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserModelInterests
    **/
    _count?: true | UserModelInterestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserModelInterestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserModelInterestMaxAggregateInputType
  }

  export type GetUserModelInterestAggregateType<T extends UserModelInterestAggregateArgs> = {
        [P in keyof T & keyof AggregateUserModelInterest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserModelInterest[P]>
      : GetScalarType<T[P], AggregateUserModelInterest[P]>
  }




  export type UserModelInterestGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserModelInterestWhereInput
    orderBy?: Enumerable<UserModelInterestOrderByWithAggregationInput>
    by: UserModelInterestScalarFieldEnum[]
    having?: UserModelInterestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserModelInterestCountAggregateInputType | true
    _min?: UserModelInterestMinAggregateInputType
    _max?: UserModelInterestMaxAggregateInputType
  }


  export type UserModelInterestGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    carModelId: string
    _count: UserModelInterestCountAggregateOutputType | null
    _min: UserModelInterestMinAggregateOutputType | null
    _max: UserModelInterestMaxAggregateOutputType | null
  }

  type GetUserModelInterestGroupByPayload<T extends UserModelInterestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserModelInterestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserModelInterestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserModelInterestGroupByOutputType[P]>
            : GetScalarType<T[P], UserModelInterestGroupByOutputType[P]>
        }
      >
    >


  export type UserModelInterestSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    carModelId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    carModel?: boolean | CarModelArgs<ExtArgs>
  }, ExtArgs["result"]["userModelInterest"]>

  export type UserModelInterestSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    carModelId?: boolean
  }

  export type UserModelInterestInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    carModel?: boolean | CarModelArgs<ExtArgs>
  }


  type UserModelInterestGetPayload<S extends boolean | null | undefined | UserModelInterestArgs> = $Types.GetResult<UserModelInterestPayload, S>

  type UserModelInterestCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserModelInterestFindManyArgs, 'select' | 'include'> & {
      select?: UserModelInterestCountAggregateInputType | true
    }

  export interface UserModelInterestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserModelInterest'], meta: { name: 'UserModelInterest' } }
    /**
     * Find zero or one UserModelInterest that matches the filter.
     * @param {UserModelInterestFindUniqueArgs} args - Arguments to find a UserModelInterest
     * @example
     * // Get one UserModelInterest
     * const userModelInterest = await prisma.userModelInterest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserModelInterestFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserModelInterestFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserModelInterest'> extends True ? Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UserModelInterest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserModelInterestFindUniqueOrThrowArgs} args - Arguments to find a UserModelInterest
     * @example
     * // Get one UserModelInterest
     * const userModelInterest = await prisma.userModelInterest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserModelInterestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserModelInterestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UserModelInterest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserModelInterestFindFirstArgs} args - Arguments to find a UserModelInterest
     * @example
     * // Get one UserModelInterest
     * const userModelInterest = await prisma.userModelInterest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserModelInterestFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserModelInterestFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserModelInterest'> extends True ? Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UserModelInterest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserModelInterestFindFirstOrThrowArgs} args - Arguments to find a UserModelInterest
     * @example
     * // Get one UserModelInterest
     * const userModelInterest = await prisma.userModelInterest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserModelInterestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserModelInterestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UserModelInterests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserModelInterestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserModelInterests
     * const userModelInterests = await prisma.userModelInterest.findMany()
     * 
     * // Get first 10 UserModelInterests
     * const userModelInterests = await prisma.userModelInterest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userModelInterestWithIdOnly = await prisma.userModelInterest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserModelInterestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserModelInterestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UserModelInterest.
     * @param {UserModelInterestCreateArgs} args - Arguments to create a UserModelInterest.
     * @example
     * // Create one UserModelInterest
     * const UserModelInterest = await prisma.userModelInterest.create({
     *   data: {
     *     // ... data to create a UserModelInterest
     *   }
     * })
     * 
    **/
    create<T extends UserModelInterestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserModelInterestCreateArgs<ExtArgs>>
    ): Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UserModelInterests.
     *     @param {UserModelInterestCreateManyArgs} args - Arguments to create many UserModelInterests.
     *     @example
     *     // Create many UserModelInterests
     *     const userModelInterest = await prisma.userModelInterest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserModelInterestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserModelInterestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserModelInterest.
     * @param {UserModelInterestDeleteArgs} args - Arguments to delete one UserModelInterest.
     * @example
     * // Delete one UserModelInterest
     * const UserModelInterest = await prisma.userModelInterest.delete({
     *   where: {
     *     // ... filter to delete one UserModelInterest
     *   }
     * })
     * 
    **/
    delete<T extends UserModelInterestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserModelInterestDeleteArgs<ExtArgs>>
    ): Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UserModelInterest.
     * @param {UserModelInterestUpdateArgs} args - Arguments to update one UserModelInterest.
     * @example
     * // Update one UserModelInterest
     * const userModelInterest = await prisma.userModelInterest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserModelInterestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserModelInterestUpdateArgs<ExtArgs>>
    ): Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UserModelInterests.
     * @param {UserModelInterestDeleteManyArgs} args - Arguments to filter UserModelInterests to delete.
     * @example
     * // Delete a few UserModelInterests
     * const { count } = await prisma.userModelInterest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserModelInterestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserModelInterestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserModelInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserModelInterestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserModelInterests
     * const userModelInterest = await prisma.userModelInterest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserModelInterestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserModelInterestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserModelInterest.
     * @param {UserModelInterestUpsertArgs} args - Arguments to update or create a UserModelInterest.
     * @example
     * // Update or create a UserModelInterest
     * const userModelInterest = await prisma.userModelInterest.upsert({
     *   create: {
     *     // ... data to create a UserModelInterest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserModelInterest we want to update
     *   }
     * })
    **/
    upsert<T extends UserModelInterestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserModelInterestUpsertArgs<ExtArgs>>
    ): Prisma__UserModelInterestClient<$Types.GetResult<UserModelInterestPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UserModelInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserModelInterestCountArgs} args - Arguments to filter UserModelInterests to count.
     * @example
     * // Count the number of UserModelInterests
     * const count = await prisma.userModelInterest.count({
     *   where: {
     *     // ... the filter for the UserModelInterests we want to count
     *   }
     * })
    **/
    count<T extends UserModelInterestCountArgs>(
      args?: Subset<T, UserModelInterestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserModelInterestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserModelInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserModelInterestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserModelInterestAggregateArgs>(args: Subset<T, UserModelInterestAggregateArgs>): Prisma.PrismaPromise<GetUserModelInterestAggregateType<T>>

    /**
     * Group by UserModelInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserModelInterestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserModelInterestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserModelInterestGroupByArgs['orderBy'] }
        : { orderBy?: UserModelInterestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserModelInterestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserModelInterestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserModelInterest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserModelInterestClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    carModel<T extends CarModelArgs<ExtArgs> = {}>(args?: Subset<T, CarModelArgs<ExtArgs>>): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserModelInterest base type for findUnique actions
   */
  export type UserModelInterestFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserModelInterest to fetch.
     */
    where: UserModelInterestWhereUniqueInput
  }

  /**
   * UserModelInterest findUnique
   */
  export interface UserModelInterestFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserModelInterestFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserModelInterest findUniqueOrThrow
   */
  export type UserModelInterestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserModelInterest to fetch.
     */
    where: UserModelInterestWhereUniqueInput
  }


  /**
   * UserModelInterest base type for findFirst actions
   */
  export type UserModelInterestFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserModelInterest to fetch.
     */
    where?: UserModelInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserModelInterests to fetch.
     */
    orderBy?: Enumerable<UserModelInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserModelInterests.
     */
    cursor?: UserModelInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserModelInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserModelInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserModelInterests.
     */
    distinct?: Enumerable<UserModelInterestScalarFieldEnum>
  }

  /**
   * UserModelInterest findFirst
   */
  export interface UserModelInterestFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserModelInterestFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserModelInterest findFirstOrThrow
   */
  export type UserModelInterestFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserModelInterest to fetch.
     */
    where?: UserModelInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserModelInterests to fetch.
     */
    orderBy?: Enumerable<UserModelInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserModelInterests.
     */
    cursor?: UserModelInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserModelInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserModelInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserModelInterests.
     */
    distinct?: Enumerable<UserModelInterestScalarFieldEnum>
  }


  /**
   * UserModelInterest findMany
   */
  export type UserModelInterestFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserModelInterests to fetch.
     */
    where?: UserModelInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserModelInterests to fetch.
     */
    orderBy?: Enumerable<UserModelInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserModelInterests.
     */
    cursor?: UserModelInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserModelInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserModelInterests.
     */
    skip?: number
    distinct?: Enumerable<UserModelInterestScalarFieldEnum>
  }


  /**
   * UserModelInterest create
   */
  export type UserModelInterestCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * The data needed to create a UserModelInterest.
     */
    data: XOR<UserModelInterestCreateInput, UserModelInterestUncheckedCreateInput>
  }


  /**
   * UserModelInterest createMany
   */
  export type UserModelInterestCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserModelInterests.
     */
    data: Enumerable<UserModelInterestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserModelInterest update
   */
  export type UserModelInterestUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * The data needed to update a UserModelInterest.
     */
    data: XOR<UserModelInterestUpdateInput, UserModelInterestUncheckedUpdateInput>
    /**
     * Choose, which UserModelInterest to update.
     */
    where: UserModelInterestWhereUniqueInput
  }


  /**
   * UserModelInterest updateMany
   */
  export type UserModelInterestUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserModelInterests.
     */
    data: XOR<UserModelInterestUpdateManyMutationInput, UserModelInterestUncheckedUpdateManyInput>
    /**
     * Filter which UserModelInterests to update
     */
    where?: UserModelInterestWhereInput
  }


  /**
   * UserModelInterest upsert
   */
  export type UserModelInterestUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * The filter to search for the UserModelInterest to update in case it exists.
     */
    where: UserModelInterestWhereUniqueInput
    /**
     * In case the UserModelInterest found by the `where` argument doesn't exist, create a new UserModelInterest with this data.
     */
    create: XOR<UserModelInterestCreateInput, UserModelInterestUncheckedCreateInput>
    /**
     * In case the UserModelInterest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserModelInterestUpdateInput, UserModelInterestUncheckedUpdateInput>
  }


  /**
   * UserModelInterest delete
   */
  export type UserModelInterestDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
    /**
     * Filter which UserModelInterest to delete.
     */
    where: UserModelInterestWhereUniqueInput
  }


  /**
   * UserModelInterest deleteMany
   */
  export type UserModelInterestDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserModelInterests to delete
     */
    where?: UserModelInterestWhereInput
  }


  /**
   * UserModelInterest without action
   */
  export type UserModelInterestArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserModelInterest
     */
    select?: UserModelInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserModelInterestInclude<ExtArgs> | null
  }



  /**
   * Model UserDeviceInterest
   */


  export type AggregateUserDeviceInterest = {
    _count: UserDeviceInterestCountAggregateOutputType | null
    _min: UserDeviceInterestMinAggregateOutputType | null
    _max: UserDeviceInterestMaxAggregateOutputType | null
  }

  export type UserDeviceInterestMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    deviceId: string | null
  }

  export type UserDeviceInterestMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    deviceId: string | null
  }

  export type UserDeviceInterestCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    deviceId: number
    _all: number
  }


  export type UserDeviceInterestMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    deviceId?: true
  }

  export type UserDeviceInterestMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    deviceId?: true
  }

  export type UserDeviceInterestCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    deviceId?: true
    _all?: true
  }

  export type UserDeviceInterestAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDeviceInterest to aggregate.
     */
    where?: UserDeviceInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDeviceInterests to fetch.
     */
    orderBy?: Enumerable<UserDeviceInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDeviceInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDeviceInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDeviceInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDeviceInterests
    **/
    _count?: true | UserDeviceInterestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDeviceInterestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDeviceInterestMaxAggregateInputType
  }

  export type GetUserDeviceInterestAggregateType<T extends UserDeviceInterestAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDeviceInterest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDeviceInterest[P]>
      : GetScalarType<T[P], AggregateUserDeviceInterest[P]>
  }




  export type UserDeviceInterestGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserDeviceInterestWhereInput
    orderBy?: Enumerable<UserDeviceInterestOrderByWithAggregationInput>
    by: UserDeviceInterestScalarFieldEnum[]
    having?: UserDeviceInterestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDeviceInterestCountAggregateInputType | true
    _min?: UserDeviceInterestMinAggregateInputType
    _max?: UserDeviceInterestMaxAggregateInputType
  }


  export type UserDeviceInterestGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    deviceId: string
    _count: UserDeviceInterestCountAggregateOutputType | null
    _min: UserDeviceInterestMinAggregateOutputType | null
    _max: UserDeviceInterestMaxAggregateOutputType | null
  }

  type GetUserDeviceInterestGroupByPayload<T extends UserDeviceInterestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserDeviceInterestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDeviceInterestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDeviceInterestGroupByOutputType[P]>
            : GetScalarType<T[P], UserDeviceInterestGroupByOutputType[P]>
        }
      >
    >


  export type UserDeviceInterestSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    deviceId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    device?: boolean | DeviceArgs<ExtArgs>
  }, ExtArgs["result"]["userDeviceInterest"]>

  export type UserDeviceInterestSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    deviceId?: boolean
  }

  export type UserDeviceInterestInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    device?: boolean | DeviceArgs<ExtArgs>
  }


  type UserDeviceInterestGetPayload<S extends boolean | null | undefined | UserDeviceInterestArgs> = $Types.GetResult<UserDeviceInterestPayload, S>

  type UserDeviceInterestCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserDeviceInterestFindManyArgs, 'select' | 'include'> & {
      select?: UserDeviceInterestCountAggregateInputType | true
    }

  export interface UserDeviceInterestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDeviceInterest'], meta: { name: 'UserDeviceInterest' } }
    /**
     * Find zero or one UserDeviceInterest that matches the filter.
     * @param {UserDeviceInterestFindUniqueArgs} args - Arguments to find a UserDeviceInterest
     * @example
     * // Get one UserDeviceInterest
     * const userDeviceInterest = await prisma.userDeviceInterest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserDeviceInterestFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserDeviceInterestFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserDeviceInterest'> extends True ? Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UserDeviceInterest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserDeviceInterestFindUniqueOrThrowArgs} args - Arguments to find a UserDeviceInterest
     * @example
     * // Get one UserDeviceInterest
     * const userDeviceInterest = await prisma.userDeviceInterest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserDeviceInterestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeviceInterestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UserDeviceInterest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceInterestFindFirstArgs} args - Arguments to find a UserDeviceInterest
     * @example
     * // Get one UserDeviceInterest
     * const userDeviceInterest = await prisma.userDeviceInterest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserDeviceInterestFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserDeviceInterestFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserDeviceInterest'> extends True ? Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UserDeviceInterest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceInterestFindFirstOrThrowArgs} args - Arguments to find a UserDeviceInterest
     * @example
     * // Get one UserDeviceInterest
     * const userDeviceInterest = await prisma.userDeviceInterest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserDeviceInterestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeviceInterestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UserDeviceInterests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceInterestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDeviceInterests
     * const userDeviceInterests = await prisma.userDeviceInterest.findMany()
     * 
     * // Get first 10 UserDeviceInterests
     * const userDeviceInterests = await prisma.userDeviceInterest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDeviceInterestWithIdOnly = await prisma.userDeviceInterest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserDeviceInterestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeviceInterestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UserDeviceInterest.
     * @param {UserDeviceInterestCreateArgs} args - Arguments to create a UserDeviceInterest.
     * @example
     * // Create one UserDeviceInterest
     * const UserDeviceInterest = await prisma.userDeviceInterest.create({
     *   data: {
     *     // ... data to create a UserDeviceInterest
     *   }
     * })
     * 
    **/
    create<T extends UserDeviceInterestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeviceInterestCreateArgs<ExtArgs>>
    ): Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UserDeviceInterests.
     *     @param {UserDeviceInterestCreateManyArgs} args - Arguments to create many UserDeviceInterests.
     *     @example
     *     // Create many UserDeviceInterests
     *     const userDeviceInterest = await prisma.userDeviceInterest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserDeviceInterestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeviceInterestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserDeviceInterest.
     * @param {UserDeviceInterestDeleteArgs} args - Arguments to delete one UserDeviceInterest.
     * @example
     * // Delete one UserDeviceInterest
     * const UserDeviceInterest = await prisma.userDeviceInterest.delete({
     *   where: {
     *     // ... filter to delete one UserDeviceInterest
     *   }
     * })
     * 
    **/
    delete<T extends UserDeviceInterestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeviceInterestDeleteArgs<ExtArgs>>
    ): Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UserDeviceInterest.
     * @param {UserDeviceInterestUpdateArgs} args - Arguments to update one UserDeviceInterest.
     * @example
     * // Update one UserDeviceInterest
     * const userDeviceInterest = await prisma.userDeviceInterest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserDeviceInterestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeviceInterestUpdateArgs<ExtArgs>>
    ): Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UserDeviceInterests.
     * @param {UserDeviceInterestDeleteManyArgs} args - Arguments to filter UserDeviceInterests to delete.
     * @example
     * // Delete a few UserDeviceInterests
     * const { count } = await prisma.userDeviceInterest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeviceInterestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeviceInterestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDeviceInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceInterestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDeviceInterests
     * const userDeviceInterest = await prisma.userDeviceInterest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserDeviceInterestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeviceInterestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserDeviceInterest.
     * @param {UserDeviceInterestUpsertArgs} args - Arguments to update or create a UserDeviceInterest.
     * @example
     * // Update or create a UserDeviceInterest
     * const userDeviceInterest = await prisma.userDeviceInterest.upsert({
     *   create: {
     *     // ... data to create a UserDeviceInterest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDeviceInterest we want to update
     *   }
     * })
    **/
    upsert<T extends UserDeviceInterestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeviceInterestUpsertArgs<ExtArgs>>
    ): Prisma__UserDeviceInterestClient<$Types.GetResult<UserDeviceInterestPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UserDeviceInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceInterestCountArgs} args - Arguments to filter UserDeviceInterests to count.
     * @example
     * // Count the number of UserDeviceInterests
     * const count = await prisma.userDeviceInterest.count({
     *   where: {
     *     // ... the filter for the UserDeviceInterests we want to count
     *   }
     * })
    **/
    count<T extends UserDeviceInterestCountArgs>(
      args?: Subset<T, UserDeviceInterestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDeviceInterestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDeviceInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceInterestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDeviceInterestAggregateArgs>(args: Subset<T, UserDeviceInterestAggregateArgs>): Prisma.PrismaPromise<GetUserDeviceInterestAggregateType<T>>

    /**
     * Group by UserDeviceInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDeviceInterestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDeviceInterestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDeviceInterestGroupByArgs['orderBy'] }
        : { orderBy?: UserDeviceInterestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDeviceInterestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDeviceInterestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDeviceInterest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserDeviceInterestClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    device<T extends DeviceArgs<ExtArgs> = {}>(args?: Subset<T, DeviceArgs<ExtArgs>>): Prisma__DeviceClient<$Types.GetResult<DevicePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserDeviceInterest base type for findUnique actions
   */
  export type UserDeviceInterestFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserDeviceInterest to fetch.
     */
    where: UserDeviceInterestWhereUniqueInput
  }

  /**
   * UserDeviceInterest findUnique
   */
  export interface UserDeviceInterestFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserDeviceInterestFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserDeviceInterest findUniqueOrThrow
   */
  export type UserDeviceInterestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserDeviceInterest to fetch.
     */
    where: UserDeviceInterestWhereUniqueInput
  }


  /**
   * UserDeviceInterest base type for findFirst actions
   */
  export type UserDeviceInterestFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserDeviceInterest to fetch.
     */
    where?: UserDeviceInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDeviceInterests to fetch.
     */
    orderBy?: Enumerable<UserDeviceInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDeviceInterests.
     */
    cursor?: UserDeviceInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDeviceInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDeviceInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDeviceInterests.
     */
    distinct?: Enumerable<UserDeviceInterestScalarFieldEnum>
  }

  /**
   * UserDeviceInterest findFirst
   */
  export interface UserDeviceInterestFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserDeviceInterestFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserDeviceInterest findFirstOrThrow
   */
  export type UserDeviceInterestFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserDeviceInterest to fetch.
     */
    where?: UserDeviceInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDeviceInterests to fetch.
     */
    orderBy?: Enumerable<UserDeviceInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDeviceInterests.
     */
    cursor?: UserDeviceInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDeviceInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDeviceInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDeviceInterests.
     */
    distinct?: Enumerable<UserDeviceInterestScalarFieldEnum>
  }


  /**
   * UserDeviceInterest findMany
   */
  export type UserDeviceInterestFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * Filter, which UserDeviceInterests to fetch.
     */
    where?: UserDeviceInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDeviceInterests to fetch.
     */
    orderBy?: Enumerable<UserDeviceInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDeviceInterests.
     */
    cursor?: UserDeviceInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDeviceInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDeviceInterests.
     */
    skip?: number
    distinct?: Enumerable<UserDeviceInterestScalarFieldEnum>
  }


  /**
   * UserDeviceInterest create
   */
  export type UserDeviceInterestCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDeviceInterest.
     */
    data: XOR<UserDeviceInterestCreateInput, UserDeviceInterestUncheckedCreateInput>
  }


  /**
   * UserDeviceInterest createMany
   */
  export type UserDeviceInterestCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDeviceInterests.
     */
    data: Enumerable<UserDeviceInterestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserDeviceInterest update
   */
  export type UserDeviceInterestUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDeviceInterest.
     */
    data: XOR<UserDeviceInterestUpdateInput, UserDeviceInterestUncheckedUpdateInput>
    /**
     * Choose, which UserDeviceInterest to update.
     */
    where: UserDeviceInterestWhereUniqueInput
  }


  /**
   * UserDeviceInterest updateMany
   */
  export type UserDeviceInterestUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDeviceInterests.
     */
    data: XOR<UserDeviceInterestUpdateManyMutationInput, UserDeviceInterestUncheckedUpdateManyInput>
    /**
     * Filter which UserDeviceInterests to update
     */
    where?: UserDeviceInterestWhereInput
  }


  /**
   * UserDeviceInterest upsert
   */
  export type UserDeviceInterestUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDeviceInterest to update in case it exists.
     */
    where: UserDeviceInterestWhereUniqueInput
    /**
     * In case the UserDeviceInterest found by the `where` argument doesn't exist, create a new UserDeviceInterest with this data.
     */
    create: XOR<UserDeviceInterestCreateInput, UserDeviceInterestUncheckedCreateInput>
    /**
     * In case the UserDeviceInterest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDeviceInterestUpdateInput, UserDeviceInterestUncheckedUpdateInput>
  }


  /**
   * UserDeviceInterest delete
   */
  export type UserDeviceInterestDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
    /**
     * Filter which UserDeviceInterest to delete.
     */
    where: UserDeviceInterestWhereUniqueInput
  }


  /**
   * UserDeviceInterest deleteMany
   */
  export type UserDeviceInterestDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDeviceInterests to delete
     */
    where?: UserDeviceInterestWhereInput
  }


  /**
   * UserDeviceInterest without action
   */
  export type UserDeviceInterestArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDeviceInterest
     */
    select?: UserDeviceInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserDeviceInterestInclude<ExtArgs> | null
  }



  /**
   * Model PushToken
   */


  export type AggregatePushToken = {
    _count: PushTokenCountAggregateOutputType | null
    _min: PushTokenMinAggregateOutputType | null
    _max: PushTokenMaxAggregateOutputType | null
  }

  export type PushTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PushTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PushTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PushTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PushTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PushTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PushTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushToken to aggregate.
     */
    where?: PushTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushTokens to fetch.
     */
    orderBy?: Enumerable<PushTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PushTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PushTokens
    **/
    _count?: true | PushTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PushTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PushTokenMaxAggregateInputType
  }

  export type GetPushTokenAggregateType<T extends PushTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePushToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePushToken[P]>
      : GetScalarType<T[P], AggregatePushToken[P]>
  }




  export type PushTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PushTokenWhereInput
    orderBy?: Enumerable<PushTokenOrderByWithAggregationInput>
    by: PushTokenScalarFieldEnum[]
    having?: PushTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PushTokenCountAggregateInputType | true
    _min?: PushTokenMinAggregateInputType
    _max?: PushTokenMaxAggregateInputType
  }


  export type PushTokenGroupByOutputType = {
    id: string
    userId: string
    token: string
    createdAt: Date
    updatedAt: Date
    _count: PushTokenCountAggregateOutputType | null
    _min: PushTokenMinAggregateOutputType | null
    _max: PushTokenMaxAggregateOutputType | null
  }

  type GetPushTokenGroupByPayload<T extends PushTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PushTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PushTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PushTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PushTokenGroupByOutputType[P]>
        }
      >
    >


  export type PushTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["pushToken"]>

  export type PushTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PushTokenInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type PushTokenGetPayload<S extends boolean | null | undefined | PushTokenArgs> = $Types.GetResult<PushTokenPayload, S>

  type PushTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PushTokenFindManyArgs, 'select' | 'include'> & {
      select?: PushTokenCountAggregateInputType | true
    }

  export interface PushTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PushToken'], meta: { name: 'PushToken' } }
    /**
     * Find zero or one PushToken that matches the filter.
     * @param {PushTokenFindUniqueArgs} args - Arguments to find a PushToken
     * @example
     * // Get one PushToken
     * const pushToken = await prisma.pushToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PushTokenFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PushTokenFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PushToken'> extends True ? Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PushToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PushTokenFindUniqueOrThrowArgs} args - Arguments to find a PushToken
     * @example
     * // Get one PushToken
     * const pushToken = await prisma.pushToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PushTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PushTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PushToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushTokenFindFirstArgs} args - Arguments to find a PushToken
     * @example
     * // Get one PushToken
     * const pushToken = await prisma.pushToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PushTokenFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PushTokenFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PushToken'> extends True ? Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PushToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushTokenFindFirstOrThrowArgs} args - Arguments to find a PushToken
     * @example
     * // Get one PushToken
     * const pushToken = await prisma.pushToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PushTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PushTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PushTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PushTokens
     * const pushTokens = await prisma.pushToken.findMany()
     * 
     * // Get first 10 PushTokens
     * const pushTokens = await prisma.pushToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pushTokenWithIdOnly = await prisma.pushToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PushTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PushTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PushToken.
     * @param {PushTokenCreateArgs} args - Arguments to create a PushToken.
     * @example
     * // Create one PushToken
     * const PushToken = await prisma.pushToken.create({
     *   data: {
     *     // ... data to create a PushToken
     *   }
     * })
     * 
    **/
    create<T extends PushTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PushTokenCreateArgs<ExtArgs>>
    ): Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PushTokens.
     *     @param {PushTokenCreateManyArgs} args - Arguments to create many PushTokens.
     *     @example
     *     // Create many PushTokens
     *     const pushToken = await prisma.pushToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PushTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PushTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PushToken.
     * @param {PushTokenDeleteArgs} args - Arguments to delete one PushToken.
     * @example
     * // Delete one PushToken
     * const PushToken = await prisma.pushToken.delete({
     *   where: {
     *     // ... filter to delete one PushToken
     *   }
     * })
     * 
    **/
    delete<T extends PushTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PushTokenDeleteArgs<ExtArgs>>
    ): Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PushToken.
     * @param {PushTokenUpdateArgs} args - Arguments to update one PushToken.
     * @example
     * // Update one PushToken
     * const pushToken = await prisma.pushToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PushTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PushTokenUpdateArgs<ExtArgs>>
    ): Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PushTokens.
     * @param {PushTokenDeleteManyArgs} args - Arguments to filter PushTokens to delete.
     * @example
     * // Delete a few PushTokens
     * const { count } = await prisma.pushToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PushTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PushTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PushTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PushTokens
     * const pushToken = await prisma.pushToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PushTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PushTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PushToken.
     * @param {PushTokenUpsertArgs} args - Arguments to update or create a PushToken.
     * @example
     * // Update or create a PushToken
     * const pushToken = await prisma.pushToken.upsert({
     *   create: {
     *     // ... data to create a PushToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PushToken we want to update
     *   }
     * })
    **/
    upsert<T extends PushTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PushTokenUpsertArgs<ExtArgs>>
    ): Prisma__PushTokenClient<$Types.GetResult<PushTokenPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PushTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushTokenCountArgs} args - Arguments to filter PushTokens to count.
     * @example
     * // Count the number of PushTokens
     * const count = await prisma.pushToken.count({
     *   where: {
     *     // ... the filter for the PushTokens we want to count
     *   }
     * })
    **/
    count<T extends PushTokenCountArgs>(
      args?: Subset<T, PushTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PushTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PushToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PushTokenAggregateArgs>(args: Subset<T, PushTokenAggregateArgs>): Prisma.PrismaPromise<GetPushTokenAggregateType<T>>

    /**
     * Group by PushToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PushTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PushTokenGroupByArgs['orderBy'] }
        : { orderBy?: PushTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PushTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPushTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PushToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PushTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PushToken base type for findUnique actions
   */
  export type PushTokenFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * Filter, which PushToken to fetch.
     */
    where: PushTokenWhereUniqueInput
  }

  /**
   * PushToken findUnique
   */
  export interface PushTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PushTokenFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PushToken findUniqueOrThrow
   */
  export type PushTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * Filter, which PushToken to fetch.
     */
    where: PushTokenWhereUniqueInput
  }


  /**
   * PushToken base type for findFirst actions
   */
  export type PushTokenFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * Filter, which PushToken to fetch.
     */
    where?: PushTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushTokens to fetch.
     */
    orderBy?: Enumerable<PushTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushTokens.
     */
    cursor?: PushTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushTokens.
     */
    distinct?: Enumerable<PushTokenScalarFieldEnum>
  }

  /**
   * PushToken findFirst
   */
  export interface PushTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PushTokenFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PushToken findFirstOrThrow
   */
  export type PushTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * Filter, which PushToken to fetch.
     */
    where?: PushTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushTokens to fetch.
     */
    orderBy?: Enumerable<PushTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushTokens.
     */
    cursor?: PushTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushTokens.
     */
    distinct?: Enumerable<PushTokenScalarFieldEnum>
  }


  /**
   * PushToken findMany
   */
  export type PushTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * Filter, which PushTokens to fetch.
     */
    where?: PushTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushTokens to fetch.
     */
    orderBy?: Enumerable<PushTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PushTokens.
     */
    cursor?: PushTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushTokens.
     */
    skip?: number
    distinct?: Enumerable<PushTokenScalarFieldEnum>
  }


  /**
   * PushToken create
   */
  export type PushTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a PushToken.
     */
    data: XOR<PushTokenCreateInput, PushTokenUncheckedCreateInput>
  }


  /**
   * PushToken createMany
   */
  export type PushTokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PushTokens.
     */
    data: Enumerable<PushTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PushToken update
   */
  export type PushTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a PushToken.
     */
    data: XOR<PushTokenUpdateInput, PushTokenUncheckedUpdateInput>
    /**
     * Choose, which PushToken to update.
     */
    where: PushTokenWhereUniqueInput
  }


  /**
   * PushToken updateMany
   */
  export type PushTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PushTokens.
     */
    data: XOR<PushTokenUpdateManyMutationInput, PushTokenUncheckedUpdateManyInput>
    /**
     * Filter which PushTokens to update
     */
    where?: PushTokenWhereInput
  }


  /**
   * PushToken upsert
   */
  export type PushTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the PushToken to update in case it exists.
     */
    where: PushTokenWhereUniqueInput
    /**
     * In case the PushToken found by the `where` argument doesn't exist, create a new PushToken with this data.
     */
    create: XOR<PushTokenCreateInput, PushTokenUncheckedCreateInput>
    /**
     * In case the PushToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PushTokenUpdateInput, PushTokenUncheckedUpdateInput>
  }


  /**
   * PushToken delete
   */
  export type PushTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
    /**
     * Filter which PushToken to delete.
     */
    where: PushTokenWhereUniqueInput
  }


  /**
   * PushToken deleteMany
   */
  export type PushTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushTokens to delete
     */
    where?: PushTokenWhereInput
  }


  /**
   * PushToken without action
   */
  export type PushTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushToken
     */
    select?: PushTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PushTokenInclude<ExtArgs> | null
  }



  /**
   * Model UserCar
   */


  export type AggregateUserCar = {
    _count: UserCarCountAggregateOutputType | null
    _min: UserCarMinAggregateOutputType | null
    _max: UserCarMaxAggregateOutputType | null
  }

  export type UserCarMinAggregateOutputType = {
    id: string | null
    userId: string | null
    carModelId: string | null
    registerNumber: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCarMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    carModelId: string | null
    registerNumber: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCarCountAggregateOutputType = {
    id: number
    userId: number
    carModelId: number
    registerNumber: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserCarMinAggregateInputType = {
    id?: true
    userId?: true
    carModelId?: true
    registerNumber?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCarMaxAggregateInputType = {
    id?: true
    userId?: true
    carModelId?: true
    registerNumber?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCarCountAggregateInputType = {
    id?: true
    userId?: true
    carModelId?: true
    registerNumber?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserCarAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCar to aggregate.
     */
    where?: UserCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCars to fetch.
     */
    orderBy?: Enumerable<UserCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCars
    **/
    _count?: true | UserCarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCarMaxAggregateInputType
  }

  export type GetUserCarAggregateType<T extends UserCarAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCar[P]>
      : GetScalarType<T[P], AggregateUserCar[P]>
  }




  export type UserCarGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserCarWhereInput
    orderBy?: Enumerable<UserCarOrderByWithAggregationInput>
    by: UserCarScalarFieldEnum[]
    having?: UserCarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCarCountAggregateInputType | true
    _min?: UserCarMinAggregateInputType
    _max?: UserCarMaxAggregateInputType
  }


  export type UserCarGroupByOutputType = {
    id: string
    userId: string
    carModelId: string
    registerNumber: string
    color: string
    createdAt: Date
    updatedAt: Date
    _count: UserCarCountAggregateOutputType | null
    _min: UserCarMinAggregateOutputType | null
    _max: UserCarMaxAggregateOutputType | null
  }

  type GetUserCarGroupByPayload<T extends UserCarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserCarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCarGroupByOutputType[P]>
            : GetScalarType<T[P], UserCarGroupByOutputType[P]>
        }
      >
    >


  export type UserCarSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    carModelId?: boolean
    registerNumber?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
    carModel?: boolean | CarModelArgs<ExtArgs>
  }, ExtArgs["result"]["userCar"]>

  export type UserCarSelectScalar = {
    id?: boolean
    userId?: boolean
    carModelId?: boolean
    registerNumber?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserCarInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    carModel?: boolean | CarModelArgs<ExtArgs>
  }


  type UserCarGetPayload<S extends boolean | null | undefined | UserCarArgs> = $Types.GetResult<UserCarPayload, S>

  type UserCarCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserCarFindManyArgs, 'select' | 'include'> & {
      select?: UserCarCountAggregateInputType | true
    }

  export interface UserCarDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCar'], meta: { name: 'UserCar' } }
    /**
     * Find zero or one UserCar that matches the filter.
     * @param {UserCarFindUniqueArgs} args - Arguments to find a UserCar
     * @example
     * // Get one UserCar
     * const userCar = await prisma.userCar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserCarFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserCarFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserCar'> extends True ? Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UserCar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserCarFindUniqueOrThrowArgs} args - Arguments to find a UserCar
     * @example
     * // Get one UserCar
     * const userCar = await prisma.userCar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserCarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UserCar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCarFindFirstArgs} args - Arguments to find a UserCar
     * @example
     * // Get one UserCar
     * const userCar = await prisma.userCar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserCarFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserCarFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserCar'> extends True ? Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UserCar that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCarFindFirstOrThrowArgs} args - Arguments to find a UserCar
     * @example
     * // Get one UserCar
     * const userCar = await prisma.userCar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserCarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UserCars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCars
     * const userCars = await prisma.userCar.findMany()
     * 
     * // Get first 10 UserCars
     * const userCars = await prisma.userCar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCarWithIdOnly = await prisma.userCar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserCarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UserCar.
     * @param {UserCarCreateArgs} args - Arguments to create a UserCar.
     * @example
     * // Create one UserCar
     * const UserCar = await prisma.userCar.create({
     *   data: {
     *     // ... data to create a UserCar
     *   }
     * })
     * 
    **/
    create<T extends UserCarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCarCreateArgs<ExtArgs>>
    ): Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UserCars.
     *     @param {UserCarCreateManyArgs} args - Arguments to create many UserCars.
     *     @example
     *     // Create many UserCars
     *     const userCar = await prisma.userCar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCarCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCarCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserCar.
     * @param {UserCarDeleteArgs} args - Arguments to delete one UserCar.
     * @example
     * // Delete one UserCar
     * const UserCar = await prisma.userCar.delete({
     *   where: {
     *     // ... filter to delete one UserCar
     *   }
     * })
     * 
    **/
    delete<T extends UserCarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserCarDeleteArgs<ExtArgs>>
    ): Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UserCar.
     * @param {UserCarUpdateArgs} args - Arguments to update one UserCar.
     * @example
     * // Update one UserCar
     * const userCar = await prisma.userCar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserCarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCarUpdateArgs<ExtArgs>>
    ): Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UserCars.
     * @param {UserCarDeleteManyArgs} args - Arguments to filter UserCars to delete.
     * @example
     * // Delete a few UserCars
     * const { count } = await prisma.userCar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserCarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCars
     * const userCar = await prisma.userCar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserCarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserCarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCar.
     * @param {UserCarUpsertArgs} args - Arguments to update or create a UserCar.
     * @example
     * // Update or create a UserCar
     * const userCar = await prisma.userCar.upsert({
     *   create: {
     *     // ... data to create a UserCar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCar we want to update
     *   }
     * })
    **/
    upsert<T extends UserCarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserCarUpsertArgs<ExtArgs>>
    ): Prisma__UserCarClient<$Types.GetResult<UserCarPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UserCars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCarCountArgs} args - Arguments to filter UserCars to count.
     * @example
     * // Count the number of UserCars
     * const count = await prisma.userCar.count({
     *   where: {
     *     // ... the filter for the UserCars we want to count
     *   }
     * })
    **/
    count<T extends UserCarCountArgs>(
      args?: Subset<T, UserCarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCarAggregateArgs>(args: Subset<T, UserCarAggregateArgs>): Prisma.PrismaPromise<GetUserCarAggregateType<T>>

    /**
     * Group by UserCar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCarGroupByArgs['orderBy'] }
        : { orderBy?: UserCarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserCarClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    carModel<T extends CarModelArgs<ExtArgs> = {}>(args?: Subset<T, CarModelArgs<ExtArgs>>): Prisma__CarModelClient<$Types.GetResult<CarModelPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserCar base type for findUnique actions
   */
  export type UserCarFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * Filter, which UserCar to fetch.
     */
    where: UserCarWhereUniqueInput
  }

  /**
   * UserCar findUnique
   */
  export interface UserCarFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserCarFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserCar findUniqueOrThrow
   */
  export type UserCarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * Filter, which UserCar to fetch.
     */
    where: UserCarWhereUniqueInput
  }


  /**
   * UserCar base type for findFirst actions
   */
  export type UserCarFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * Filter, which UserCar to fetch.
     */
    where?: UserCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCars to fetch.
     */
    orderBy?: Enumerable<UserCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCars.
     */
    cursor?: UserCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCars.
     */
    distinct?: Enumerable<UserCarScalarFieldEnum>
  }

  /**
   * UserCar findFirst
   */
  export interface UserCarFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserCarFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserCar findFirstOrThrow
   */
  export type UserCarFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * Filter, which UserCar to fetch.
     */
    where?: UserCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCars to fetch.
     */
    orderBy?: Enumerable<UserCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCars.
     */
    cursor?: UserCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCars.
     */
    distinct?: Enumerable<UserCarScalarFieldEnum>
  }


  /**
   * UserCar findMany
   */
  export type UserCarFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * Filter, which UserCars to fetch.
     */
    where?: UserCarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCars to fetch.
     */
    orderBy?: Enumerable<UserCarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCars.
     */
    cursor?: UserCarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCars.
     */
    skip?: number
    distinct?: Enumerable<UserCarScalarFieldEnum>
  }


  /**
   * UserCar create
   */
  export type UserCarCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCar.
     */
    data: XOR<UserCarCreateInput, UserCarUncheckedCreateInput>
  }


  /**
   * UserCar createMany
   */
  export type UserCarCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCars.
     */
    data: Enumerable<UserCarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserCar update
   */
  export type UserCarUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCar.
     */
    data: XOR<UserCarUpdateInput, UserCarUncheckedUpdateInput>
    /**
     * Choose, which UserCar to update.
     */
    where: UserCarWhereUniqueInput
  }


  /**
   * UserCar updateMany
   */
  export type UserCarUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCars.
     */
    data: XOR<UserCarUpdateManyMutationInput, UserCarUncheckedUpdateManyInput>
    /**
     * Filter which UserCars to update
     */
    where?: UserCarWhereInput
  }


  /**
   * UserCar upsert
   */
  export type UserCarUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCar to update in case it exists.
     */
    where: UserCarWhereUniqueInput
    /**
     * In case the UserCar found by the `where` argument doesn't exist, create a new UserCar with this data.
     */
    create: XOR<UserCarCreateInput, UserCarUncheckedCreateInput>
    /**
     * In case the UserCar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCarUpdateInput, UserCarUncheckedUpdateInput>
  }


  /**
   * UserCar delete
   */
  export type UserCarDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
    /**
     * Filter which UserCar to delete.
     */
    where: UserCarWhereUniqueInput
  }


  /**
   * UserCar deleteMany
   */
  export type UserCarDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCars to delete
     */
    where?: UserCarWhereInput
  }


  /**
   * UserCar without action
   */
  export type UserCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCar
     */
    select?: UserCarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserCarInclude<ExtArgs> | null
  }



  /**
   * Model CarCenter
   */


  export type AggregateCarCenter = {
    _count: CarCenterCountAggregateOutputType | null
    _avg: CarCenterAvgAggregateOutputType | null
    _sum: CarCenterSumAggregateOutputType | null
    _min: CarCenterMinAggregateOutputType | null
    _max: CarCenterMaxAggregateOutputType | null
  }

  export type CarCenterAvgAggregateOutputType = {
    longitude: number | null
    latitude: number | null
  }

  export type CarCenterSumAggregateOutputType = {
    longitude: number | null
    latitude: number | null
  }

  export type CarCenterMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    slug: string | null
    reference: string | null
    longitude: number | null
    latitude: number | null
    address: string | null
    telephone: string | null
    email: string | null
  }

  export type CarCenterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    slug: string | null
    reference: string | null
    longitude: number | null
    latitude: number | null
    address: string | null
    telephone: string | null
    email: string | null
  }

  export type CarCenterCountAggregateOutputType = {
    id: number
    name: number
    image: number
    createdAt: number
    updatedAt: number
    slug: number
    reference: number
    longitude: number
    latitude: number
    address: number
    telephone: number
    email: number
    _all: number
  }


  export type CarCenterAvgAggregateInputType = {
    longitude?: true
    latitude?: true
  }

  export type CarCenterSumAggregateInputType = {
    longitude?: true
    latitude?: true
  }

  export type CarCenterMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    slug?: true
    reference?: true
    longitude?: true
    latitude?: true
    address?: true
    telephone?: true
    email?: true
  }

  export type CarCenterMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    slug?: true
    reference?: true
    longitude?: true
    latitude?: true
    address?: true
    telephone?: true
    email?: true
  }

  export type CarCenterCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    slug?: true
    reference?: true
    longitude?: true
    latitude?: true
    address?: true
    telephone?: true
    email?: true
    _all?: true
  }

  export type CarCenterAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarCenter to aggregate.
     */
    where?: CarCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenters to fetch.
     */
    orderBy?: Enumerable<CarCenterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarCenters
    **/
    _count?: true | CarCenterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarCenterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarCenterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarCenterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarCenterMaxAggregateInputType
  }

  export type GetCarCenterAggregateType<T extends CarCenterAggregateArgs> = {
        [P in keyof T & keyof AggregateCarCenter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarCenter[P]>
      : GetScalarType<T[P], AggregateCarCenter[P]>
  }




  export type CarCenterGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarCenterWhereInput
    orderBy?: Enumerable<CarCenterOrderByWithAggregationInput>
    by: CarCenterScalarFieldEnum[]
    having?: CarCenterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarCenterCountAggregateInputType | true
    _avg?: CarCenterAvgAggregateInputType
    _sum?: CarCenterSumAggregateInputType
    _min?: CarCenterMinAggregateInputType
    _max?: CarCenterMaxAggregateInputType
  }


  export type CarCenterGroupByOutputType = {
    id: string
    name: string
    image: string
    createdAt: Date
    updatedAt: Date
    slug: string | null
    reference: string | null
    longitude: number
    latitude: number
    address: string | null
    telephone: string | null
    email: string | null
    _count: CarCenterCountAggregateOutputType | null
    _avg: CarCenterAvgAggregateOutputType | null
    _sum: CarCenterSumAggregateOutputType | null
    _min: CarCenterMinAggregateOutputType | null
    _max: CarCenterMaxAggregateOutputType | null
  }

  type GetCarCenterGroupByPayload<T extends CarCenterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarCenterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarCenterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarCenterGroupByOutputType[P]>
            : GetScalarType<T[P], CarCenterGroupByOutputType[P]>
        }
      >
    >


  export type CarCenterSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    slug?: boolean
    reference?: boolean
    longitude?: boolean
    latitude?: boolean
    address?: boolean
    telephone?: boolean
    email?: boolean
    services?: boolean | CarCenter$servicesArgs<ExtArgs>
    _count?: boolean | CarCenterCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["carCenter"]>

  export type CarCenterSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    slug?: boolean
    reference?: boolean
    longitude?: boolean
    latitude?: boolean
    address?: boolean
    telephone?: boolean
    email?: boolean
  }

  export type CarCenterInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    services?: boolean | CarCenter$servicesArgs<ExtArgs>
    _count?: boolean | CarCenterCountOutputTypeArgs<ExtArgs>
  }


  type CarCenterGetPayload<S extends boolean | null | undefined | CarCenterArgs> = $Types.GetResult<CarCenterPayload, S>

  type CarCenterCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CarCenterFindManyArgs, 'select' | 'include'> & {
      select?: CarCenterCountAggregateInputType | true
    }

  export interface CarCenterDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarCenter'], meta: { name: 'CarCenter' } }
    /**
     * Find zero or one CarCenter that matches the filter.
     * @param {CarCenterFindUniqueArgs} args - Arguments to find a CarCenter
     * @example
     * // Get one CarCenter
     * const carCenter = await prisma.carCenter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarCenterFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarCenterFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CarCenter'> extends True ? Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CarCenter that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarCenterFindUniqueOrThrowArgs} args - Arguments to find a CarCenter
     * @example
     * // Get one CarCenter
     * const carCenter = await prisma.carCenter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarCenterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CarCenter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterFindFirstArgs} args - Arguments to find a CarCenter
     * @example
     * // Get one CarCenter
     * const carCenter = await prisma.carCenter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarCenterFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarCenterFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CarCenter'> extends True ? Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CarCenter that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterFindFirstOrThrowArgs} args - Arguments to find a CarCenter
     * @example
     * // Get one CarCenter
     * const carCenter = await prisma.carCenter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarCenterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CarCenters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarCenters
     * const carCenters = await prisma.carCenter.findMany()
     * 
     * // Get first 10 CarCenters
     * const carCenters = await prisma.carCenter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carCenterWithIdOnly = await prisma.carCenter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarCenterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CarCenter.
     * @param {CarCenterCreateArgs} args - Arguments to create a CarCenter.
     * @example
     * // Create one CarCenter
     * const CarCenter = await prisma.carCenter.create({
     *   data: {
     *     // ... data to create a CarCenter
     *   }
     * })
     * 
    **/
    create<T extends CarCenterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterCreateArgs<ExtArgs>>
    ): Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CarCenters.
     *     @param {CarCenterCreateManyArgs} args - Arguments to create many CarCenters.
     *     @example
     *     // Create many CarCenters
     *     const carCenter = await prisma.carCenter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarCenterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarCenter.
     * @param {CarCenterDeleteArgs} args - Arguments to delete one CarCenter.
     * @example
     * // Delete one CarCenter
     * const CarCenter = await prisma.carCenter.delete({
     *   where: {
     *     // ... filter to delete one CarCenter
     *   }
     * })
     * 
    **/
    delete<T extends CarCenterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterDeleteArgs<ExtArgs>>
    ): Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CarCenter.
     * @param {CarCenterUpdateArgs} args - Arguments to update one CarCenter.
     * @example
     * // Update one CarCenter
     * const carCenter = await prisma.carCenter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarCenterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterUpdateArgs<ExtArgs>>
    ): Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CarCenters.
     * @param {CarCenterDeleteManyArgs} args - Arguments to filter CarCenters to delete.
     * @example
     * // Delete a few CarCenters
     * const { count } = await prisma.carCenter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarCenterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarCenters
     * const carCenter = await prisma.carCenter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarCenterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarCenter.
     * @param {CarCenterUpsertArgs} args - Arguments to update or create a CarCenter.
     * @example
     * // Update or create a CarCenter
     * const carCenter = await prisma.carCenter.upsert({
     *   create: {
     *     // ... data to create a CarCenter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarCenter we want to update
     *   }
     * })
    **/
    upsert<T extends CarCenterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterUpsertArgs<ExtArgs>>
    ): Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CarCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterCountArgs} args - Arguments to filter CarCenters to count.
     * @example
     * // Count the number of CarCenters
     * const count = await prisma.carCenter.count({
     *   where: {
     *     // ... the filter for the CarCenters we want to count
     *   }
     * })
    **/
    count<T extends CarCenterCountArgs>(
      args?: Subset<T, CarCenterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarCenterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarCenterAggregateArgs>(args: Subset<T, CarCenterAggregateArgs>): Prisma.PrismaPromise<GetCarCenterAggregateType<T>>

    /**
     * Group by CarCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarCenterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarCenterGroupByArgs['orderBy'] }
        : { orderBy?: CarCenterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarCenterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarCenterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CarCenter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarCenterClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    services<T extends CarCenter$servicesArgs<ExtArgs> = {}>(args?: Subset<T, CarCenter$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CarCenter base type for findUnique actions
   */
  export type CarCenterFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * Filter, which CarCenter to fetch.
     */
    where: CarCenterWhereUniqueInput
  }

  /**
   * CarCenter findUnique
   */
  export interface CarCenterFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarCenterFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarCenter findUniqueOrThrow
   */
  export type CarCenterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * Filter, which CarCenter to fetch.
     */
    where: CarCenterWhereUniqueInput
  }


  /**
   * CarCenter base type for findFirst actions
   */
  export type CarCenterFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * Filter, which CarCenter to fetch.
     */
    where?: CarCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenters to fetch.
     */
    orderBy?: Enumerable<CarCenterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarCenters.
     */
    cursor?: CarCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarCenters.
     */
    distinct?: Enumerable<CarCenterScalarFieldEnum>
  }

  /**
   * CarCenter findFirst
   */
  export interface CarCenterFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarCenterFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarCenter findFirstOrThrow
   */
  export type CarCenterFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * Filter, which CarCenter to fetch.
     */
    where?: CarCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenters to fetch.
     */
    orderBy?: Enumerable<CarCenterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarCenters.
     */
    cursor?: CarCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarCenters.
     */
    distinct?: Enumerable<CarCenterScalarFieldEnum>
  }


  /**
   * CarCenter findMany
   */
  export type CarCenterFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * Filter, which CarCenters to fetch.
     */
    where?: CarCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenters to fetch.
     */
    orderBy?: Enumerable<CarCenterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarCenters.
     */
    cursor?: CarCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenters.
     */
    skip?: number
    distinct?: Enumerable<CarCenterScalarFieldEnum>
  }


  /**
   * CarCenter create
   */
  export type CarCenterCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * The data needed to create a CarCenter.
     */
    data: XOR<CarCenterCreateInput, CarCenterUncheckedCreateInput>
  }


  /**
   * CarCenter createMany
   */
  export type CarCenterCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarCenters.
     */
    data: Enumerable<CarCenterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CarCenter update
   */
  export type CarCenterUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * The data needed to update a CarCenter.
     */
    data: XOR<CarCenterUpdateInput, CarCenterUncheckedUpdateInput>
    /**
     * Choose, which CarCenter to update.
     */
    where: CarCenterWhereUniqueInput
  }


  /**
   * CarCenter updateMany
   */
  export type CarCenterUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarCenters.
     */
    data: XOR<CarCenterUpdateManyMutationInput, CarCenterUncheckedUpdateManyInput>
    /**
     * Filter which CarCenters to update
     */
    where?: CarCenterWhereInput
  }


  /**
   * CarCenter upsert
   */
  export type CarCenterUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * The filter to search for the CarCenter to update in case it exists.
     */
    where: CarCenterWhereUniqueInput
    /**
     * In case the CarCenter found by the `where` argument doesn't exist, create a new CarCenter with this data.
     */
    create: XOR<CarCenterCreateInput, CarCenterUncheckedCreateInput>
    /**
     * In case the CarCenter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarCenterUpdateInput, CarCenterUncheckedUpdateInput>
  }


  /**
   * CarCenter delete
   */
  export type CarCenterDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
    /**
     * Filter which CarCenter to delete.
     */
    where: CarCenterWhereUniqueInput
  }


  /**
   * CarCenter deleteMany
   */
  export type CarCenterDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarCenters to delete
     */
    where?: CarCenterWhereInput
  }


  /**
   * CarCenter.services
   */
  export type CarCenter$servicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    where?: CarCenterServiceWhereInput
    orderBy?: Enumerable<CarCenterServiceOrderByWithRelationInput>
    cursor?: CarCenterServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarCenterServiceScalarFieldEnum>
  }


  /**
   * CarCenter without action
   */
  export type CarCenterArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenter
     */
    select?: CarCenterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterInclude<ExtArgs> | null
  }



  /**
   * Model CarService
   */


  export type AggregateCarService = {
    _count: CarServiceCountAggregateOutputType | null
    _min: CarServiceMinAggregateOutputType | null
    _max: CarServiceMaxAggregateOutputType | null
  }

  export type CarServiceMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    image: string | null
    updatedAt: Date | null
  }

  export type CarServiceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    image: string | null
    updatedAt: Date | null
  }

  export type CarServiceCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    image: number
    updatedAt: number
    _all: number
  }


  export type CarServiceMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    image?: true
    updatedAt?: true
  }

  export type CarServiceMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    image?: true
    updatedAt?: true
  }

  export type CarServiceCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    image?: true
    updatedAt?: true
    _all?: true
  }

  export type CarServiceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarService to aggregate.
     */
    where?: CarServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarServices to fetch.
     */
    orderBy?: Enumerable<CarServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarServices
    **/
    _count?: true | CarServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarServiceMaxAggregateInputType
  }

  export type GetCarServiceAggregateType<T extends CarServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateCarService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarService[P]>
      : GetScalarType<T[P], AggregateCarService[P]>
  }




  export type CarServiceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarServiceWhereInput
    orderBy?: Enumerable<CarServiceOrderByWithAggregationInput>
    by: CarServiceScalarFieldEnum[]
    having?: CarServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarServiceCountAggregateInputType | true
    _min?: CarServiceMinAggregateInputType
    _max?: CarServiceMaxAggregateInputType
  }


  export type CarServiceGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    image: string | null
    updatedAt: Date
    _count: CarServiceCountAggregateOutputType | null
    _min: CarServiceMinAggregateOutputType | null
    _max: CarServiceMaxAggregateOutputType | null
  }

  type GetCarServiceGroupByPayload<T extends CarServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarServiceGroupByOutputType[P]>
            : GetScalarType<T[P], CarServiceGroupByOutputType[P]>
        }
      >
    >


  export type CarServiceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    image?: boolean
    updatedAt?: boolean
    centers?: boolean | CarService$centersArgs<ExtArgs>
    _count?: boolean | CarServiceCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["carService"]>

  export type CarServiceSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    image?: boolean
    updatedAt?: boolean
  }

  export type CarServiceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    centers?: boolean | CarService$centersArgs<ExtArgs>
    _count?: boolean | CarServiceCountOutputTypeArgs<ExtArgs>
  }


  type CarServiceGetPayload<S extends boolean | null | undefined | CarServiceArgs> = $Types.GetResult<CarServicePayload, S>

  type CarServiceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CarServiceFindManyArgs, 'select' | 'include'> & {
      select?: CarServiceCountAggregateInputType | true
    }

  export interface CarServiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarService'], meta: { name: 'CarService' } }
    /**
     * Find zero or one CarService that matches the filter.
     * @param {CarServiceFindUniqueArgs} args - Arguments to find a CarService
     * @example
     * // Get one CarService
     * const carService = await prisma.carService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarServiceFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarServiceFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CarService'> extends True ? Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CarService that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarServiceFindUniqueOrThrowArgs} args - Arguments to find a CarService
     * @example
     * // Get one CarService
     * const carService = await prisma.carService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarServiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarServiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CarService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarServiceFindFirstArgs} args - Arguments to find a CarService
     * @example
     * // Get one CarService
     * const carService = await prisma.carService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarServiceFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarServiceFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CarService'> extends True ? Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CarService that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarServiceFindFirstOrThrowArgs} args - Arguments to find a CarService
     * @example
     * // Get one CarService
     * const carService = await prisma.carService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarServiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarServiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CarServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarServices
     * const carServices = await prisma.carService.findMany()
     * 
     * // Get first 10 CarServices
     * const carServices = await prisma.carService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carServiceWithIdOnly = await prisma.carService.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarServiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarServiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CarService.
     * @param {CarServiceCreateArgs} args - Arguments to create a CarService.
     * @example
     * // Create one CarService
     * const CarService = await prisma.carService.create({
     *   data: {
     *     // ... data to create a CarService
     *   }
     * })
     * 
    **/
    create<T extends CarServiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarServiceCreateArgs<ExtArgs>>
    ): Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CarServices.
     *     @param {CarServiceCreateManyArgs} args - Arguments to create many CarServices.
     *     @example
     *     // Create many CarServices
     *     const carService = await prisma.carService.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarServiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarServiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarService.
     * @param {CarServiceDeleteArgs} args - Arguments to delete one CarService.
     * @example
     * // Delete one CarService
     * const CarService = await prisma.carService.delete({
     *   where: {
     *     // ... filter to delete one CarService
     *   }
     * })
     * 
    **/
    delete<T extends CarServiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarServiceDeleteArgs<ExtArgs>>
    ): Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CarService.
     * @param {CarServiceUpdateArgs} args - Arguments to update one CarService.
     * @example
     * // Update one CarService
     * const carService = await prisma.carService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarServiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarServiceUpdateArgs<ExtArgs>>
    ): Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CarServices.
     * @param {CarServiceDeleteManyArgs} args - Arguments to filter CarServices to delete.
     * @example
     * // Delete a few CarServices
     * const { count } = await prisma.carService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarServiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarServiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarServices
     * const carService = await prisma.carService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarServiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarServiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarService.
     * @param {CarServiceUpsertArgs} args - Arguments to update or create a CarService.
     * @example
     * // Update or create a CarService
     * const carService = await prisma.carService.upsert({
     *   create: {
     *     // ... data to create a CarService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarService we want to update
     *   }
     * })
    **/
    upsert<T extends CarServiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarServiceUpsertArgs<ExtArgs>>
    ): Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CarServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarServiceCountArgs} args - Arguments to filter CarServices to count.
     * @example
     * // Count the number of CarServices
     * const count = await prisma.carService.count({
     *   where: {
     *     // ... the filter for the CarServices we want to count
     *   }
     * })
    **/
    count<T extends CarServiceCountArgs>(
      args?: Subset<T, CarServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarServiceAggregateArgs>(args: Subset<T, CarServiceAggregateArgs>): Prisma.PrismaPromise<GetCarServiceAggregateType<T>>

    /**
     * Group by CarService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarServiceGroupByArgs['orderBy'] }
        : { orderBy?: CarServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CarService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarServiceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    centers<T extends CarService$centersArgs<ExtArgs> = {}>(args?: Subset<T, CarService$centersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CarService base type for findUnique actions
   */
  export type CarServiceFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarService to fetch.
     */
    where: CarServiceWhereUniqueInput
  }

  /**
   * CarService findUnique
   */
  export interface CarServiceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarServiceFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarService findUniqueOrThrow
   */
  export type CarServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarService to fetch.
     */
    where: CarServiceWhereUniqueInput
  }


  /**
   * CarService base type for findFirst actions
   */
  export type CarServiceFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarService to fetch.
     */
    where?: CarServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarServices to fetch.
     */
    orderBy?: Enumerable<CarServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarServices.
     */
    cursor?: CarServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarServices.
     */
    distinct?: Enumerable<CarServiceScalarFieldEnum>
  }

  /**
   * CarService findFirst
   */
  export interface CarServiceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarServiceFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarService findFirstOrThrow
   */
  export type CarServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarService to fetch.
     */
    where?: CarServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarServices to fetch.
     */
    orderBy?: Enumerable<CarServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarServices.
     */
    cursor?: CarServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarServices.
     */
    distinct?: Enumerable<CarServiceScalarFieldEnum>
  }


  /**
   * CarService findMany
   */
  export type CarServiceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarServices to fetch.
     */
    where?: CarServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarServices to fetch.
     */
    orderBy?: Enumerable<CarServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarServices.
     */
    cursor?: CarServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarServices.
     */
    skip?: number
    distinct?: Enumerable<CarServiceScalarFieldEnum>
  }


  /**
   * CarService create
   */
  export type CarServiceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a CarService.
     */
    data: XOR<CarServiceCreateInput, CarServiceUncheckedCreateInput>
  }


  /**
   * CarService createMany
   */
  export type CarServiceCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarServices.
     */
    data: Enumerable<CarServiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CarService update
   */
  export type CarServiceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a CarService.
     */
    data: XOR<CarServiceUpdateInput, CarServiceUncheckedUpdateInput>
    /**
     * Choose, which CarService to update.
     */
    where: CarServiceWhereUniqueInput
  }


  /**
   * CarService updateMany
   */
  export type CarServiceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarServices.
     */
    data: XOR<CarServiceUpdateManyMutationInput, CarServiceUncheckedUpdateManyInput>
    /**
     * Filter which CarServices to update
     */
    where?: CarServiceWhereInput
  }


  /**
   * CarService upsert
   */
  export type CarServiceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the CarService to update in case it exists.
     */
    where: CarServiceWhereUniqueInput
    /**
     * In case the CarService found by the `where` argument doesn't exist, create a new CarService with this data.
     */
    create: XOR<CarServiceCreateInput, CarServiceUncheckedCreateInput>
    /**
     * In case the CarService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarServiceUpdateInput, CarServiceUncheckedUpdateInput>
  }


  /**
   * CarService delete
   */
  export type CarServiceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
    /**
     * Filter which CarService to delete.
     */
    where: CarServiceWhereUniqueInput
  }


  /**
   * CarService deleteMany
   */
  export type CarServiceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarServices to delete
     */
    where?: CarServiceWhereInput
  }


  /**
   * CarService.centers
   */
  export type CarService$centersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    where?: CarCenterServiceWhereInput
    orderBy?: Enumerable<CarCenterServiceOrderByWithRelationInput>
    cursor?: CarCenterServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarCenterServiceScalarFieldEnum>
  }


  /**
   * CarService without action
   */
  export type CarServiceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarService
     */
    select?: CarServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarServiceInclude<ExtArgs> | null
  }



  /**
   * Model CarCenterService
   */


  export type AggregateCarCenterService = {
    _count: CarCenterServiceCountAggregateOutputType | null
    _avg: CarCenterServiceAvgAggregateOutputType | null
    _sum: CarCenterServiceSumAggregateOutputType | null
    _min: CarCenterServiceMinAggregateOutputType | null
    _max: CarCenterServiceMaxAggregateOutputType | null
  }

  export type CarCenterServiceAvgAggregateOutputType = {
    price: number | null
  }

  export type CarCenterServiceSumAggregateOutputType = {
    price: number | null
  }

  export type CarCenterServiceMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reference: string | null
    price: number | null
    description: string | null
    carCenterId: string | null
    carServiceId: string | null
  }

  export type CarCenterServiceMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reference: string | null
    price: number | null
    description: string | null
    carCenterId: string | null
    carServiceId: string | null
  }

  export type CarCenterServiceCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    reference: number
    price: number
    description: number
    carCenterId: number
    carServiceId: number
    _all: number
  }


  export type CarCenterServiceAvgAggregateInputType = {
    price?: true
  }

  export type CarCenterServiceSumAggregateInputType = {
    price?: true
  }

  export type CarCenterServiceMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    reference?: true
    price?: true
    description?: true
    carCenterId?: true
    carServiceId?: true
  }

  export type CarCenterServiceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    reference?: true
    price?: true
    description?: true
    carCenterId?: true
    carServiceId?: true
  }

  export type CarCenterServiceCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    reference?: true
    price?: true
    description?: true
    carCenterId?: true
    carServiceId?: true
    _all?: true
  }

  export type CarCenterServiceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarCenterService to aggregate.
     */
    where?: CarCenterServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenterServices to fetch.
     */
    orderBy?: Enumerable<CarCenterServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarCenterServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenterServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenterServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarCenterServices
    **/
    _count?: true | CarCenterServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarCenterServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarCenterServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarCenterServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarCenterServiceMaxAggregateInputType
  }

  export type GetCarCenterServiceAggregateType<T extends CarCenterServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateCarCenterService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarCenterService[P]>
      : GetScalarType<T[P], AggregateCarCenterService[P]>
  }




  export type CarCenterServiceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarCenterServiceWhereInput
    orderBy?: Enumerable<CarCenterServiceOrderByWithAggregationInput>
    by: CarCenterServiceScalarFieldEnum[]
    having?: CarCenterServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarCenterServiceCountAggregateInputType | true
    _avg?: CarCenterServiceAvgAggregateInputType
    _sum?: CarCenterServiceSumAggregateInputType
    _min?: CarCenterServiceMinAggregateInputType
    _max?: CarCenterServiceMaxAggregateInputType
  }


  export type CarCenterServiceGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    reference: string | null
    price: number
    description: string | null
    carCenterId: string
    carServiceId: string
    _count: CarCenterServiceCountAggregateOutputType | null
    _avg: CarCenterServiceAvgAggregateOutputType | null
    _sum: CarCenterServiceSumAggregateOutputType | null
    _min: CarCenterServiceMinAggregateOutputType | null
    _max: CarCenterServiceMaxAggregateOutputType | null
  }

  type GetCarCenterServiceGroupByPayload<T extends CarCenterServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarCenterServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarCenterServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarCenterServiceGroupByOutputType[P]>
            : GetScalarType<T[P], CarCenterServiceGroupByOutputType[P]>
        }
      >
    >


  export type CarCenterServiceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reference?: boolean
    price?: boolean
    description?: boolean
    carCenterId?: boolean
    carServiceId?: boolean
    carCenter?: boolean | CarCenterArgs<ExtArgs>
    carService?: boolean | CarServiceArgs<ExtArgs>
  }, ExtArgs["result"]["carCenterService"]>

  export type CarCenterServiceSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reference?: boolean
    price?: boolean
    description?: boolean
    carCenterId?: boolean
    carServiceId?: boolean
  }

  export type CarCenterServiceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    carCenter?: boolean | CarCenterArgs<ExtArgs>
    carService?: boolean | CarServiceArgs<ExtArgs>
  }


  type CarCenterServiceGetPayload<S extends boolean | null | undefined | CarCenterServiceArgs> = $Types.GetResult<CarCenterServicePayload, S>

  type CarCenterServiceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CarCenterServiceFindManyArgs, 'select' | 'include'> & {
      select?: CarCenterServiceCountAggregateInputType | true
    }

  export interface CarCenterServiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarCenterService'], meta: { name: 'CarCenterService' } }
    /**
     * Find zero or one CarCenterService that matches the filter.
     * @param {CarCenterServiceFindUniqueArgs} args - Arguments to find a CarCenterService
     * @example
     * // Get one CarCenterService
     * const carCenterService = await prisma.carCenterService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarCenterServiceFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarCenterServiceFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CarCenterService'> extends True ? Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CarCenterService that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarCenterServiceFindUniqueOrThrowArgs} args - Arguments to find a CarCenterService
     * @example
     * // Get one CarCenterService
     * const carCenterService = await prisma.carCenterService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarCenterServiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterServiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CarCenterService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterServiceFindFirstArgs} args - Arguments to find a CarCenterService
     * @example
     * // Get one CarCenterService
     * const carCenterService = await prisma.carCenterService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarCenterServiceFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarCenterServiceFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CarCenterService'> extends True ? Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CarCenterService that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterServiceFindFirstOrThrowArgs} args - Arguments to find a CarCenterService
     * @example
     * // Get one CarCenterService
     * const carCenterService = await prisma.carCenterService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarCenterServiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterServiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CarCenterServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarCenterServices
     * const carCenterServices = await prisma.carCenterService.findMany()
     * 
     * // Get first 10 CarCenterServices
     * const carCenterServices = await prisma.carCenterService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carCenterServiceWithIdOnly = await prisma.carCenterService.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarCenterServiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterServiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CarCenterService.
     * @param {CarCenterServiceCreateArgs} args - Arguments to create a CarCenterService.
     * @example
     * // Create one CarCenterService
     * const CarCenterService = await prisma.carCenterService.create({
     *   data: {
     *     // ... data to create a CarCenterService
     *   }
     * })
     * 
    **/
    create<T extends CarCenterServiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterServiceCreateArgs<ExtArgs>>
    ): Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CarCenterServices.
     *     @param {CarCenterServiceCreateManyArgs} args - Arguments to create many CarCenterServices.
     *     @example
     *     // Create many CarCenterServices
     *     const carCenterService = await prisma.carCenterService.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarCenterServiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterServiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarCenterService.
     * @param {CarCenterServiceDeleteArgs} args - Arguments to delete one CarCenterService.
     * @example
     * // Delete one CarCenterService
     * const CarCenterService = await prisma.carCenterService.delete({
     *   where: {
     *     // ... filter to delete one CarCenterService
     *   }
     * })
     * 
    **/
    delete<T extends CarCenterServiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterServiceDeleteArgs<ExtArgs>>
    ): Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CarCenterService.
     * @param {CarCenterServiceUpdateArgs} args - Arguments to update one CarCenterService.
     * @example
     * // Update one CarCenterService
     * const carCenterService = await prisma.carCenterService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarCenterServiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterServiceUpdateArgs<ExtArgs>>
    ): Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CarCenterServices.
     * @param {CarCenterServiceDeleteManyArgs} args - Arguments to filter CarCenterServices to delete.
     * @example
     * // Delete a few CarCenterServices
     * const { count } = await prisma.carCenterService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarCenterServiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarCenterServiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarCenterServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarCenterServices
     * const carCenterService = await prisma.carCenterService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarCenterServiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterServiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarCenterService.
     * @param {CarCenterServiceUpsertArgs} args - Arguments to update or create a CarCenterService.
     * @example
     * // Update or create a CarCenterService
     * const carCenterService = await prisma.carCenterService.upsert({
     *   create: {
     *     // ... data to create a CarCenterService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarCenterService we want to update
     *   }
     * })
    **/
    upsert<T extends CarCenterServiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarCenterServiceUpsertArgs<ExtArgs>>
    ): Prisma__CarCenterServiceClient<$Types.GetResult<CarCenterServicePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CarCenterServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterServiceCountArgs} args - Arguments to filter CarCenterServices to count.
     * @example
     * // Count the number of CarCenterServices
     * const count = await prisma.carCenterService.count({
     *   where: {
     *     // ... the filter for the CarCenterServices we want to count
     *   }
     * })
    **/
    count<T extends CarCenterServiceCountArgs>(
      args?: Subset<T, CarCenterServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarCenterServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarCenterService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarCenterServiceAggregateArgs>(args: Subset<T, CarCenterServiceAggregateArgs>): Prisma.PrismaPromise<GetCarCenterServiceAggregateType<T>>

    /**
     * Group by CarCenterService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCenterServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarCenterServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarCenterServiceGroupByArgs['orderBy'] }
        : { orderBy?: CarCenterServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarCenterServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarCenterServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CarCenterService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarCenterServiceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    carCenter<T extends CarCenterArgs<ExtArgs> = {}>(args?: Subset<T, CarCenterArgs<ExtArgs>>): Prisma__CarCenterClient<$Types.GetResult<CarCenterPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    carService<T extends CarServiceArgs<ExtArgs> = {}>(args?: Subset<T, CarServiceArgs<ExtArgs>>): Prisma__CarServiceClient<$Types.GetResult<CarServicePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CarCenterService base type for findUnique actions
   */
  export type CarCenterServiceFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarCenterService to fetch.
     */
    where: CarCenterServiceWhereUniqueInput
  }

  /**
   * CarCenterService findUnique
   */
  export interface CarCenterServiceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarCenterServiceFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarCenterService findUniqueOrThrow
   */
  export type CarCenterServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarCenterService to fetch.
     */
    where: CarCenterServiceWhereUniqueInput
  }


  /**
   * CarCenterService base type for findFirst actions
   */
  export type CarCenterServiceFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarCenterService to fetch.
     */
    where?: CarCenterServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenterServices to fetch.
     */
    orderBy?: Enumerable<CarCenterServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarCenterServices.
     */
    cursor?: CarCenterServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenterServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenterServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarCenterServices.
     */
    distinct?: Enumerable<CarCenterServiceScalarFieldEnum>
  }

  /**
   * CarCenterService findFirst
   */
  export interface CarCenterServiceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarCenterServiceFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CarCenterService findFirstOrThrow
   */
  export type CarCenterServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarCenterService to fetch.
     */
    where?: CarCenterServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenterServices to fetch.
     */
    orderBy?: Enumerable<CarCenterServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarCenterServices.
     */
    cursor?: CarCenterServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenterServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenterServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarCenterServices.
     */
    distinct?: Enumerable<CarCenterServiceScalarFieldEnum>
  }


  /**
   * CarCenterService findMany
   */
  export type CarCenterServiceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * Filter, which CarCenterServices to fetch.
     */
    where?: CarCenterServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarCenterServices to fetch.
     */
    orderBy?: Enumerable<CarCenterServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarCenterServices.
     */
    cursor?: CarCenterServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarCenterServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarCenterServices.
     */
    skip?: number
    distinct?: Enumerable<CarCenterServiceScalarFieldEnum>
  }


  /**
   * CarCenterService create
   */
  export type CarCenterServiceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a CarCenterService.
     */
    data: XOR<CarCenterServiceCreateInput, CarCenterServiceUncheckedCreateInput>
  }


  /**
   * CarCenterService createMany
   */
  export type CarCenterServiceCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarCenterServices.
     */
    data: Enumerable<CarCenterServiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CarCenterService update
   */
  export type CarCenterServiceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a CarCenterService.
     */
    data: XOR<CarCenterServiceUpdateInput, CarCenterServiceUncheckedUpdateInput>
    /**
     * Choose, which CarCenterService to update.
     */
    where: CarCenterServiceWhereUniqueInput
  }


  /**
   * CarCenterService updateMany
   */
  export type CarCenterServiceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarCenterServices.
     */
    data: XOR<CarCenterServiceUpdateManyMutationInput, CarCenterServiceUncheckedUpdateManyInput>
    /**
     * Filter which CarCenterServices to update
     */
    where?: CarCenterServiceWhereInput
  }


  /**
   * CarCenterService upsert
   */
  export type CarCenterServiceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the CarCenterService to update in case it exists.
     */
    where: CarCenterServiceWhereUniqueInput
    /**
     * In case the CarCenterService found by the `where` argument doesn't exist, create a new CarCenterService with this data.
     */
    create: XOR<CarCenterServiceCreateInput, CarCenterServiceUncheckedCreateInput>
    /**
     * In case the CarCenterService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarCenterServiceUpdateInput, CarCenterServiceUncheckedUpdateInput>
  }


  /**
   * CarCenterService delete
   */
  export type CarCenterServiceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
    /**
     * Filter which CarCenterService to delete.
     */
    where: CarCenterServiceWhereUniqueInput
  }


  /**
   * CarCenterService deleteMany
   */
  export type CarCenterServiceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarCenterServices to delete
     */
    where?: CarCenterServiceWhereInput
  }


  /**
   * CarCenterService without action
   */
  export type CarCenterServiceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCenterService
     */
    select?: CarCenterServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarCenterServiceInclude<ExtArgs> | null
  }



  /**
   * Model UserAddress
   */


  export type AggregateUserAddress = {
    _count: UserAddressCountAggregateOutputType | null
    _avg: UserAddressAvgAggregateOutputType | null
    _sum: UserAddressSumAggregateOutputType | null
    _min: UserAddressMinAggregateOutputType | null
    _max: UserAddressMaxAggregateOutputType | null
  }

  export type UserAddressAvgAggregateOutputType = {
    longitude: number | null
    latitude: number | null
  }

  export type UserAddressSumAggregateOutputType = {
    longitude: number | null
    latitude: number | null
  }

  export type UserAddressMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    address: string | null
    longitude: number | null
    latitude: number | null
    city: string | null
    country: string | null
    isDefault: boolean | null
  }

  export type UserAddressMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    address: string | null
    longitude: number | null
    latitude: number | null
    city: string | null
    country: string | null
    isDefault: boolean | null
  }

  export type UserAddressCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    address: number
    longitude: number
    latitude: number
    city: number
    country: number
    isDefault: number
    _all: number
  }


  export type UserAddressAvgAggregateInputType = {
    longitude?: true
    latitude?: true
  }

  export type UserAddressSumAggregateInputType = {
    longitude?: true
    latitude?: true
  }

  export type UserAddressMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    address?: true
    longitude?: true
    latitude?: true
    city?: true
    country?: true
    isDefault?: true
  }

  export type UserAddressMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    address?: true
    longitude?: true
    latitude?: true
    city?: true
    country?: true
    isDefault?: true
  }

  export type UserAddressCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    address?: true
    longitude?: true
    latitude?: true
    city?: true
    country?: true
    isDefault?: true
    _all?: true
  }

  export type UserAddressAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAddress to aggregate.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAddresses
    **/
    _count?: true | UserAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAddressMaxAggregateInputType
  }

  export type GetUserAddressAggregateType<T extends UserAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAddress[P]>
      : GetScalarType<T[P], AggregateUserAddress[P]>
  }




  export type UserAddressGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserAddressWhereInput
    orderBy?: Enumerable<UserAddressOrderByWithAggregationInput>
    by: UserAddressScalarFieldEnum[]
    having?: UserAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAddressCountAggregateInputType | true
    _avg?: UserAddressAvgAggregateInputType
    _sum?: UserAddressSumAggregateInputType
    _min?: UserAddressMinAggregateInputType
    _max?: UserAddressMaxAggregateInputType
  }


  export type UserAddressGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
    _count: UserAddressCountAggregateOutputType | null
    _avg: UserAddressAvgAggregateOutputType | null
    _sum: UserAddressSumAggregateOutputType | null
    _min: UserAddressMinAggregateOutputType | null
    _max: UserAddressMaxAggregateOutputType | null
  }

  type GetUserAddressGroupByPayload<T extends UserAddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAddressGroupByOutputType[P]>
            : GetScalarType<T[P], UserAddressGroupByOutputType[P]>
        }
      >
    >


  export type UserAddressSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    address?: boolean
    longitude?: boolean
    latitude?: boolean
    city?: boolean
    country?: boolean
    isDefault?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["userAddress"]>

  export type UserAddressSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    address?: boolean
    longitude?: boolean
    latitude?: boolean
    city?: boolean
    country?: boolean
    isDefault?: boolean
  }

  export type UserAddressInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type UserAddressGetPayload<S extends boolean | null | undefined | UserAddressArgs> = $Types.GetResult<UserAddressPayload, S>

  type UserAddressCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserAddressFindManyArgs, 'select' | 'include'> & {
      select?: UserAddressCountAggregateInputType | true
    }

  export interface UserAddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAddress'], meta: { name: 'UserAddress' } }
    /**
     * Find zero or one UserAddress that matches the filter.
     * @param {UserAddressFindUniqueArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserAddressFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserAddressFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserAddress'> extends True ? Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UserAddress that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserAddressFindUniqueOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserAddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserAddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UserAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserAddressFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserAddressFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserAddress'> extends True ? Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UserAddress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserAddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserAddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UserAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAddresses
     * const userAddresses = await prisma.userAddress.findMany()
     * 
     * // Get first 10 UserAddresses
     * const userAddresses = await prisma.userAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAddressWithIdOnly = await prisma.userAddress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserAddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserAddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UserAddress.
     * @param {UserAddressCreateArgs} args - Arguments to create a UserAddress.
     * @example
     * // Create one UserAddress
     * const UserAddress = await prisma.userAddress.create({
     *   data: {
     *     // ... data to create a UserAddress
     *   }
     * })
     * 
    **/
    create<T extends UserAddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserAddressCreateArgs<ExtArgs>>
    ): Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UserAddresses.
     *     @param {UserAddressCreateManyArgs} args - Arguments to create many UserAddresses.
     *     @example
     *     // Create many UserAddresses
     *     const userAddress = await prisma.userAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserAddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserAddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserAddress.
     * @param {UserAddressDeleteArgs} args - Arguments to delete one UserAddress.
     * @example
     * // Delete one UserAddress
     * const UserAddress = await prisma.userAddress.delete({
     *   where: {
     *     // ... filter to delete one UserAddress
     *   }
     * })
     * 
    **/
    delete<T extends UserAddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserAddressDeleteArgs<ExtArgs>>
    ): Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UserAddress.
     * @param {UserAddressUpdateArgs} args - Arguments to update one UserAddress.
     * @example
     * // Update one UserAddress
     * const userAddress = await prisma.userAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserAddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserAddressUpdateArgs<ExtArgs>>
    ): Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UserAddresses.
     * @param {UserAddressDeleteManyArgs} args - Arguments to filter UserAddresses to delete.
     * @example
     * // Delete a few UserAddresses
     * const { count } = await prisma.userAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserAddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserAddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAddresses
     * const userAddress = await prisma.userAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserAddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserAddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAddress.
     * @param {UserAddressUpsertArgs} args - Arguments to update or create a UserAddress.
     * @example
     * // Update or create a UserAddress
     * const userAddress = await prisma.userAddress.upsert({
     *   create: {
     *     // ... data to create a UserAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAddress we want to update
     *   }
     * })
    **/
    upsert<T extends UserAddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserAddressUpsertArgs<ExtArgs>>
    ): Prisma__UserAddressClient<$Types.GetResult<UserAddressPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressCountArgs} args - Arguments to filter UserAddresses to count.
     * @example
     * // Count the number of UserAddresses
     * const count = await prisma.userAddress.count({
     *   where: {
     *     // ... the filter for the UserAddresses we want to count
     *   }
     * })
    **/
    count<T extends UserAddressCountArgs>(
      args?: Subset<T, UserAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAddressAggregateArgs>(args: Subset<T, UserAddressAggregateArgs>): Prisma.PrismaPromise<GetUserAddressAggregateType<T>>

    /**
     * Group by UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAddressGroupByArgs['orderBy'] }
        : { orderBy?: UserAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserAddressClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserAddress base type for findUnique actions
   */
  export type UserAddressFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where: UserAddressWhereUniqueInput
  }

  /**
   * UserAddress findUnique
   */
  export interface UserAddressFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserAddressFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAddress findUniqueOrThrow
   */
  export type UserAddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where: UserAddressWhereUniqueInput
  }


  /**
   * UserAddress base type for findFirst actions
   */
  export type UserAddressFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAddresses.
     */
    distinct?: Enumerable<UserAddressScalarFieldEnum>
  }

  /**
   * UserAddress findFirst
   */
  export interface UserAddressFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserAddressFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAddress findFirstOrThrow
   */
  export type UserAddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAddresses.
     */
    distinct?: Enumerable<UserAddressScalarFieldEnum>
  }


  /**
   * UserAddress findMany
   */
  export type UserAddressFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddresses to fetch.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    distinct?: Enumerable<UserAddressScalarFieldEnum>
  }


  /**
   * UserAddress create
   */
  export type UserAddressCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAddress.
     */
    data: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>
  }


  /**
   * UserAddress createMany
   */
  export type UserAddressCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAddresses.
     */
    data: Enumerable<UserAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserAddress update
   */
  export type UserAddressUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAddress.
     */
    data: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>
    /**
     * Choose, which UserAddress to update.
     */
    where: UserAddressWhereUniqueInput
  }


  /**
   * UserAddress updateMany
   */
  export type UserAddressUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAddresses.
     */
    data: XOR<UserAddressUpdateManyMutationInput, UserAddressUncheckedUpdateManyInput>
    /**
     * Filter which UserAddresses to update
     */
    where?: UserAddressWhereInput
  }


  /**
   * UserAddress upsert
   */
  export type UserAddressUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAddress to update in case it exists.
     */
    where: UserAddressWhereUniqueInput
    /**
     * In case the UserAddress found by the `where` argument doesn't exist, create a new UserAddress with this data.
     */
    create: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>
    /**
     * In case the UserAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>
  }


  /**
   * UserAddress delete
   */
  export type UserAddressDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter which UserAddress to delete.
     */
    where: UserAddressWhereUniqueInput
  }


  /**
   * UserAddress deleteMany
   */
  export type UserAddressDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAddresses to delete
     */
    where?: UserAddressWhereInput
  }


  /**
   * UserAddress without action
   */
  export type UserAddressArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserAddressInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CarBrandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    reference: 'reference',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarBrandScalarFieldEnum = (typeof CarBrandScalarFieldEnum)[keyof typeof CarBrandScalarFieldEnum]


  export const CarModelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    reference: 'reference',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    brandId: 'brandId'
  };

  export type CarModelScalarFieldEnum = (typeof CarModelScalarFieldEnum)[keyof typeof CarModelScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    slug: 'slug',
    reference: 'reference'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const DeviceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sectionId: 'sectionId',
    carModelId: 'carModelId',
    reference: 'reference',
    slug: 'slug'
  };

  export type DeviceScalarFieldEnum = (typeof DeviceScalarFieldEnum)[keyof typeof DeviceScalarFieldEnum]


  export const DealerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    website: 'website',
    phone: 'phone',
    email: 'email',
    reference: 'reference'
  };

  export type DealerScalarFieldEnum = (typeof DealerScalarFieldEnum)[keyof typeof DealerScalarFieldEnum]


  export const StockScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dealerId: 'dealerId',
    address: 'address',
    phone: 'phone',
    email: 'email',
    longitude: 'longitude',
    latitude: 'latitude',
    openHours: 'openHours'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const ScrapedCarScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    image: 'image',
    images: 'images',
    fuel: 'fuel',
    chassis: 'chassis',
    carModelId: 'carModelId',
    reference: 'reference',
    stockId: 'stockId',
    description: 'description',
    body: 'body',
    mileage: 'mileage',
    modelYear: 'modelYear'
  };

  export type ScrapedCarScalarFieldEnum = (typeof ScrapedCarScalarFieldEnum)[keyof typeof ScrapedCarScalarFieldEnum]


  export const DeviceDealerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deviceId: 'deviceId',
    dealerId: 'dealerId',
    name: 'name',
    image: 'image',
    images: 'images',
    originalNumber: 'originalNumber',
    manufacturerCode: 'manufacturerCode',
    manufacturer: 'manufacturer',
    reference: 'reference',
    price: 'price',
    discount: 'discount',
    stockId: 'stockId',
    type: 'type',
    subtype: 'subtype',
    description: 'description',
    quality: 'quality',
    articleNumber: 'articleNumber',
    isUsed: 'isUsed',
    status: 'status',
    modelYear: 'modelYear'
  };

  export type DeviceDealerScalarFieldEnum = (typeof DeviceDealerScalarFieldEnum)[keyof typeof DeviceDealerScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    image: 'image',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role',
    appleId: 'appleId',
    stripeId: 'stripeId',
    telephone: 'telephone'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserModelInterestScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    carModelId: 'carModelId'
  };

  export type UserModelInterestScalarFieldEnum = (typeof UserModelInterestScalarFieldEnum)[keyof typeof UserModelInterestScalarFieldEnum]


  export const UserDeviceInterestScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    deviceId: 'deviceId'
  };

  export type UserDeviceInterestScalarFieldEnum = (typeof UserDeviceInterestScalarFieldEnum)[keyof typeof UserDeviceInterestScalarFieldEnum]


  export const PushTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PushTokenScalarFieldEnum = (typeof PushTokenScalarFieldEnum)[keyof typeof PushTokenScalarFieldEnum]


  export const UserCarScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    carModelId: 'carModelId',
    registerNumber: 'registerNumber',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserCarScalarFieldEnum = (typeof UserCarScalarFieldEnum)[keyof typeof UserCarScalarFieldEnum]


  export const CarCenterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    slug: 'slug',
    reference: 'reference',
    longitude: 'longitude',
    latitude: 'latitude',
    address: 'address',
    telephone: 'telephone',
    email: 'email'
  };

  export type CarCenterScalarFieldEnum = (typeof CarCenterScalarFieldEnum)[keyof typeof CarCenterScalarFieldEnum]


  export const CarServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    image: 'image',
    updatedAt: 'updatedAt'
  };

  export type CarServiceScalarFieldEnum = (typeof CarServiceScalarFieldEnum)[keyof typeof CarServiceScalarFieldEnum]


  export const CarCenterServiceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reference: 'reference',
    price: 'price',
    description: 'description',
    carCenterId: 'carCenterId',
    carServiceId: 'carServiceId'
  };

  export type CarCenterServiceScalarFieldEnum = (typeof CarCenterServiceScalarFieldEnum)[keyof typeof CarCenterServiceScalarFieldEnum]


  export const UserAddressScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    address: 'address',
    longitude: 'longitude',
    latitude: 'latitude',
    city: 'city',
    country: 'country',
    isDefault: 'isDefault'
  };

  export type UserAddressScalarFieldEnum = (typeof UserAddressScalarFieldEnum)[keyof typeof UserAddressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type CarBrandWhereInput = {
    AND?: Enumerable<CarBrandWhereInput>
    OR?: Enumerable<CarBrandWhereInput>
    NOT?: Enumerable<CarBrandWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    logo?: StringFilter | string
    reference?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    models?: CarModelListRelationFilter
  }

  export type CarBrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    models?: CarModelOrderByRelationAggregateInput
  }

  export type CarBrandWhereUniqueInput = {
    id?: string
  }

  export type CarBrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CarBrandCountOrderByAggregateInput
    _max?: CarBrandMaxOrderByAggregateInput
    _min?: CarBrandMinOrderByAggregateInput
  }

  export type CarBrandScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarBrandScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarBrandScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarBrandScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    logo?: StringWithAggregatesFilter | string
    reference?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CarModelWhereInput = {
    AND?: Enumerable<CarModelWhereInput>
    OR?: Enumerable<CarModelWhereInput>
    NOT?: Enumerable<CarModelWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    reference?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    brandId?: StringFilter | string
    brand?: XOR<CarBrandRelationFilter, CarBrandWhereInput>
    scrapedCars?: ScrapedCarListRelationFilter
    devices?: DeviceListRelationFilter
    interestedUsers?: UserModelInterestListRelationFilter
    users?: UserCarListRelationFilter
  }

  export type CarModelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brandId?: SortOrder
    brand?: CarBrandOrderByWithRelationInput
    scrapedCars?: ScrapedCarOrderByRelationAggregateInput
    devices?: DeviceOrderByRelationAggregateInput
    interestedUsers?: UserModelInterestOrderByRelationAggregateInput
    users?: UserCarOrderByRelationAggregateInput
  }

  export type CarModelWhereUniqueInput = {
    id?: string
  }

  export type CarModelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brandId?: SortOrder
    _count?: CarModelCountOrderByAggregateInput
    _max?: CarModelMaxOrderByAggregateInput
    _min?: CarModelMinOrderByAggregateInput
  }

  export type CarModelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarModelScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarModelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarModelScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    reference?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    brandId?: StringWithAggregatesFilter | string
  }

  export type SectionWhereInput = {
    AND?: Enumerable<SectionWhereInput>
    OR?: Enumerable<SectionWhereInput>
    NOT?: Enumerable<SectionWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    slug?: StringNullableFilter | string | null
    reference?: StringNullableFilter | string | null
    devices?: DeviceListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    devices?: DeviceOrderByRelationAggregateInput
  }

  export type SectionWhereUniqueInput = {
    id?: string
  }

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    _count?: SectionCountOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SectionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SectionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SectionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    slug?: StringNullableWithAggregatesFilter | string | null
    reference?: StringNullableWithAggregatesFilter | string | null
  }

  export type DeviceWhereInput = {
    AND?: Enumerable<DeviceWhereInput>
    OR?: Enumerable<DeviceWhereInput>
    NOT?: Enumerable<DeviceWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    sectionId?: StringFilter | string
    carModelId?: StringFilter | string
    reference?: StringNullableFilter | string | null
    slug?: StringNullableFilter | string | null
    dealers?: DeviceDealerListRelationFilter
    section?: XOR<SectionRelationFilter, SectionWhereInput>
    carModel?: XOR<CarModelRelationFilter, CarModelWhereInput>
    interestedUsers?: UserDeviceInterestListRelationFilter
  }

  export type DeviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sectionId?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    dealers?: DeviceDealerOrderByRelationAggregateInput
    section?: SectionOrderByWithRelationInput
    carModel?: CarModelOrderByWithRelationInput
    interestedUsers?: UserDeviceInterestOrderByRelationAggregateInput
  }

  export type DeviceWhereUniqueInput = {
    id?: string
  }

  export type DeviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sectionId?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    _count?: DeviceCountOrderByAggregateInput
    _max?: DeviceMaxOrderByAggregateInput
    _min?: DeviceMinOrderByAggregateInput
  }

  export type DeviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    sectionId?: StringWithAggregatesFilter | string
    carModelId?: StringWithAggregatesFilter | string
    reference?: StringNullableWithAggregatesFilter | string | null
    slug?: StringNullableWithAggregatesFilter | string | null
  }

  export type DealerWhereInput = {
    AND?: Enumerable<DealerWhereInput>
    OR?: Enumerable<DealerWhereInput>
    NOT?: Enumerable<DealerWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    website?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    reference?: StringNullableFilter | string | null
    devices?: DeviceDealerListRelationFilter
    stocks?: StockListRelationFilter
  }

  export type DealerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    website?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    devices?: DeviceDealerOrderByRelationAggregateInput
    stocks?: StockOrderByRelationAggregateInput
  }

  export type DealerWhereUniqueInput = {
    id?: string
  }

  export type DealerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    website?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    _count?: DealerCountOrderByAggregateInput
    _max?: DealerMaxOrderByAggregateInput
    _min?: DealerMinOrderByAggregateInput
  }

  export type DealerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DealerScalarWhereWithAggregatesInput>
    OR?: Enumerable<DealerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DealerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    website?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    reference?: StringNullableWithAggregatesFilter | string | null
  }

  export type StockWhereInput = {
    AND?: Enumerable<StockWhereInput>
    OR?: Enumerable<StockWhereInput>
    NOT?: Enumerable<StockWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    dealerId?: StringFilter | string
    address?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    longitude?: FloatFilter | number
    latitude?: FloatFilter | number
    openHours?: StringNullableFilter | string | null
    devices?: DeviceDealerListRelationFilter
    dealer?: XOR<DealerRelationFilter, DealerWhereInput>
    ScrapedCar?: ScrapedCarListRelationFilter
  }

  export type StockOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dealerId?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    openHours?: SortOrderInput | SortOrder
    devices?: DeviceDealerOrderByRelationAggregateInput
    dealer?: DealerOrderByWithRelationInput
    ScrapedCar?: ScrapedCarOrderByRelationAggregateInput
  }

  export type StockWhereUniqueInput = {
    id?: string
  }

  export type StockOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dealerId?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    openHours?: SortOrderInput | SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StockScalarWhereWithAggregatesInput>
    OR?: Enumerable<StockScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StockScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    dealerId?: StringWithAggregatesFilter | string
    address?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    longitude?: FloatWithAggregatesFilter | number
    latitude?: FloatWithAggregatesFilter | number
    openHours?: StringNullableWithAggregatesFilter | string | null
  }

  export type ScrapedCarWhereInput = {
    AND?: Enumerable<ScrapedCarWhereInput>
    OR?: Enumerable<ScrapedCarWhereInput>
    NOT?: Enumerable<ScrapedCarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    images?: StringNullableListFilter
    fuel?: StringNullableFilter | string | null
    chassis?: StringNullableFilter | string | null
    carModelId?: StringFilter | string
    reference?: StringNullableFilter | string | null
    stockId?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    body?: StringNullableFilter | string | null
    mileage?: StringNullableFilter | string | null
    modelYear?: StringNullableFilter | string | null
    carModel?: XOR<CarModelRelationFilter, CarModelWhereInput>
    Stock?: XOR<StockRelationFilter, StockWhereInput> | null
  }

  export type ScrapedCarOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    images?: SortOrder
    fuel?: SortOrderInput | SortOrder
    chassis?: SortOrderInput | SortOrder
    carModelId?: SortOrder
    reference?: SortOrderInput | SortOrder
    stockId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    mileage?: SortOrderInput | SortOrder
    modelYear?: SortOrderInput | SortOrder
    carModel?: CarModelOrderByWithRelationInput
    Stock?: StockOrderByWithRelationInput
  }

  export type ScrapedCarWhereUniqueInput = {
    id?: string
  }

  export type ScrapedCarOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    images?: SortOrder
    fuel?: SortOrderInput | SortOrder
    chassis?: SortOrderInput | SortOrder
    carModelId?: SortOrder
    reference?: SortOrderInput | SortOrder
    stockId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    mileage?: SortOrderInput | SortOrder
    modelYear?: SortOrderInput | SortOrder
    _count?: ScrapedCarCountOrderByAggregateInput
    _max?: ScrapedCarMaxOrderByAggregateInput
    _min?: ScrapedCarMinOrderByAggregateInput
  }

  export type ScrapedCarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ScrapedCarScalarWhereWithAggregatesInput>
    OR?: Enumerable<ScrapedCarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ScrapedCarScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    images?: StringNullableListFilter
    fuel?: StringNullableWithAggregatesFilter | string | null
    chassis?: StringNullableWithAggregatesFilter | string | null
    carModelId?: StringWithAggregatesFilter | string
    reference?: StringNullableWithAggregatesFilter | string | null
    stockId?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    body?: StringNullableWithAggregatesFilter | string | null
    mileage?: StringNullableWithAggregatesFilter | string | null
    modelYear?: StringNullableWithAggregatesFilter | string | null
  }

  export type DeviceDealerWhereInput = {
    AND?: Enumerable<DeviceDealerWhereInput>
    OR?: Enumerable<DeviceDealerWhereInput>
    NOT?: Enumerable<DeviceDealerWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deviceId?: StringFilter | string
    dealerId?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    images?: StringNullableListFilter
    originalNumber?: StringNullableFilter | string | null
    manufacturerCode?: StringNullableFilter | string | null
    manufacturer?: StringNullableFilter | string | null
    reference?: StringNullableFilter | string | null
    price?: FloatNullableFilter | number | null
    discount?: FloatNullableFilter | number | null
    stockId?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    subtype?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    quality?: StringNullableFilter | string | null
    articleNumber?: StringNullableFilter | string | null
    isUsed?: BoolNullableFilter | boolean | null
    status?: StringNullableFilter | string | null
    modelYear?: StringNullableFilter | string | null
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
    dealer?: XOR<DealerRelationFilter, DealerWhereInput>
    Stock?: XOR<StockRelationFilter, StockWhereInput> | null
  }

  export type DeviceDealerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deviceId?: SortOrder
    dealerId?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    images?: SortOrder
    originalNumber?: SortOrderInput | SortOrder
    manufacturerCode?: SortOrderInput | SortOrder
    manufacturer?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    stockId?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    subtype?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    quality?: SortOrderInput | SortOrder
    articleNumber?: SortOrderInput | SortOrder
    isUsed?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    modelYear?: SortOrderInput | SortOrder
    device?: DeviceOrderByWithRelationInput
    dealer?: DealerOrderByWithRelationInput
    Stock?: StockOrderByWithRelationInput
  }

  export type DeviceDealerWhereUniqueInput = {
    id?: string
  }

  export type DeviceDealerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deviceId?: SortOrder
    dealerId?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    images?: SortOrder
    originalNumber?: SortOrderInput | SortOrder
    manufacturerCode?: SortOrderInput | SortOrder
    manufacturer?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    stockId?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    subtype?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    quality?: SortOrderInput | SortOrder
    articleNumber?: SortOrderInput | SortOrder
    isUsed?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    modelYear?: SortOrderInput | SortOrder
    _count?: DeviceDealerCountOrderByAggregateInput
    _avg?: DeviceDealerAvgOrderByAggregateInput
    _max?: DeviceDealerMaxOrderByAggregateInput
    _min?: DeviceDealerMinOrderByAggregateInput
    _sum?: DeviceDealerSumOrderByAggregateInput
  }

  export type DeviceDealerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeviceDealerScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeviceDealerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeviceDealerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deviceId?: StringWithAggregatesFilter | string
    dealerId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    images?: StringNullableListFilter
    originalNumber?: StringNullableWithAggregatesFilter | string | null
    manufacturerCode?: StringNullableWithAggregatesFilter | string | null
    manufacturer?: StringNullableWithAggregatesFilter | string | null
    reference?: StringNullableWithAggregatesFilter | string | null
    price?: FloatNullableWithAggregatesFilter | number | null
    discount?: FloatNullableWithAggregatesFilter | number | null
    stockId?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    subtype?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    quality?: StringNullableWithAggregatesFilter | string | null
    articleNumber?: StringNullableWithAggregatesFilter | string | null
    isUsed?: BoolNullableWithAggregatesFilter | boolean | null
    status?: StringNullableWithAggregatesFilter | string | null
    modelYear?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    role?: StringFilter | string
    appleId?: StringNullableFilter | string | null
    stripeId?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    pushTokens?: PushTokenListRelationFilter
    interestedModels?: UserModelInterestListRelationFilter
    interestedDevices?: UserDeviceInterestListRelationFilter
    cars?: UserCarListRelationFilter
    addresses?: UserAddressListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    appleId?: SortOrderInput | SortOrder
    stripeId?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    pushTokens?: PushTokenOrderByRelationAggregateInput
    interestedModels?: UserModelInterestOrderByRelationAggregateInput
    interestedDevices?: UserDeviceInterestOrderByRelationAggregateInput
    cars?: UserCarOrderByRelationAggregateInput
    addresses?: UserAddressOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    appleId?: SortOrderInput | SortOrder
    stripeId?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    role?: StringWithAggregatesFilter | string
    appleId?: StringNullableWithAggregatesFilter | string | null
    stripeId?: StringNullableWithAggregatesFilter | string | null
    telephone?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserModelInterestWhereInput = {
    AND?: Enumerable<UserModelInterestWhereInput>
    OR?: Enumerable<UserModelInterestWhereInput>
    NOT?: Enumerable<UserModelInterestWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    carModelId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    carModel?: XOR<CarModelRelationFilter, CarModelWhereInput>
  }

  export type UserModelInterestOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
    user?: UserOrderByWithRelationInput
    carModel?: CarModelOrderByWithRelationInput
  }

  export type UserModelInterestWhereUniqueInput = {
    id?: string
  }

  export type UserModelInterestOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
    _count?: UserModelInterestCountOrderByAggregateInput
    _max?: UserModelInterestMaxOrderByAggregateInput
    _min?: UserModelInterestMinOrderByAggregateInput
  }

  export type UserModelInterestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserModelInterestScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserModelInterestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserModelInterestScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
    carModelId?: StringWithAggregatesFilter | string
  }

  export type UserDeviceInterestWhereInput = {
    AND?: Enumerable<UserDeviceInterestWhereInput>
    OR?: Enumerable<UserDeviceInterestWhereInput>
    NOT?: Enumerable<UserDeviceInterestWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    deviceId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type UserDeviceInterestOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
    user?: UserOrderByWithRelationInput
    device?: DeviceOrderByWithRelationInput
  }

  export type UserDeviceInterestWhereUniqueInput = {
    id?: string
  }

  export type UserDeviceInterestOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
    _count?: UserDeviceInterestCountOrderByAggregateInput
    _max?: UserDeviceInterestMaxOrderByAggregateInput
    _min?: UserDeviceInterestMinOrderByAggregateInput
  }

  export type UserDeviceInterestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserDeviceInterestScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserDeviceInterestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserDeviceInterestScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
    deviceId?: StringWithAggregatesFilter | string
  }

  export type PushTokenWhereInput = {
    AND?: Enumerable<PushTokenWhereInput>
    OR?: Enumerable<PushTokenWhereInput>
    NOT?: Enumerable<PushTokenWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PushTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PushTokenWhereUniqueInput = {
    id?: string
  }

  export type PushTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PushTokenCountOrderByAggregateInput
    _max?: PushTokenMaxOrderByAggregateInput
    _min?: PushTokenMinOrderByAggregateInput
  }

  export type PushTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PushTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<PushTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PushTokenScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCarWhereInput = {
    AND?: Enumerable<UserCarWhereInput>
    OR?: Enumerable<UserCarWhereInput>
    NOT?: Enumerable<UserCarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    carModelId?: StringFilter | string
    registerNumber?: StringFilter | string
    color?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    carModel?: XOR<CarModelRelationFilter, CarModelWhereInput>
  }

  export type UserCarOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
    registerNumber?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    carModel?: CarModelOrderByWithRelationInput
  }

  export type UserCarWhereUniqueInput = {
    id?: string
  }

  export type UserCarOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
    registerNumber?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCarCountOrderByAggregateInput
    _max?: UserCarMaxOrderByAggregateInput
    _min?: UserCarMinOrderByAggregateInput
  }

  export type UserCarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserCarScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserCarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserCarScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    carModelId?: StringWithAggregatesFilter | string
    registerNumber?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CarCenterWhereInput = {
    AND?: Enumerable<CarCenterWhereInput>
    OR?: Enumerable<CarCenterWhereInput>
    NOT?: Enumerable<CarCenterWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    slug?: StringNullableFilter | string | null
    reference?: StringNullableFilter | string | null
    longitude?: FloatFilter | number
    latitude?: FloatFilter | number
    address?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    services?: CarCenterServiceListRelationFilter
  }

  export type CarCenterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    services?: CarCenterServiceOrderByRelationAggregateInput
  }

  export type CarCenterWhereUniqueInput = {
    id?: string
  }

  export type CarCenterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    _count?: CarCenterCountOrderByAggregateInput
    _avg?: CarCenterAvgOrderByAggregateInput
    _max?: CarCenterMaxOrderByAggregateInput
    _min?: CarCenterMinOrderByAggregateInput
    _sum?: CarCenterSumOrderByAggregateInput
  }

  export type CarCenterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarCenterScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarCenterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarCenterScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    slug?: StringNullableWithAggregatesFilter | string | null
    reference?: StringNullableWithAggregatesFilter | string | null
    longitude?: FloatWithAggregatesFilter | number
    latitude?: FloatWithAggregatesFilter | number
    address?: StringNullableWithAggregatesFilter | string | null
    telephone?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
  }

  export type CarServiceWhereInput = {
    AND?: Enumerable<CarServiceWhereInput>
    OR?: Enumerable<CarServiceWhereInput>
    NOT?: Enumerable<CarServiceWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    image?: StringNullableFilter | string | null
    updatedAt?: DateTimeFilter | Date | string
    centers?: CarCenterServiceListRelationFilter
  }

  export type CarServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    image?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    centers?: CarCenterServiceOrderByRelationAggregateInput
  }

  export type CarServiceWhereUniqueInput = {
    id?: string
  }

  export type CarServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    image?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: CarServiceCountOrderByAggregateInput
    _max?: CarServiceMaxOrderByAggregateInput
    _min?: CarServiceMinOrderByAggregateInput
  }

  export type CarServiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarServiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarServiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarServiceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    image?: StringNullableWithAggregatesFilter | string | null
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CarCenterServiceWhereInput = {
    AND?: Enumerable<CarCenterServiceWhereInput>
    OR?: Enumerable<CarCenterServiceWhereInput>
    NOT?: Enumerable<CarCenterServiceWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    reference?: StringNullableFilter | string | null
    price?: FloatFilter | number
    description?: StringNullableFilter | string | null
    carCenterId?: StringFilter | string
    carServiceId?: StringFilter | string
    carCenter?: XOR<CarCenterRelationFilter, CarCenterWhereInput>
    carService?: XOR<CarServiceRelationFilter, CarServiceWhereInput>
  }

  export type CarCenterServiceOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reference?: SortOrderInput | SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    carCenterId?: SortOrder
    carServiceId?: SortOrder
    carCenter?: CarCenterOrderByWithRelationInput
    carService?: CarServiceOrderByWithRelationInput
  }

  export type CarCenterServiceWhereUniqueInput = {
    id?: string
  }

  export type CarCenterServiceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reference?: SortOrderInput | SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    carCenterId?: SortOrder
    carServiceId?: SortOrder
    _count?: CarCenterServiceCountOrderByAggregateInput
    _avg?: CarCenterServiceAvgOrderByAggregateInput
    _max?: CarCenterServiceMaxOrderByAggregateInput
    _min?: CarCenterServiceMinOrderByAggregateInput
    _sum?: CarCenterServiceSumOrderByAggregateInput
  }

  export type CarCenterServiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarCenterServiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarCenterServiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarCenterServiceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    reference?: StringNullableWithAggregatesFilter | string | null
    price?: FloatWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    carCenterId?: StringWithAggregatesFilter | string
    carServiceId?: StringWithAggregatesFilter | string
  }

  export type UserAddressWhereInput = {
    AND?: Enumerable<UserAddressWhereInput>
    OR?: Enumerable<UserAddressWhereInput>
    NOT?: Enumerable<UserAddressWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    address?: StringFilter | string
    longitude?: FloatFilter | number
    latitude?: FloatFilter | number
    city?: StringFilter | string
    country?: StringFilter | string
    isDefault?: BoolFilter | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserAddressOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    city?: SortOrder
    country?: SortOrder
    isDefault?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserAddressWhereUniqueInput = {
    id?: string
  }

  export type UserAddressOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    city?: SortOrder
    country?: SortOrder
    isDefault?: SortOrder
    _count?: UserAddressCountOrderByAggregateInput
    _avg?: UserAddressAvgOrderByAggregateInput
    _max?: UserAddressMaxOrderByAggregateInput
    _min?: UserAddressMinOrderByAggregateInput
    _sum?: UserAddressSumOrderByAggregateInput
  }

  export type UserAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserAddressScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    longitude?: FloatWithAggregatesFilter | number
    latitude?: FloatWithAggregatesFilter | number
    city?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    isDefault?: BoolWithAggregatesFilter | boolean
  }

  export type CarBrandCreateInput = {
    id?: string
    name: string
    logo: string
    reference: string
    createdAt?: Date | string
    updatedAt?: Date | string
    models?: CarModelCreateNestedManyWithoutBrandInput
  }

  export type CarBrandUncheckedCreateInput = {
    id?: string
    name: string
    logo: string
    reference: string
    createdAt?: Date | string
    updatedAt?: Date | string
    models?: CarModelUncheckedCreateNestedManyWithoutBrandInput
  }

  export type CarBrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    models?: CarModelUpdateManyWithoutBrandNestedInput
  }

  export type CarBrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    models?: CarModelUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type CarBrandCreateManyInput = {
    id?: string
    name: string
    logo: string
    reference: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarBrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarBrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarModelCreateInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: CarBrandCreateNestedOneWithoutModelsInput
    scrapedCars?: ScrapedCarCreateNestedManyWithoutCarModelInput
    devices?: DeviceCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestCreateNestedManyWithoutCarModelInput
    users?: UserCarCreateNestedManyWithoutCarModelInput
  }

  export type CarModelUncheckedCreateInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
    scrapedCars?: ScrapedCarUncheckedCreateNestedManyWithoutCarModelInput
    devices?: DeviceUncheckedCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestUncheckedCreateNestedManyWithoutCarModelInput
    users?: UserCarUncheckedCreateNestedManyWithoutCarModelInput
  }

  export type CarModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: CarBrandUpdateOneRequiredWithoutModelsNestedInput
    scrapedCars?: ScrapedCarUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUpdateManyWithoutCarModelNestedInput
    users?: UserCarUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
    scrapedCars?: ScrapedCarUncheckedUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUncheckedUpdateManyWithoutCarModelNestedInput
    users?: UserCarUncheckedUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelCreateManyInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
  }

  export type CarModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCreateInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
    devices?: DeviceCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
    devices?: DeviceUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
  }

  export type SectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceCreateInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerCreateNestedManyWithoutDeviceInput
    section: SectionCreateNestedOneWithoutDevicesInput
    carModel: CarModelCreateNestedOneWithoutDevicesInput
    interestedUsers?: UserDeviceInterestCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionId: string
    carModelId: string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerUncheckedCreateNestedManyWithoutDeviceInput
    interestedUsers?: UserDeviceInterestUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUpdateManyWithoutDeviceNestedInput
    section?: SectionUpdateOneRequiredWithoutDevicesNestedInput
    carModel?: CarModelUpdateOneRequiredWithoutDevicesNestedInput
    interestedUsers?: UserDeviceInterestUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUncheckedUpdateManyWithoutDeviceNestedInput
    interestedUsers?: UserDeviceInterestUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateManyInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionId: string
    carModelId: string
    reference?: string | null
    slug?: string | null
  }

  export type DeviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DealerCreateInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    website?: string | null
    phone?: string | null
    email?: string | null
    reference?: string | null
    devices?: DeviceDealerCreateNestedManyWithoutDealerInput
    stocks?: StockCreateNestedManyWithoutDealerInput
  }

  export type DealerUncheckedCreateInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    website?: string | null
    phone?: string | null
    email?: string | null
    reference?: string | null
    devices?: DeviceDealerUncheckedCreateNestedManyWithoutDealerInput
    stocks?: StockUncheckedCreateNestedManyWithoutDealerInput
  }

  export type DealerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUpdateManyWithoutDealerNestedInput
    stocks?: StockUpdateManyWithoutDealerNestedInput
  }

  export type DealerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUncheckedUpdateManyWithoutDealerNestedInput
    stocks?: StockUncheckedUpdateManyWithoutDealerNestedInput
  }

  export type DealerCreateManyInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    website?: string | null
    phone?: string | null
    email?: string | null
    reference?: string | null
  }

  export type DealerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DealerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    devices?: DeviceDealerCreateNestedManyWithoutStockInput
    dealer: DealerCreateNestedOneWithoutStocksInput
    ScrapedCar?: ScrapedCarCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dealerId: string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    devices?: DeviceDealerUncheckedCreateNestedManyWithoutStockInput
    ScrapedCar?: ScrapedCarUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUpdateManyWithoutStockNestedInput
    dealer?: DealerUpdateOneRequiredWithoutStocksNestedInput
    ScrapedCar?: ScrapedCarUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealerId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUncheckedUpdateManyWithoutStockNestedInput
    ScrapedCar?: ScrapedCarUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dealerId: string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
  }

  export type StockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealerId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScrapedCarCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    reference?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
    carModel: CarModelCreateNestedOneWithoutScrapedCarsInput
    Stock?: StockCreateNestedOneWithoutScrapedCarInput
  }

  export type ScrapedCarUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    carModelId: string
    reference?: string | null
    stockId?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
  }

  export type ScrapedCarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
    carModel?: CarModelUpdateOneRequiredWithoutScrapedCarsNestedInput
    Stock?: StockUpdateOneWithoutScrapedCarNestedInput
  }

  export type ScrapedCarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScrapedCarCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    carModelId: string
    reference?: string | null
    stockId?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
  }

  export type ScrapedCarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScrapedCarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceDealerCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
    device: DeviceCreateNestedOneWithoutDealersInput
    dealer: DealerCreateNestedOneWithoutDevicesInput
    Stock?: StockCreateNestedOneWithoutDevicesInput
  }

  export type DeviceDealerUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
    dealerId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    stockId?: string | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type DeviceDealerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
    device?: DeviceUpdateOneRequiredWithoutDealersNestedInput
    dealer?: DealerUpdateOneRequiredWithoutDevicesNestedInput
    Stock?: StockUpdateOneWithoutDevicesNestedInput
  }

  export type DeviceDealerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deviceId?: StringFieldUpdateOperationsInput | string
    dealerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceDealerCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
    dealerId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    stockId?: string | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type DeviceDealerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceDealerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deviceId?: StringFieldUpdateOperationsInput | string
    dealerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestCreateNestedManyWithoutUserInput
    cars?: UserCarCreateNestedManyWithoutUserInput
    addresses?: UserAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenUncheckedCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestUncheckedCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestUncheckedCreateNestedManyWithoutUserInput
    cars?: UserCarUncheckedCreateNestedManyWithoutUserInput
    addresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUpdateManyWithoutUserNestedInput
    cars?: UserCarUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUncheckedUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUncheckedUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUncheckedUpdateManyWithoutUserNestedInput
    cars?: UserCarUncheckedUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserModelInterestCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInterestedModelsInput
    carModel: CarModelCreateNestedOneWithoutInterestedUsersInput
  }

  export type UserModelInterestUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    carModelId: string
  }

  export type UserModelInterestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInterestedModelsNestedInput
    carModel?: CarModelUpdateOneRequiredWithoutInterestedUsersNestedInput
  }

  export type UserModelInterestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
  }

  export type UserModelInterestCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    carModelId: string
  }

  export type UserModelInterestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserModelInterestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceInterestCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInterestedDevicesInput
    device: DeviceCreateNestedOneWithoutInterestedUsersInput
  }

  export type UserDeviceInterestUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    deviceId: string
  }

  export type UserDeviceInterestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInterestedDevicesNestedInput
    device?: DeviceUpdateOneRequiredWithoutInterestedUsersNestedInput
  }

  export type UserDeviceInterestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceInterestCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    deviceId: string
  }

  export type UserDeviceInterestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDeviceInterestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type PushTokenCreateInput = {
    id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPushTokensInput
  }

  export type PushTokenUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPushTokensNestedInput
  }

  export type PushTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushTokenCreateManyInput = {
    id?: string
    userId: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCarCreateInput = {
    id?: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCarsInput
    carModel: CarModelCreateNestedOneWithoutUsersInput
  }

  export type UserCarUncheckedCreateInput = {
    id?: string
    userId: string
    carModelId: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCarsNestedInput
    carModel?: CarModelUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserCarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCarCreateManyInput = {
    id?: string
    userId: string
    carModelId: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarCenterCreateInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
    longitude: number
    latitude: number
    address?: string | null
    telephone?: string | null
    email?: string | null
    services?: CarCenterServiceCreateNestedManyWithoutCarCenterInput
  }

  export type CarCenterUncheckedCreateInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
    longitude: number
    latitude: number
    address?: string | null
    telephone?: string | null
    email?: string | null
    services?: CarCenterServiceUncheckedCreateNestedManyWithoutCarCenterInput
  }

  export type CarCenterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    services?: CarCenterServiceUpdateManyWithoutCarCenterNestedInput
  }

  export type CarCenterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    services?: CarCenterServiceUncheckedUpdateManyWithoutCarCenterNestedInput
  }

  export type CarCenterCreateManyInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
    longitude: number
    latitude: number
    address?: string | null
    telephone?: string | null
    email?: string | null
  }

  export type CarCenterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarCenterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarServiceCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    image?: string | null
    updatedAt?: Date | string
    centers?: CarCenterServiceCreateNestedManyWithoutCarServiceInput
  }

  export type CarServiceUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    image?: string | null
    updatedAt?: Date | string
    centers?: CarCenterServiceUncheckedCreateNestedManyWithoutCarServiceInput
  }

  export type CarServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centers?: CarCenterServiceUpdateManyWithoutCarServiceNestedInput
  }

  export type CarServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centers?: CarCenterServiceUncheckedUpdateManyWithoutCarServiceNestedInput
  }

  export type CarServiceCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    image?: string | null
    updatedAt?: Date | string
  }

  export type CarServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarCenterServiceCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carCenter: CarCenterCreateNestedOneWithoutServicesInput
    carService: CarServiceCreateNestedOneWithoutCentersInput
  }

  export type CarCenterServiceUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carCenterId: string
    carServiceId: string
  }

  export type CarCenterServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carCenter?: CarCenterUpdateOneRequiredWithoutServicesNestedInput
    carService?: CarServiceUpdateOneRequiredWithoutCentersNestedInput
  }

  export type CarCenterServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carCenterId?: StringFieldUpdateOperationsInput | string
    carServiceId?: StringFieldUpdateOperationsInput | string
  }

  export type CarCenterServiceCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carCenterId: string
    carServiceId: string
  }

  export type CarCenterServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarCenterServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carCenterId?: StringFieldUpdateOperationsInput | string
    carServiceId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAddressCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
    user: UserCreateNestedOneWithoutAddressesInput
  }

  export type UserAddressUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
  }

  export type UserAddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAddressesNestedInput
  }

  export type UserAddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserAddressCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
  }

  export type UserAddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserAddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CarModelListRelationFilter = {
    every?: CarModelWhereInput
    some?: CarModelWhereInput
    none?: CarModelWhereInput
  }

  export type CarModelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarBrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarBrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarBrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type CarBrandRelationFilter = {
    is?: CarBrandWhereInput | null
    isNot?: CarBrandWhereInput | null
  }

  export type ScrapedCarListRelationFilter = {
    every?: ScrapedCarWhereInput
    some?: ScrapedCarWhereInput
    none?: ScrapedCarWhereInput
  }

  export type DeviceListRelationFilter = {
    every?: DeviceWhereInput
    some?: DeviceWhereInput
    none?: DeviceWhereInput
  }

  export type UserModelInterestListRelationFilter = {
    every?: UserModelInterestWhereInput
    some?: UserModelInterestWhereInput
    none?: UserModelInterestWhereInput
  }

  export type UserCarListRelationFilter = {
    every?: UserCarWhereInput
    some?: UserCarWhereInput
    none?: UserCarWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ScrapedCarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserModelInterestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarModelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brandId?: SortOrder
  }

  export type CarModelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brandId?: SortOrder
  }

  export type CarModelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brandId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrder
    reference?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrder
    reference?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrder
    reference?: SortOrder
  }

  export type DeviceDealerListRelationFilter = {
    every?: DeviceDealerWhereInput
    some?: DeviceDealerWhereInput
    none?: DeviceDealerWhereInput
  }

  export type SectionRelationFilter = {
    is?: SectionWhereInput | null
    isNot?: SectionWhereInput | null
  }

  export type CarModelRelationFilter = {
    is?: CarModelWhereInput | null
    isNot?: CarModelWhereInput | null
  }

  export type UserDeviceInterestListRelationFilter = {
    every?: UserDeviceInterestWhereInput
    some?: UserDeviceInterestWhereInput
    none?: UserDeviceInterestWhereInput
  }

  export type DeviceDealerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserDeviceInterestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sectionId?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrder
    slug?: SortOrder
  }

  export type DeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sectionId?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrder
    slug?: SortOrder
  }

  export type DeviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sectionId?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrder
    slug?: SortOrder
  }

  export type StockListRelationFilter = {
    every?: StockWhereInput
    some?: StockWhereInput
    none?: StockWhereInput
  }

  export type StockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DealerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    website?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    reference?: SortOrder
  }

  export type DealerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    website?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    reference?: SortOrder
  }

  export type DealerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    website?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    reference?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type DealerRelationFilter = {
    is?: DealerWhereInput | null
    isNot?: DealerWhereInput | null
  }

  export type StockCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dealerId?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    openHours?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    longitude?: SortOrder
    latitude?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dealerId?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    openHours?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dealerId?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    openHours?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    longitude?: SortOrder
    latitude?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type StockRelationFilter = {
    is?: StockWhereInput | null
    isNot?: StockWhereInput | null
  }

  export type ScrapedCarCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    images?: SortOrder
    fuel?: SortOrder
    chassis?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrder
    stockId?: SortOrder
    description?: SortOrder
    body?: SortOrder
    mileage?: SortOrder
    modelYear?: SortOrder
  }

  export type ScrapedCarMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    fuel?: SortOrder
    chassis?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrder
    stockId?: SortOrder
    description?: SortOrder
    body?: SortOrder
    mileage?: SortOrder
    modelYear?: SortOrder
  }

  export type ScrapedCarMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    fuel?: SortOrder
    chassis?: SortOrder
    carModelId?: SortOrder
    reference?: SortOrder
    stockId?: SortOrder
    description?: SortOrder
    body?: SortOrder
    mileage?: SortOrder
    modelYear?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type DeviceRelationFilter = {
    is?: DeviceWhereInput | null
    isNot?: DeviceWhereInput | null
  }

  export type DeviceDealerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deviceId?: SortOrder
    dealerId?: SortOrder
    name?: SortOrder
    image?: SortOrder
    images?: SortOrder
    originalNumber?: SortOrder
    manufacturerCode?: SortOrder
    manufacturer?: SortOrder
    reference?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    stockId?: SortOrder
    type?: SortOrder
    subtype?: SortOrder
    description?: SortOrder
    quality?: SortOrder
    articleNumber?: SortOrder
    isUsed?: SortOrder
    status?: SortOrder
    modelYear?: SortOrder
  }

  export type DeviceDealerAvgOrderByAggregateInput = {
    price?: SortOrder
    discount?: SortOrder
  }

  export type DeviceDealerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deviceId?: SortOrder
    dealerId?: SortOrder
    name?: SortOrder
    image?: SortOrder
    originalNumber?: SortOrder
    manufacturerCode?: SortOrder
    manufacturer?: SortOrder
    reference?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    stockId?: SortOrder
    type?: SortOrder
    subtype?: SortOrder
    description?: SortOrder
    quality?: SortOrder
    articleNumber?: SortOrder
    isUsed?: SortOrder
    status?: SortOrder
    modelYear?: SortOrder
  }

  export type DeviceDealerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deviceId?: SortOrder
    dealerId?: SortOrder
    name?: SortOrder
    image?: SortOrder
    originalNumber?: SortOrder
    manufacturerCode?: SortOrder
    manufacturer?: SortOrder
    reference?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    stockId?: SortOrder
    type?: SortOrder
    subtype?: SortOrder
    description?: SortOrder
    quality?: SortOrder
    articleNumber?: SortOrder
    isUsed?: SortOrder
    status?: SortOrder
    modelYear?: SortOrder
  }

  export type DeviceDealerSumOrderByAggregateInput = {
    price?: SortOrder
    discount?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type PushTokenListRelationFilter = {
    every?: PushTokenWhereInput
    some?: PushTokenWhereInput
    none?: PushTokenWhereInput
  }

  export type UserAddressListRelationFilter = {
    every?: UserAddressWhereInput
    some?: UserAddressWhereInput
    none?: UserAddressWhereInput
  }

  export type PushTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    appleId?: SortOrder
    stripeId?: SortOrder
    telephone?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    appleId?: SortOrder
    stripeId?: SortOrder
    telephone?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    appleId?: SortOrder
    stripeId?: SortOrder
    telephone?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserModelInterestCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
  }

  export type UserModelInterestMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
  }

  export type UserModelInterestMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
  }

  export type UserDeviceInterestCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type UserDeviceInterestMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type UserDeviceInterestMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type PushTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCarCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
    registerNumber?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCarMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
    registerNumber?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCarMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carModelId?: SortOrder
    registerNumber?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarCenterServiceListRelationFilter = {
    every?: CarCenterServiceWhereInput
    some?: CarCenterServiceWhereInput
    none?: CarCenterServiceWhereInput
  }

  export type CarCenterServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarCenterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrder
    reference?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
  }

  export type CarCenterAvgOrderByAggregateInput = {
    longitude?: SortOrder
    latitude?: SortOrder
  }

  export type CarCenterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrder
    reference?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
  }

  export type CarCenterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    slug?: SortOrder
    reference?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
  }

  export type CarCenterSumOrderByAggregateInput = {
    longitude?: SortOrder
    latitude?: SortOrder
  }

  export type CarServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarCenterRelationFilter = {
    is?: CarCenterWhereInput | null
    isNot?: CarCenterWhereInput | null
  }

  export type CarServiceRelationFilter = {
    is?: CarServiceWhereInput | null
    isNot?: CarServiceWhereInput | null
  }

  export type CarCenterServiceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reference?: SortOrder
    price?: SortOrder
    description?: SortOrder
    carCenterId?: SortOrder
    carServiceId?: SortOrder
  }

  export type CarCenterServiceAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type CarCenterServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reference?: SortOrder
    price?: SortOrder
    description?: SortOrder
    carCenterId?: SortOrder
    carServiceId?: SortOrder
  }

  export type CarCenterServiceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reference?: SortOrder
    price?: SortOrder
    description?: SortOrder
    carCenterId?: SortOrder
    carServiceId?: SortOrder
  }

  export type CarCenterServiceSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserAddressCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    city?: SortOrder
    country?: SortOrder
    isDefault?: SortOrder
  }

  export type UserAddressAvgOrderByAggregateInput = {
    longitude?: SortOrder
    latitude?: SortOrder
  }

  export type UserAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    city?: SortOrder
    country?: SortOrder
    isDefault?: SortOrder
  }

  export type UserAddressMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    city?: SortOrder
    country?: SortOrder
    isDefault?: SortOrder
  }

  export type UserAddressSumOrderByAggregateInput = {
    longitude?: SortOrder
    latitude?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type CarModelCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<CarModelCreateWithoutBrandInput>, Enumerable<CarModelUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<CarModelCreateOrConnectWithoutBrandInput>
    createMany?: CarModelCreateManyBrandInputEnvelope
    connect?: Enumerable<CarModelWhereUniqueInput>
  }

  export type CarModelUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<CarModelCreateWithoutBrandInput>, Enumerable<CarModelUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<CarModelCreateOrConnectWithoutBrandInput>
    createMany?: CarModelCreateManyBrandInputEnvelope
    connect?: Enumerable<CarModelWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CarModelUpdateManyWithoutBrandNestedInput = {
    create?: XOR<Enumerable<CarModelCreateWithoutBrandInput>, Enumerable<CarModelUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<CarModelCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<CarModelUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: CarModelCreateManyBrandInputEnvelope
    set?: Enumerable<CarModelWhereUniqueInput>
    disconnect?: Enumerable<CarModelWhereUniqueInput>
    delete?: Enumerable<CarModelWhereUniqueInput>
    connect?: Enumerable<CarModelWhereUniqueInput>
    update?: Enumerable<CarModelUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<CarModelUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<CarModelScalarWhereInput>
  }

  export type CarModelUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<Enumerable<CarModelCreateWithoutBrandInput>, Enumerable<CarModelUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<CarModelCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<CarModelUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: CarModelCreateManyBrandInputEnvelope
    set?: Enumerable<CarModelWhereUniqueInput>
    disconnect?: Enumerable<CarModelWhereUniqueInput>
    delete?: Enumerable<CarModelWhereUniqueInput>
    connect?: Enumerable<CarModelWhereUniqueInput>
    update?: Enumerable<CarModelUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<CarModelUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<CarModelScalarWhereInput>
  }

  export type CarBrandCreateNestedOneWithoutModelsInput = {
    create?: XOR<CarBrandCreateWithoutModelsInput, CarBrandUncheckedCreateWithoutModelsInput>
    connectOrCreate?: CarBrandCreateOrConnectWithoutModelsInput
    connect?: CarBrandWhereUniqueInput
  }

  export type ScrapedCarCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutCarModelInput>, Enumerable<ScrapedCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutCarModelInput>
    createMany?: ScrapedCarCreateManyCarModelInputEnvelope
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
  }

  export type DeviceCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutCarModelInput>, Enumerable<DeviceUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutCarModelInput>
    createMany?: DeviceCreateManyCarModelInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type UserModelInterestCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutCarModelInput>, Enumerable<UserModelInterestUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutCarModelInput>
    createMany?: UserModelInterestCreateManyCarModelInputEnvelope
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
  }

  export type UserCarCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutCarModelInput>, Enumerable<UserCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutCarModelInput>
    createMany?: UserCarCreateManyCarModelInputEnvelope
    connect?: Enumerable<UserCarWhereUniqueInput>
  }

  export type ScrapedCarUncheckedCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutCarModelInput>, Enumerable<ScrapedCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutCarModelInput>
    createMany?: ScrapedCarCreateManyCarModelInputEnvelope
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
  }

  export type DeviceUncheckedCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutCarModelInput>, Enumerable<DeviceUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutCarModelInput>
    createMany?: DeviceCreateManyCarModelInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type UserModelInterestUncheckedCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutCarModelInput>, Enumerable<UserModelInterestUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutCarModelInput>
    createMany?: UserModelInterestCreateManyCarModelInputEnvelope
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
  }

  export type UserCarUncheckedCreateNestedManyWithoutCarModelInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutCarModelInput>, Enumerable<UserCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutCarModelInput>
    createMany?: UserCarCreateManyCarModelInputEnvelope
    connect?: Enumerable<UserCarWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CarBrandUpdateOneRequiredWithoutModelsNestedInput = {
    create?: XOR<CarBrandCreateWithoutModelsInput, CarBrandUncheckedCreateWithoutModelsInput>
    connectOrCreate?: CarBrandCreateOrConnectWithoutModelsInput
    upsert?: CarBrandUpsertWithoutModelsInput
    connect?: CarBrandWhereUniqueInput
    update?: XOR<CarBrandUpdateWithoutModelsInput, CarBrandUncheckedUpdateWithoutModelsInput>
  }

  export type ScrapedCarUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutCarModelInput>, Enumerable<ScrapedCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<ScrapedCarUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: ScrapedCarCreateManyCarModelInputEnvelope
    set?: Enumerable<ScrapedCarWhereUniqueInput>
    disconnect?: Enumerable<ScrapedCarWhereUniqueInput>
    delete?: Enumerable<ScrapedCarWhereUniqueInput>
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
    update?: Enumerable<ScrapedCarUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<ScrapedCarUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<ScrapedCarScalarWhereInput>
  }

  export type DeviceUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutCarModelInput>, Enumerable<DeviceUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: DeviceCreateManyCarModelInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type UserModelInterestUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutCarModelInput>, Enumerable<UserModelInterestUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<UserModelInterestUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: UserModelInterestCreateManyCarModelInputEnvelope
    set?: Enumerable<UserModelInterestWhereUniqueInput>
    disconnect?: Enumerable<UserModelInterestWhereUniqueInput>
    delete?: Enumerable<UserModelInterestWhereUniqueInput>
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
    update?: Enumerable<UserModelInterestUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<UserModelInterestUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<UserModelInterestScalarWhereInput>
  }

  export type UserCarUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutCarModelInput>, Enumerable<UserCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<UserCarUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: UserCarCreateManyCarModelInputEnvelope
    set?: Enumerable<UserCarWhereUniqueInput>
    disconnect?: Enumerable<UserCarWhereUniqueInput>
    delete?: Enumerable<UserCarWhereUniqueInput>
    connect?: Enumerable<UserCarWhereUniqueInput>
    update?: Enumerable<UserCarUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<UserCarUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<UserCarScalarWhereInput>
  }

  export type ScrapedCarUncheckedUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutCarModelInput>, Enumerable<ScrapedCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<ScrapedCarUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: ScrapedCarCreateManyCarModelInputEnvelope
    set?: Enumerable<ScrapedCarWhereUniqueInput>
    disconnect?: Enumerable<ScrapedCarWhereUniqueInput>
    delete?: Enumerable<ScrapedCarWhereUniqueInput>
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
    update?: Enumerable<ScrapedCarUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<ScrapedCarUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<ScrapedCarScalarWhereInput>
  }

  export type DeviceUncheckedUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutCarModelInput>, Enumerable<DeviceUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: DeviceCreateManyCarModelInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type UserModelInterestUncheckedUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutCarModelInput>, Enumerable<UserModelInterestUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<UserModelInterestUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: UserModelInterestCreateManyCarModelInputEnvelope
    set?: Enumerable<UserModelInterestWhereUniqueInput>
    disconnect?: Enumerable<UserModelInterestWhereUniqueInput>
    delete?: Enumerable<UserModelInterestWhereUniqueInput>
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
    update?: Enumerable<UserModelInterestUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<UserModelInterestUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<UserModelInterestScalarWhereInput>
  }

  export type UserCarUncheckedUpdateManyWithoutCarModelNestedInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutCarModelInput>, Enumerable<UserCarUncheckedCreateWithoutCarModelInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutCarModelInput>
    upsert?: Enumerable<UserCarUpsertWithWhereUniqueWithoutCarModelInput>
    createMany?: UserCarCreateManyCarModelInputEnvelope
    set?: Enumerable<UserCarWhereUniqueInput>
    disconnect?: Enumerable<UserCarWhereUniqueInput>
    delete?: Enumerable<UserCarWhereUniqueInput>
    connect?: Enumerable<UserCarWhereUniqueInput>
    update?: Enumerable<UserCarUpdateWithWhereUniqueWithoutCarModelInput>
    updateMany?: Enumerable<UserCarUpdateManyWithWhereWithoutCarModelInput>
    deleteMany?: Enumerable<UserCarScalarWhereInput>
  }

  export type DeviceCreateNestedManyWithoutSectionInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutSectionInput>, Enumerable<DeviceUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutSectionInput>
    createMany?: DeviceCreateManySectionInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type DeviceUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutSectionInput>, Enumerable<DeviceUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutSectionInput>
    createMany?: DeviceCreateManySectionInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type DeviceUpdateManyWithoutSectionNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutSectionInput>, Enumerable<DeviceUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutSectionInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutSectionInput>
    createMany?: DeviceCreateManySectionInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutSectionInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutSectionInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type DeviceUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutSectionInput>, Enumerable<DeviceUncheckedCreateWithoutSectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutSectionInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutSectionInput>
    createMany?: DeviceCreateManySectionInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutSectionInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutSectionInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type DeviceDealerCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDeviceInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDeviceInput>
    createMany?: DeviceDealerCreateManyDeviceInputEnvelope
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
  }

  export type SectionCreateNestedOneWithoutDevicesInput = {
    create?: XOR<SectionCreateWithoutDevicesInput, SectionUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: SectionCreateOrConnectWithoutDevicesInput
    connect?: SectionWhereUniqueInput
  }

  export type CarModelCreateNestedOneWithoutDevicesInput = {
    create?: XOR<CarModelCreateWithoutDevicesInput, CarModelUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutDevicesInput
    connect?: CarModelWhereUniqueInput
  }

  export type UserDeviceInterestCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutDeviceInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutDeviceInput>
    createMany?: UserDeviceInterestCreateManyDeviceInputEnvelope
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
  }

  export type DeviceDealerUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDeviceInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDeviceInput>
    createMany?: DeviceDealerCreateManyDeviceInputEnvelope
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
  }

  export type UserDeviceInterestUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutDeviceInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutDeviceInput>
    createMany?: UserDeviceInterestCreateManyDeviceInputEnvelope
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
  }

  export type DeviceDealerUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDeviceInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<DeviceDealerUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: DeviceDealerCreateManyDeviceInputEnvelope
    set?: Enumerable<DeviceDealerWhereUniqueInput>
    disconnect?: Enumerable<DeviceDealerWhereUniqueInput>
    delete?: Enumerable<DeviceDealerWhereUniqueInput>
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
    update?: Enumerable<DeviceDealerUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<DeviceDealerUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<DeviceDealerScalarWhereInput>
  }

  export type SectionUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<SectionCreateWithoutDevicesInput, SectionUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: SectionCreateOrConnectWithoutDevicesInput
    upsert?: SectionUpsertWithoutDevicesInput
    connect?: SectionWhereUniqueInput
    update?: XOR<SectionUpdateWithoutDevicesInput, SectionUncheckedUpdateWithoutDevicesInput>
  }

  export type CarModelUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<CarModelCreateWithoutDevicesInput, CarModelUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutDevicesInput
    upsert?: CarModelUpsertWithoutDevicesInput
    connect?: CarModelWhereUniqueInput
    update?: XOR<CarModelUpdateWithoutDevicesInput, CarModelUncheckedUpdateWithoutDevicesInput>
  }

  export type UserDeviceInterestUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutDeviceInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<UserDeviceInterestUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: UserDeviceInterestCreateManyDeviceInputEnvelope
    set?: Enumerable<UserDeviceInterestWhereUniqueInput>
    disconnect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    delete?: Enumerable<UserDeviceInterestWhereUniqueInput>
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    update?: Enumerable<UserDeviceInterestUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<UserDeviceInterestUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<UserDeviceInterestScalarWhereInput>
  }

  export type DeviceDealerUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDeviceInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<DeviceDealerUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: DeviceDealerCreateManyDeviceInputEnvelope
    set?: Enumerable<DeviceDealerWhereUniqueInput>
    disconnect?: Enumerable<DeviceDealerWhereUniqueInput>
    delete?: Enumerable<DeviceDealerWhereUniqueInput>
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
    update?: Enumerable<DeviceDealerUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<DeviceDealerUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<DeviceDealerScalarWhereInput>
  }

  export type UserDeviceInterestUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutDeviceInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<UserDeviceInterestUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: UserDeviceInterestCreateManyDeviceInputEnvelope
    set?: Enumerable<UserDeviceInterestWhereUniqueInput>
    disconnect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    delete?: Enumerable<UserDeviceInterestWhereUniqueInput>
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    update?: Enumerable<UserDeviceInterestUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<UserDeviceInterestUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<UserDeviceInterestScalarWhereInput>
  }

  export type DeviceDealerCreateNestedManyWithoutDealerInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDealerInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDealerInput>
    createMany?: DeviceDealerCreateManyDealerInputEnvelope
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
  }

  export type StockCreateNestedManyWithoutDealerInput = {
    create?: XOR<Enumerable<StockCreateWithoutDealerInput>, Enumerable<StockUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<StockCreateOrConnectWithoutDealerInput>
    createMany?: StockCreateManyDealerInputEnvelope
    connect?: Enumerable<StockWhereUniqueInput>
  }

  export type DeviceDealerUncheckedCreateNestedManyWithoutDealerInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDealerInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDealerInput>
    createMany?: DeviceDealerCreateManyDealerInputEnvelope
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
  }

  export type StockUncheckedCreateNestedManyWithoutDealerInput = {
    create?: XOR<Enumerable<StockCreateWithoutDealerInput>, Enumerable<StockUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<StockCreateOrConnectWithoutDealerInput>
    createMany?: StockCreateManyDealerInputEnvelope
    connect?: Enumerable<StockWhereUniqueInput>
  }

  export type DeviceDealerUpdateManyWithoutDealerNestedInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDealerInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDealerInput>
    upsert?: Enumerable<DeviceDealerUpsertWithWhereUniqueWithoutDealerInput>
    createMany?: DeviceDealerCreateManyDealerInputEnvelope
    set?: Enumerable<DeviceDealerWhereUniqueInput>
    disconnect?: Enumerable<DeviceDealerWhereUniqueInput>
    delete?: Enumerable<DeviceDealerWhereUniqueInput>
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
    update?: Enumerable<DeviceDealerUpdateWithWhereUniqueWithoutDealerInput>
    updateMany?: Enumerable<DeviceDealerUpdateManyWithWhereWithoutDealerInput>
    deleteMany?: Enumerable<DeviceDealerScalarWhereInput>
  }

  export type StockUpdateManyWithoutDealerNestedInput = {
    create?: XOR<Enumerable<StockCreateWithoutDealerInput>, Enumerable<StockUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<StockCreateOrConnectWithoutDealerInput>
    upsert?: Enumerable<StockUpsertWithWhereUniqueWithoutDealerInput>
    createMany?: StockCreateManyDealerInputEnvelope
    set?: Enumerable<StockWhereUniqueInput>
    disconnect?: Enumerable<StockWhereUniqueInput>
    delete?: Enumerable<StockWhereUniqueInput>
    connect?: Enumerable<StockWhereUniqueInput>
    update?: Enumerable<StockUpdateWithWhereUniqueWithoutDealerInput>
    updateMany?: Enumerable<StockUpdateManyWithWhereWithoutDealerInput>
    deleteMany?: Enumerable<StockScalarWhereInput>
  }

  export type DeviceDealerUncheckedUpdateManyWithoutDealerNestedInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutDealerInput>, Enumerable<DeviceDealerUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutDealerInput>
    upsert?: Enumerable<DeviceDealerUpsertWithWhereUniqueWithoutDealerInput>
    createMany?: DeviceDealerCreateManyDealerInputEnvelope
    set?: Enumerable<DeviceDealerWhereUniqueInput>
    disconnect?: Enumerable<DeviceDealerWhereUniqueInput>
    delete?: Enumerable<DeviceDealerWhereUniqueInput>
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
    update?: Enumerable<DeviceDealerUpdateWithWhereUniqueWithoutDealerInput>
    updateMany?: Enumerable<DeviceDealerUpdateManyWithWhereWithoutDealerInput>
    deleteMany?: Enumerable<DeviceDealerScalarWhereInput>
  }

  export type StockUncheckedUpdateManyWithoutDealerNestedInput = {
    create?: XOR<Enumerable<StockCreateWithoutDealerInput>, Enumerable<StockUncheckedCreateWithoutDealerInput>>
    connectOrCreate?: Enumerable<StockCreateOrConnectWithoutDealerInput>
    upsert?: Enumerable<StockUpsertWithWhereUniqueWithoutDealerInput>
    createMany?: StockCreateManyDealerInputEnvelope
    set?: Enumerable<StockWhereUniqueInput>
    disconnect?: Enumerable<StockWhereUniqueInput>
    delete?: Enumerable<StockWhereUniqueInput>
    connect?: Enumerable<StockWhereUniqueInput>
    update?: Enumerable<StockUpdateWithWhereUniqueWithoutDealerInput>
    updateMany?: Enumerable<StockUpdateManyWithWhereWithoutDealerInput>
    deleteMany?: Enumerable<StockScalarWhereInput>
  }

  export type DeviceDealerCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutStockInput>, Enumerable<DeviceDealerUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutStockInput>
    createMany?: DeviceDealerCreateManyStockInputEnvelope
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
  }

  export type DealerCreateNestedOneWithoutStocksInput = {
    create?: XOR<DealerCreateWithoutStocksInput, DealerUncheckedCreateWithoutStocksInput>
    connectOrCreate?: DealerCreateOrConnectWithoutStocksInput
    connect?: DealerWhereUniqueInput
  }

  export type ScrapedCarCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutStockInput>, Enumerable<ScrapedCarUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutStockInput>
    createMany?: ScrapedCarCreateManyStockInputEnvelope
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
  }

  export type DeviceDealerUncheckedCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutStockInput>, Enumerable<DeviceDealerUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutStockInput>
    createMany?: DeviceDealerCreateManyStockInputEnvelope
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
  }

  export type ScrapedCarUncheckedCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutStockInput>, Enumerable<ScrapedCarUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutStockInput>
    createMany?: ScrapedCarCreateManyStockInputEnvelope
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DeviceDealerUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutStockInput>, Enumerable<DeviceDealerUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<DeviceDealerUpsertWithWhereUniqueWithoutStockInput>
    createMany?: DeviceDealerCreateManyStockInputEnvelope
    set?: Enumerable<DeviceDealerWhereUniqueInput>
    disconnect?: Enumerable<DeviceDealerWhereUniqueInput>
    delete?: Enumerable<DeviceDealerWhereUniqueInput>
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
    update?: Enumerable<DeviceDealerUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<DeviceDealerUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<DeviceDealerScalarWhereInput>
  }

  export type DealerUpdateOneRequiredWithoutStocksNestedInput = {
    create?: XOR<DealerCreateWithoutStocksInput, DealerUncheckedCreateWithoutStocksInput>
    connectOrCreate?: DealerCreateOrConnectWithoutStocksInput
    upsert?: DealerUpsertWithoutStocksInput
    connect?: DealerWhereUniqueInput
    update?: XOR<DealerUpdateWithoutStocksInput, DealerUncheckedUpdateWithoutStocksInput>
  }

  export type ScrapedCarUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutStockInput>, Enumerable<ScrapedCarUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<ScrapedCarUpsertWithWhereUniqueWithoutStockInput>
    createMany?: ScrapedCarCreateManyStockInputEnvelope
    set?: Enumerable<ScrapedCarWhereUniqueInput>
    disconnect?: Enumerable<ScrapedCarWhereUniqueInput>
    delete?: Enumerable<ScrapedCarWhereUniqueInput>
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
    update?: Enumerable<ScrapedCarUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<ScrapedCarUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<ScrapedCarScalarWhereInput>
  }

  export type DeviceDealerUncheckedUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<DeviceDealerCreateWithoutStockInput>, Enumerable<DeviceDealerUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<DeviceDealerCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<DeviceDealerUpsertWithWhereUniqueWithoutStockInput>
    createMany?: DeviceDealerCreateManyStockInputEnvelope
    set?: Enumerable<DeviceDealerWhereUniqueInput>
    disconnect?: Enumerable<DeviceDealerWhereUniqueInput>
    delete?: Enumerable<DeviceDealerWhereUniqueInput>
    connect?: Enumerable<DeviceDealerWhereUniqueInput>
    update?: Enumerable<DeviceDealerUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<DeviceDealerUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<DeviceDealerScalarWhereInput>
  }

  export type ScrapedCarUncheckedUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<ScrapedCarCreateWithoutStockInput>, Enumerable<ScrapedCarUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<ScrapedCarCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<ScrapedCarUpsertWithWhereUniqueWithoutStockInput>
    createMany?: ScrapedCarCreateManyStockInputEnvelope
    set?: Enumerable<ScrapedCarWhereUniqueInput>
    disconnect?: Enumerable<ScrapedCarWhereUniqueInput>
    delete?: Enumerable<ScrapedCarWhereUniqueInput>
    connect?: Enumerable<ScrapedCarWhereUniqueInput>
    update?: Enumerable<ScrapedCarUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<ScrapedCarUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<ScrapedCarScalarWhereInput>
  }

  export type ScrapedCarCreateimagesInput = {
    set: Enumerable<string>
  }

  export type CarModelCreateNestedOneWithoutScrapedCarsInput = {
    create?: XOR<CarModelCreateWithoutScrapedCarsInput, CarModelUncheckedCreateWithoutScrapedCarsInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutScrapedCarsInput
    connect?: CarModelWhereUniqueInput
  }

  export type StockCreateNestedOneWithoutScrapedCarInput = {
    create?: XOR<StockCreateWithoutScrapedCarInput, StockUncheckedCreateWithoutScrapedCarInput>
    connectOrCreate?: StockCreateOrConnectWithoutScrapedCarInput
    connect?: StockWhereUniqueInput
  }

  export type ScrapedCarUpdateimagesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type CarModelUpdateOneRequiredWithoutScrapedCarsNestedInput = {
    create?: XOR<CarModelCreateWithoutScrapedCarsInput, CarModelUncheckedCreateWithoutScrapedCarsInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutScrapedCarsInput
    upsert?: CarModelUpsertWithoutScrapedCarsInput
    connect?: CarModelWhereUniqueInput
    update?: XOR<CarModelUpdateWithoutScrapedCarsInput, CarModelUncheckedUpdateWithoutScrapedCarsInput>
  }

  export type StockUpdateOneWithoutScrapedCarNestedInput = {
    create?: XOR<StockCreateWithoutScrapedCarInput, StockUncheckedCreateWithoutScrapedCarInput>
    connectOrCreate?: StockCreateOrConnectWithoutScrapedCarInput
    upsert?: StockUpsertWithoutScrapedCarInput
    disconnect?: boolean
    delete?: boolean
    connect?: StockWhereUniqueInput
    update?: XOR<StockUpdateWithoutScrapedCarInput, StockUncheckedUpdateWithoutScrapedCarInput>
  }

  export type DeviceDealerCreateimagesInput = {
    set: Enumerable<string>
  }

  export type DeviceCreateNestedOneWithoutDealersInput = {
    create?: XOR<DeviceCreateWithoutDealersInput, DeviceUncheckedCreateWithoutDealersInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutDealersInput
    connect?: DeviceWhereUniqueInput
  }

  export type DealerCreateNestedOneWithoutDevicesInput = {
    create?: XOR<DealerCreateWithoutDevicesInput, DealerUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: DealerCreateOrConnectWithoutDevicesInput
    connect?: DealerWhereUniqueInput
  }

  export type StockCreateNestedOneWithoutDevicesInput = {
    create?: XOR<StockCreateWithoutDevicesInput, StockUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: StockCreateOrConnectWithoutDevicesInput
    connect?: StockWhereUniqueInput
  }

  export type DeviceDealerUpdateimagesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DeviceUpdateOneRequiredWithoutDealersNestedInput = {
    create?: XOR<DeviceCreateWithoutDealersInput, DeviceUncheckedCreateWithoutDealersInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutDealersInput
    upsert?: DeviceUpsertWithoutDealersInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<DeviceUpdateWithoutDealersInput, DeviceUncheckedUpdateWithoutDealersInput>
  }

  export type DealerUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<DealerCreateWithoutDevicesInput, DealerUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: DealerCreateOrConnectWithoutDevicesInput
    upsert?: DealerUpsertWithoutDevicesInput
    connect?: DealerWhereUniqueInput
    update?: XOR<DealerUpdateWithoutDevicesInput, DealerUncheckedUpdateWithoutDevicesInput>
  }

  export type StockUpdateOneWithoutDevicesNestedInput = {
    create?: XOR<StockCreateWithoutDevicesInput, StockUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: StockCreateOrConnectWithoutDevicesInput
    upsert?: StockUpsertWithoutDevicesInput
    disconnect?: boolean
    delete?: boolean
    connect?: StockWhereUniqueInput
    update?: XOR<StockUpdateWithoutDevicesInput, StockUncheckedUpdateWithoutDevicesInput>
  }

  export type PushTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PushTokenCreateWithoutUserInput>, Enumerable<PushTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PushTokenCreateOrConnectWithoutUserInput>
    createMany?: PushTokenCreateManyUserInputEnvelope
    connect?: Enumerable<PushTokenWhereUniqueInput>
  }

  export type UserModelInterestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutUserInput>, Enumerable<UserModelInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutUserInput>
    createMany?: UserModelInterestCreateManyUserInputEnvelope
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
  }

  export type UserDeviceInterestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutUserInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutUserInput>
    createMany?: UserDeviceInterestCreateManyUserInputEnvelope
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
  }

  export type UserCarCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutUserInput>, Enumerable<UserCarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutUserInput>
    createMany?: UserCarCreateManyUserInputEnvelope
    connect?: Enumerable<UserCarWhereUniqueInput>
  }

  export type UserAddressCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    connect?: Enumerable<UserAddressWhereUniqueInput>
  }

  export type PushTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PushTokenCreateWithoutUserInput>, Enumerable<PushTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PushTokenCreateOrConnectWithoutUserInput>
    createMany?: PushTokenCreateManyUserInputEnvelope
    connect?: Enumerable<PushTokenWhereUniqueInput>
  }

  export type UserModelInterestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutUserInput>, Enumerable<UserModelInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutUserInput>
    createMany?: UserModelInterestCreateManyUserInputEnvelope
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
  }

  export type UserDeviceInterestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutUserInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutUserInput>
    createMany?: UserDeviceInterestCreateManyUserInputEnvelope
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
  }

  export type UserCarUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutUserInput>, Enumerable<UserCarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutUserInput>
    createMany?: UserCarCreateManyUserInputEnvelope
    connect?: Enumerable<UserCarWhereUniqueInput>
  }

  export type UserAddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    connect?: Enumerable<UserAddressWhereUniqueInput>
  }

  export type PushTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PushTokenCreateWithoutUserInput>, Enumerable<PushTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PushTokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PushTokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PushTokenCreateManyUserInputEnvelope
    set?: Enumerable<PushTokenWhereUniqueInput>
    disconnect?: Enumerable<PushTokenWhereUniqueInput>
    delete?: Enumerable<PushTokenWhereUniqueInput>
    connect?: Enumerable<PushTokenWhereUniqueInput>
    update?: Enumerable<PushTokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PushTokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PushTokenScalarWhereInput>
  }

  export type UserModelInterestUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutUserInput>, Enumerable<UserModelInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserModelInterestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserModelInterestCreateManyUserInputEnvelope
    set?: Enumerable<UserModelInterestWhereUniqueInput>
    disconnect?: Enumerable<UserModelInterestWhereUniqueInput>
    delete?: Enumerable<UserModelInterestWhereUniqueInput>
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
    update?: Enumerable<UserModelInterestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserModelInterestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserModelInterestScalarWhereInput>
  }

  export type UserDeviceInterestUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutUserInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserDeviceInterestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserDeviceInterestCreateManyUserInputEnvelope
    set?: Enumerable<UserDeviceInterestWhereUniqueInput>
    disconnect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    delete?: Enumerable<UserDeviceInterestWhereUniqueInput>
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    update?: Enumerable<UserDeviceInterestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserDeviceInterestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserDeviceInterestScalarWhereInput>
  }

  export type UserCarUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutUserInput>, Enumerable<UserCarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserCarUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserCarCreateManyUserInputEnvelope
    set?: Enumerable<UserCarWhereUniqueInput>
    disconnect?: Enumerable<UserCarWhereUniqueInput>
    delete?: Enumerable<UserCarWhereUniqueInput>
    connect?: Enumerable<UserCarWhereUniqueInput>
    update?: Enumerable<UserCarUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserCarUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserCarScalarWhereInput>
  }

  export type UserAddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    set?: Enumerable<UserAddressWhereUniqueInput>
    disconnect?: Enumerable<UserAddressWhereUniqueInput>
    delete?: Enumerable<UserAddressWhereUniqueInput>
    connect?: Enumerable<UserAddressWhereUniqueInput>
    update?: Enumerable<UserAddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAddressScalarWhereInput>
  }

  export type PushTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PushTokenCreateWithoutUserInput>, Enumerable<PushTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PushTokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PushTokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PushTokenCreateManyUserInputEnvelope
    set?: Enumerable<PushTokenWhereUniqueInput>
    disconnect?: Enumerable<PushTokenWhereUniqueInput>
    delete?: Enumerable<PushTokenWhereUniqueInput>
    connect?: Enumerable<PushTokenWhereUniqueInput>
    update?: Enumerable<PushTokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PushTokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PushTokenScalarWhereInput>
  }

  export type UserModelInterestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserModelInterestCreateWithoutUserInput>, Enumerable<UserModelInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserModelInterestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserModelInterestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserModelInterestCreateManyUserInputEnvelope
    set?: Enumerable<UserModelInterestWhereUniqueInput>
    disconnect?: Enumerable<UserModelInterestWhereUniqueInput>
    delete?: Enumerable<UserModelInterestWhereUniqueInput>
    connect?: Enumerable<UserModelInterestWhereUniqueInput>
    update?: Enumerable<UserModelInterestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserModelInterestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserModelInterestScalarWhereInput>
  }

  export type UserDeviceInterestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserDeviceInterestCreateWithoutUserInput>, Enumerable<UserDeviceInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserDeviceInterestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserDeviceInterestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserDeviceInterestCreateManyUserInputEnvelope
    set?: Enumerable<UserDeviceInterestWhereUniqueInput>
    disconnect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    delete?: Enumerable<UserDeviceInterestWhereUniqueInput>
    connect?: Enumerable<UserDeviceInterestWhereUniqueInput>
    update?: Enumerable<UserDeviceInterestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserDeviceInterestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserDeviceInterestScalarWhereInput>
  }

  export type UserCarUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserCarCreateWithoutUserInput>, Enumerable<UserCarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserCarCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserCarUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserCarCreateManyUserInputEnvelope
    set?: Enumerable<UserCarWhereUniqueInput>
    disconnect?: Enumerable<UserCarWhereUniqueInput>
    delete?: Enumerable<UserCarWhereUniqueInput>
    connect?: Enumerable<UserCarWhereUniqueInput>
    update?: Enumerable<UserCarUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserCarUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserCarScalarWhereInput>
  }

  export type UserAddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    set?: Enumerable<UserAddressWhereUniqueInput>
    disconnect?: Enumerable<UserAddressWhereUniqueInput>
    delete?: Enumerable<UserAddressWhereUniqueInput>
    connect?: Enumerable<UserAddressWhereUniqueInput>
    update?: Enumerable<UserAddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAddressScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutInterestedModelsInput = {
    create?: XOR<UserCreateWithoutInterestedModelsInput, UserUncheckedCreateWithoutInterestedModelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterestedModelsInput
    connect?: UserWhereUniqueInput
  }

  export type CarModelCreateNestedOneWithoutInterestedUsersInput = {
    create?: XOR<CarModelCreateWithoutInterestedUsersInput, CarModelUncheckedCreateWithoutInterestedUsersInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutInterestedUsersInput
    connect?: CarModelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInterestedModelsNestedInput = {
    create?: XOR<UserCreateWithoutInterestedModelsInput, UserUncheckedCreateWithoutInterestedModelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterestedModelsInput
    upsert?: UserUpsertWithoutInterestedModelsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInterestedModelsInput, UserUncheckedUpdateWithoutInterestedModelsInput>
  }

  export type CarModelUpdateOneRequiredWithoutInterestedUsersNestedInput = {
    create?: XOR<CarModelCreateWithoutInterestedUsersInput, CarModelUncheckedCreateWithoutInterestedUsersInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutInterestedUsersInput
    upsert?: CarModelUpsertWithoutInterestedUsersInput
    connect?: CarModelWhereUniqueInput
    update?: XOR<CarModelUpdateWithoutInterestedUsersInput, CarModelUncheckedUpdateWithoutInterestedUsersInput>
  }

  export type UserCreateNestedOneWithoutInterestedDevicesInput = {
    create?: XOR<UserCreateWithoutInterestedDevicesInput, UserUncheckedCreateWithoutInterestedDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterestedDevicesInput
    connect?: UserWhereUniqueInput
  }

  export type DeviceCreateNestedOneWithoutInterestedUsersInput = {
    create?: XOR<DeviceCreateWithoutInterestedUsersInput, DeviceUncheckedCreateWithoutInterestedUsersInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutInterestedUsersInput
    connect?: DeviceWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInterestedDevicesNestedInput = {
    create?: XOR<UserCreateWithoutInterestedDevicesInput, UserUncheckedCreateWithoutInterestedDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterestedDevicesInput
    upsert?: UserUpsertWithoutInterestedDevicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInterestedDevicesInput, UserUncheckedUpdateWithoutInterestedDevicesInput>
  }

  export type DeviceUpdateOneRequiredWithoutInterestedUsersNestedInput = {
    create?: XOR<DeviceCreateWithoutInterestedUsersInput, DeviceUncheckedCreateWithoutInterestedUsersInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutInterestedUsersInput
    upsert?: DeviceUpsertWithoutInterestedUsersInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<DeviceUpdateWithoutInterestedUsersInput, DeviceUncheckedUpdateWithoutInterestedUsersInput>
  }

  export type UserCreateNestedOneWithoutPushTokensInput = {
    create?: XOR<UserCreateWithoutPushTokensInput, UserUncheckedCreateWithoutPushTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPushTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPushTokensNestedInput = {
    create?: XOR<UserCreateWithoutPushTokensInput, UserUncheckedCreateWithoutPushTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPushTokensInput
    upsert?: UserUpsertWithoutPushTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPushTokensInput, UserUncheckedUpdateWithoutPushTokensInput>
  }

  export type UserCreateNestedOneWithoutCarsInput = {
    create?: XOR<UserCreateWithoutCarsInput, UserUncheckedCreateWithoutCarsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCarsInput
    connect?: UserWhereUniqueInput
  }

  export type CarModelCreateNestedOneWithoutUsersInput = {
    create?: XOR<CarModelCreateWithoutUsersInput, CarModelUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutUsersInput
    connect?: CarModelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCarsNestedInput = {
    create?: XOR<UserCreateWithoutCarsInput, UserUncheckedCreateWithoutCarsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCarsInput
    upsert?: UserUpsertWithoutCarsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCarsInput, UserUncheckedUpdateWithoutCarsInput>
  }

  export type CarModelUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<CarModelCreateWithoutUsersInput, CarModelUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CarModelCreateOrConnectWithoutUsersInput
    upsert?: CarModelUpsertWithoutUsersInput
    connect?: CarModelWhereUniqueInput
    update?: XOR<CarModelUpdateWithoutUsersInput, CarModelUncheckedUpdateWithoutUsersInput>
  }

  export type CarCenterServiceCreateNestedManyWithoutCarCenterInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarCenterInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarCenterInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarCenterInput>
    createMany?: CarCenterServiceCreateManyCarCenterInputEnvelope
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
  }

  export type CarCenterServiceUncheckedCreateNestedManyWithoutCarCenterInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarCenterInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarCenterInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarCenterInput>
    createMany?: CarCenterServiceCreateManyCarCenterInputEnvelope
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
  }

  export type CarCenterServiceUpdateManyWithoutCarCenterNestedInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarCenterInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarCenterInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarCenterInput>
    upsert?: Enumerable<CarCenterServiceUpsertWithWhereUniqueWithoutCarCenterInput>
    createMany?: CarCenterServiceCreateManyCarCenterInputEnvelope
    set?: Enumerable<CarCenterServiceWhereUniqueInput>
    disconnect?: Enumerable<CarCenterServiceWhereUniqueInput>
    delete?: Enumerable<CarCenterServiceWhereUniqueInput>
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
    update?: Enumerable<CarCenterServiceUpdateWithWhereUniqueWithoutCarCenterInput>
    updateMany?: Enumerable<CarCenterServiceUpdateManyWithWhereWithoutCarCenterInput>
    deleteMany?: Enumerable<CarCenterServiceScalarWhereInput>
  }

  export type CarCenterServiceUncheckedUpdateManyWithoutCarCenterNestedInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarCenterInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarCenterInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarCenterInput>
    upsert?: Enumerable<CarCenterServiceUpsertWithWhereUniqueWithoutCarCenterInput>
    createMany?: CarCenterServiceCreateManyCarCenterInputEnvelope
    set?: Enumerable<CarCenterServiceWhereUniqueInput>
    disconnect?: Enumerable<CarCenterServiceWhereUniqueInput>
    delete?: Enumerable<CarCenterServiceWhereUniqueInput>
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
    update?: Enumerable<CarCenterServiceUpdateWithWhereUniqueWithoutCarCenterInput>
    updateMany?: Enumerable<CarCenterServiceUpdateManyWithWhereWithoutCarCenterInput>
    deleteMany?: Enumerable<CarCenterServiceScalarWhereInput>
  }

  export type CarCenterServiceCreateNestedManyWithoutCarServiceInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarServiceInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarServiceInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarServiceInput>
    createMany?: CarCenterServiceCreateManyCarServiceInputEnvelope
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
  }

  export type CarCenterServiceUncheckedCreateNestedManyWithoutCarServiceInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarServiceInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarServiceInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarServiceInput>
    createMany?: CarCenterServiceCreateManyCarServiceInputEnvelope
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
  }

  export type CarCenterServiceUpdateManyWithoutCarServiceNestedInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarServiceInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarServiceInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarServiceInput>
    upsert?: Enumerable<CarCenterServiceUpsertWithWhereUniqueWithoutCarServiceInput>
    createMany?: CarCenterServiceCreateManyCarServiceInputEnvelope
    set?: Enumerable<CarCenterServiceWhereUniqueInput>
    disconnect?: Enumerable<CarCenterServiceWhereUniqueInput>
    delete?: Enumerable<CarCenterServiceWhereUniqueInput>
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
    update?: Enumerable<CarCenterServiceUpdateWithWhereUniqueWithoutCarServiceInput>
    updateMany?: Enumerable<CarCenterServiceUpdateManyWithWhereWithoutCarServiceInput>
    deleteMany?: Enumerable<CarCenterServiceScalarWhereInput>
  }

  export type CarCenterServiceUncheckedUpdateManyWithoutCarServiceNestedInput = {
    create?: XOR<Enumerable<CarCenterServiceCreateWithoutCarServiceInput>, Enumerable<CarCenterServiceUncheckedCreateWithoutCarServiceInput>>
    connectOrCreate?: Enumerable<CarCenterServiceCreateOrConnectWithoutCarServiceInput>
    upsert?: Enumerable<CarCenterServiceUpsertWithWhereUniqueWithoutCarServiceInput>
    createMany?: CarCenterServiceCreateManyCarServiceInputEnvelope
    set?: Enumerable<CarCenterServiceWhereUniqueInput>
    disconnect?: Enumerable<CarCenterServiceWhereUniqueInput>
    delete?: Enumerable<CarCenterServiceWhereUniqueInput>
    connect?: Enumerable<CarCenterServiceWhereUniqueInput>
    update?: Enumerable<CarCenterServiceUpdateWithWhereUniqueWithoutCarServiceInput>
    updateMany?: Enumerable<CarCenterServiceUpdateManyWithWhereWithoutCarServiceInput>
    deleteMany?: Enumerable<CarCenterServiceScalarWhereInput>
  }

  export type CarCenterCreateNestedOneWithoutServicesInput = {
    create?: XOR<CarCenterCreateWithoutServicesInput, CarCenterUncheckedCreateWithoutServicesInput>
    connectOrCreate?: CarCenterCreateOrConnectWithoutServicesInput
    connect?: CarCenterWhereUniqueInput
  }

  export type CarServiceCreateNestedOneWithoutCentersInput = {
    create?: XOR<CarServiceCreateWithoutCentersInput, CarServiceUncheckedCreateWithoutCentersInput>
    connectOrCreate?: CarServiceCreateOrConnectWithoutCentersInput
    connect?: CarServiceWhereUniqueInput
  }

  export type CarCenterUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<CarCenterCreateWithoutServicesInput, CarCenterUncheckedCreateWithoutServicesInput>
    connectOrCreate?: CarCenterCreateOrConnectWithoutServicesInput
    upsert?: CarCenterUpsertWithoutServicesInput
    connect?: CarCenterWhereUniqueInput
    update?: XOR<CarCenterUpdateWithoutServicesInput, CarCenterUncheckedUpdateWithoutServicesInput>
  }

  export type CarServiceUpdateOneRequiredWithoutCentersNestedInput = {
    create?: XOR<CarServiceCreateWithoutCentersInput, CarServiceUncheckedCreateWithoutCentersInput>
    connectOrCreate?: CarServiceCreateOrConnectWithoutCentersInput
    upsert?: CarServiceUpsertWithoutCentersInput
    connect?: CarServiceWhereUniqueInput
    update?: XOR<CarServiceUpdateWithoutCentersInput, CarServiceUncheckedUpdateWithoutCentersInput>
  }

  export type UserCreateNestedOneWithoutAddressesInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutAddressesNestedInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    upsert?: UserUpsertWithoutAddressesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type CarModelCreateWithoutBrandInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scrapedCars?: ScrapedCarCreateNestedManyWithoutCarModelInput
    devices?: DeviceCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestCreateNestedManyWithoutCarModelInput
    users?: UserCarCreateNestedManyWithoutCarModelInput
  }

  export type CarModelUncheckedCreateWithoutBrandInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scrapedCars?: ScrapedCarUncheckedCreateNestedManyWithoutCarModelInput
    devices?: DeviceUncheckedCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestUncheckedCreateNestedManyWithoutCarModelInput
    users?: UserCarUncheckedCreateNestedManyWithoutCarModelInput
  }

  export type CarModelCreateOrConnectWithoutBrandInput = {
    where: CarModelWhereUniqueInput
    create: XOR<CarModelCreateWithoutBrandInput, CarModelUncheckedCreateWithoutBrandInput>
  }

  export type CarModelCreateManyBrandInputEnvelope = {
    data: Enumerable<CarModelCreateManyBrandInput>
    skipDuplicates?: boolean
  }

  export type CarModelUpsertWithWhereUniqueWithoutBrandInput = {
    where: CarModelWhereUniqueInput
    update: XOR<CarModelUpdateWithoutBrandInput, CarModelUncheckedUpdateWithoutBrandInput>
    create: XOR<CarModelCreateWithoutBrandInput, CarModelUncheckedCreateWithoutBrandInput>
  }

  export type CarModelUpdateWithWhereUniqueWithoutBrandInput = {
    where: CarModelWhereUniqueInput
    data: XOR<CarModelUpdateWithoutBrandInput, CarModelUncheckedUpdateWithoutBrandInput>
  }

  export type CarModelUpdateManyWithWhereWithoutBrandInput = {
    where: CarModelScalarWhereInput
    data: XOR<CarModelUpdateManyMutationInput, CarModelUncheckedUpdateManyWithoutModelsInput>
  }

  export type CarModelScalarWhereInput = {
    AND?: Enumerable<CarModelScalarWhereInput>
    OR?: Enumerable<CarModelScalarWhereInput>
    NOT?: Enumerable<CarModelScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    reference?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    brandId?: StringFilter | string
  }

  export type CarBrandCreateWithoutModelsInput = {
    id?: string
    name: string
    logo: string
    reference: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarBrandUncheckedCreateWithoutModelsInput = {
    id?: string
    name: string
    logo: string
    reference: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarBrandCreateOrConnectWithoutModelsInput = {
    where: CarBrandWhereUniqueInput
    create: XOR<CarBrandCreateWithoutModelsInput, CarBrandUncheckedCreateWithoutModelsInput>
  }

  export type ScrapedCarCreateWithoutCarModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    reference?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
    Stock?: StockCreateNestedOneWithoutScrapedCarInput
  }

  export type ScrapedCarUncheckedCreateWithoutCarModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    reference?: string | null
    stockId?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
  }

  export type ScrapedCarCreateOrConnectWithoutCarModelInput = {
    where: ScrapedCarWhereUniqueInput
    create: XOR<ScrapedCarCreateWithoutCarModelInput, ScrapedCarUncheckedCreateWithoutCarModelInput>
  }

  export type ScrapedCarCreateManyCarModelInputEnvelope = {
    data: Enumerable<ScrapedCarCreateManyCarModelInput>
    skipDuplicates?: boolean
  }

  export type DeviceCreateWithoutCarModelInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerCreateNestedManyWithoutDeviceInput
    section: SectionCreateNestedOneWithoutDevicesInput
    interestedUsers?: UserDeviceInterestCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutCarModelInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionId: string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerUncheckedCreateNestedManyWithoutDeviceInput
    interestedUsers?: UserDeviceInterestUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutCarModelInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutCarModelInput, DeviceUncheckedCreateWithoutCarModelInput>
  }

  export type DeviceCreateManyCarModelInputEnvelope = {
    data: Enumerable<DeviceCreateManyCarModelInput>
    skipDuplicates?: boolean
  }

  export type UserModelInterestCreateWithoutCarModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInterestedModelsInput
  }

  export type UserModelInterestUncheckedCreateWithoutCarModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UserModelInterestCreateOrConnectWithoutCarModelInput = {
    where: UserModelInterestWhereUniqueInput
    create: XOR<UserModelInterestCreateWithoutCarModelInput, UserModelInterestUncheckedCreateWithoutCarModelInput>
  }

  export type UserModelInterestCreateManyCarModelInputEnvelope = {
    data: Enumerable<UserModelInterestCreateManyCarModelInput>
    skipDuplicates?: boolean
  }

  export type UserCarCreateWithoutCarModelInput = {
    id?: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCarsInput
  }

  export type UserCarUncheckedCreateWithoutCarModelInput = {
    id?: string
    userId: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCarCreateOrConnectWithoutCarModelInput = {
    where: UserCarWhereUniqueInput
    create: XOR<UserCarCreateWithoutCarModelInput, UserCarUncheckedCreateWithoutCarModelInput>
  }

  export type UserCarCreateManyCarModelInputEnvelope = {
    data: Enumerable<UserCarCreateManyCarModelInput>
    skipDuplicates?: boolean
  }

  export type CarBrandUpsertWithoutModelsInput = {
    update: XOR<CarBrandUpdateWithoutModelsInput, CarBrandUncheckedUpdateWithoutModelsInput>
    create: XOR<CarBrandCreateWithoutModelsInput, CarBrandUncheckedCreateWithoutModelsInput>
  }

  export type CarBrandUpdateWithoutModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarBrandUncheckedUpdateWithoutModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapedCarUpsertWithWhereUniqueWithoutCarModelInput = {
    where: ScrapedCarWhereUniqueInput
    update: XOR<ScrapedCarUpdateWithoutCarModelInput, ScrapedCarUncheckedUpdateWithoutCarModelInput>
    create: XOR<ScrapedCarCreateWithoutCarModelInput, ScrapedCarUncheckedCreateWithoutCarModelInput>
  }

  export type ScrapedCarUpdateWithWhereUniqueWithoutCarModelInput = {
    where: ScrapedCarWhereUniqueInput
    data: XOR<ScrapedCarUpdateWithoutCarModelInput, ScrapedCarUncheckedUpdateWithoutCarModelInput>
  }

  export type ScrapedCarUpdateManyWithWhereWithoutCarModelInput = {
    where: ScrapedCarScalarWhereInput
    data: XOR<ScrapedCarUpdateManyMutationInput, ScrapedCarUncheckedUpdateManyWithoutScrapedCarsInput>
  }

  export type ScrapedCarScalarWhereInput = {
    AND?: Enumerable<ScrapedCarScalarWhereInput>
    OR?: Enumerable<ScrapedCarScalarWhereInput>
    NOT?: Enumerable<ScrapedCarScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    images?: StringNullableListFilter
    fuel?: StringNullableFilter | string | null
    chassis?: StringNullableFilter | string | null
    carModelId?: StringFilter | string
    reference?: StringNullableFilter | string | null
    stockId?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    body?: StringNullableFilter | string | null
    mileage?: StringNullableFilter | string | null
    modelYear?: StringNullableFilter | string | null
  }

  export type DeviceUpsertWithWhereUniqueWithoutCarModelInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutCarModelInput, DeviceUncheckedUpdateWithoutCarModelInput>
    create: XOR<DeviceCreateWithoutCarModelInput, DeviceUncheckedCreateWithoutCarModelInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutCarModelInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutCarModelInput, DeviceUncheckedUpdateWithoutCarModelInput>
  }

  export type DeviceUpdateManyWithWhereWithoutCarModelInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutDevicesInput>
  }

  export type DeviceScalarWhereInput = {
    AND?: Enumerable<DeviceScalarWhereInput>
    OR?: Enumerable<DeviceScalarWhereInput>
    NOT?: Enumerable<DeviceScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    sectionId?: StringFilter | string
    carModelId?: StringFilter | string
    reference?: StringNullableFilter | string | null
    slug?: StringNullableFilter | string | null
  }

  export type UserModelInterestUpsertWithWhereUniqueWithoutCarModelInput = {
    where: UserModelInterestWhereUniqueInput
    update: XOR<UserModelInterestUpdateWithoutCarModelInput, UserModelInterestUncheckedUpdateWithoutCarModelInput>
    create: XOR<UserModelInterestCreateWithoutCarModelInput, UserModelInterestUncheckedCreateWithoutCarModelInput>
  }

  export type UserModelInterestUpdateWithWhereUniqueWithoutCarModelInput = {
    where: UserModelInterestWhereUniqueInput
    data: XOR<UserModelInterestUpdateWithoutCarModelInput, UserModelInterestUncheckedUpdateWithoutCarModelInput>
  }

  export type UserModelInterestUpdateManyWithWhereWithoutCarModelInput = {
    where: UserModelInterestScalarWhereInput
    data: XOR<UserModelInterestUpdateManyMutationInput, UserModelInterestUncheckedUpdateManyWithoutInterestedUsersInput>
  }

  export type UserModelInterestScalarWhereInput = {
    AND?: Enumerable<UserModelInterestScalarWhereInput>
    OR?: Enumerable<UserModelInterestScalarWhereInput>
    NOT?: Enumerable<UserModelInterestScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    carModelId?: StringFilter | string
  }

  export type UserCarUpsertWithWhereUniqueWithoutCarModelInput = {
    where: UserCarWhereUniqueInput
    update: XOR<UserCarUpdateWithoutCarModelInput, UserCarUncheckedUpdateWithoutCarModelInput>
    create: XOR<UserCarCreateWithoutCarModelInput, UserCarUncheckedCreateWithoutCarModelInput>
  }

  export type UserCarUpdateWithWhereUniqueWithoutCarModelInput = {
    where: UserCarWhereUniqueInput
    data: XOR<UserCarUpdateWithoutCarModelInput, UserCarUncheckedUpdateWithoutCarModelInput>
  }

  export type UserCarUpdateManyWithWhereWithoutCarModelInput = {
    where: UserCarScalarWhereInput
    data: XOR<UserCarUpdateManyMutationInput, UserCarUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserCarScalarWhereInput = {
    AND?: Enumerable<UserCarScalarWhereInput>
    OR?: Enumerable<UserCarScalarWhereInput>
    NOT?: Enumerable<UserCarScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    carModelId?: StringFilter | string
    registerNumber?: StringFilter | string
    color?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type DeviceCreateWithoutSectionInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerCreateNestedManyWithoutDeviceInput
    carModel: CarModelCreateNestedOneWithoutDevicesInput
    interestedUsers?: UserDeviceInterestCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutSectionInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    carModelId: string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerUncheckedCreateNestedManyWithoutDeviceInput
    interestedUsers?: UserDeviceInterestUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutSectionInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutSectionInput, DeviceUncheckedCreateWithoutSectionInput>
  }

  export type DeviceCreateManySectionInputEnvelope = {
    data: Enumerable<DeviceCreateManySectionInput>
    skipDuplicates?: boolean
  }

  export type DeviceUpsertWithWhereUniqueWithoutSectionInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutSectionInput, DeviceUncheckedUpdateWithoutSectionInput>
    create: XOR<DeviceCreateWithoutSectionInput, DeviceUncheckedCreateWithoutSectionInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutSectionInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutSectionInput, DeviceUncheckedUpdateWithoutSectionInput>
  }

  export type DeviceUpdateManyWithWhereWithoutSectionInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutDevicesInput>
  }

  export type DeviceDealerCreateWithoutDeviceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
    dealer: DealerCreateNestedOneWithoutDevicesInput
    Stock?: StockCreateNestedOneWithoutDevicesInput
  }

  export type DeviceDealerUncheckedCreateWithoutDeviceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dealerId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    stockId?: string | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type DeviceDealerCreateOrConnectWithoutDeviceInput = {
    where: DeviceDealerWhereUniqueInput
    create: XOR<DeviceDealerCreateWithoutDeviceInput, DeviceDealerUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceDealerCreateManyDeviceInputEnvelope = {
    data: Enumerable<DeviceDealerCreateManyDeviceInput>
    skipDuplicates?: boolean
  }

  export type SectionCreateWithoutDevicesInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
  }

  export type SectionUncheckedCreateWithoutDevicesInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
  }

  export type SectionCreateOrConnectWithoutDevicesInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutDevicesInput, SectionUncheckedCreateWithoutDevicesInput>
  }

  export type CarModelCreateWithoutDevicesInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: CarBrandCreateNestedOneWithoutModelsInput
    scrapedCars?: ScrapedCarCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestCreateNestedManyWithoutCarModelInput
    users?: UserCarCreateNestedManyWithoutCarModelInput
  }

  export type CarModelUncheckedCreateWithoutDevicesInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
    scrapedCars?: ScrapedCarUncheckedCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestUncheckedCreateNestedManyWithoutCarModelInput
    users?: UserCarUncheckedCreateNestedManyWithoutCarModelInput
  }

  export type CarModelCreateOrConnectWithoutDevicesInput = {
    where: CarModelWhereUniqueInput
    create: XOR<CarModelCreateWithoutDevicesInput, CarModelUncheckedCreateWithoutDevicesInput>
  }

  export type UserDeviceInterestCreateWithoutDeviceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInterestedDevicesInput
  }

  export type UserDeviceInterestUncheckedCreateWithoutDeviceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UserDeviceInterestCreateOrConnectWithoutDeviceInput = {
    where: UserDeviceInterestWhereUniqueInput
    create: XOR<UserDeviceInterestCreateWithoutDeviceInput, UserDeviceInterestUncheckedCreateWithoutDeviceInput>
  }

  export type UserDeviceInterestCreateManyDeviceInputEnvelope = {
    data: Enumerable<UserDeviceInterestCreateManyDeviceInput>
    skipDuplicates?: boolean
  }

  export type DeviceDealerUpsertWithWhereUniqueWithoutDeviceInput = {
    where: DeviceDealerWhereUniqueInput
    update: XOR<DeviceDealerUpdateWithoutDeviceInput, DeviceDealerUncheckedUpdateWithoutDeviceInput>
    create: XOR<DeviceDealerCreateWithoutDeviceInput, DeviceDealerUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceDealerUpdateWithWhereUniqueWithoutDeviceInput = {
    where: DeviceDealerWhereUniqueInput
    data: XOR<DeviceDealerUpdateWithoutDeviceInput, DeviceDealerUncheckedUpdateWithoutDeviceInput>
  }

  export type DeviceDealerUpdateManyWithWhereWithoutDeviceInput = {
    where: DeviceDealerScalarWhereInput
    data: XOR<DeviceDealerUpdateManyMutationInput, DeviceDealerUncheckedUpdateManyWithoutDealersInput>
  }

  export type DeviceDealerScalarWhereInput = {
    AND?: Enumerable<DeviceDealerScalarWhereInput>
    OR?: Enumerable<DeviceDealerScalarWhereInput>
    NOT?: Enumerable<DeviceDealerScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deviceId?: StringFilter | string
    dealerId?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    images?: StringNullableListFilter
    originalNumber?: StringNullableFilter | string | null
    manufacturerCode?: StringNullableFilter | string | null
    manufacturer?: StringNullableFilter | string | null
    reference?: StringNullableFilter | string | null
    price?: FloatNullableFilter | number | null
    discount?: FloatNullableFilter | number | null
    stockId?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    subtype?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    quality?: StringNullableFilter | string | null
    articleNumber?: StringNullableFilter | string | null
    isUsed?: BoolNullableFilter | boolean | null
    status?: StringNullableFilter | string | null
    modelYear?: StringNullableFilter | string | null
  }

  export type SectionUpsertWithoutDevicesInput = {
    update: XOR<SectionUpdateWithoutDevicesInput, SectionUncheckedUpdateWithoutDevicesInput>
    create: XOR<SectionCreateWithoutDevicesInput, SectionUncheckedCreateWithoutDevicesInput>
  }

  export type SectionUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SectionUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarModelUpsertWithoutDevicesInput = {
    update: XOR<CarModelUpdateWithoutDevicesInput, CarModelUncheckedUpdateWithoutDevicesInput>
    create: XOR<CarModelCreateWithoutDevicesInput, CarModelUncheckedCreateWithoutDevicesInput>
  }

  export type CarModelUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: CarBrandUpdateOneRequiredWithoutModelsNestedInput
    scrapedCars?: ScrapedCarUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUpdateManyWithoutCarModelNestedInput
    users?: UserCarUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
    scrapedCars?: ScrapedCarUncheckedUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUncheckedUpdateManyWithoutCarModelNestedInput
    users?: UserCarUncheckedUpdateManyWithoutCarModelNestedInput
  }

  export type UserDeviceInterestUpsertWithWhereUniqueWithoutDeviceInput = {
    where: UserDeviceInterestWhereUniqueInput
    update: XOR<UserDeviceInterestUpdateWithoutDeviceInput, UserDeviceInterestUncheckedUpdateWithoutDeviceInput>
    create: XOR<UserDeviceInterestCreateWithoutDeviceInput, UserDeviceInterestUncheckedCreateWithoutDeviceInput>
  }

  export type UserDeviceInterestUpdateWithWhereUniqueWithoutDeviceInput = {
    where: UserDeviceInterestWhereUniqueInput
    data: XOR<UserDeviceInterestUpdateWithoutDeviceInput, UserDeviceInterestUncheckedUpdateWithoutDeviceInput>
  }

  export type UserDeviceInterestUpdateManyWithWhereWithoutDeviceInput = {
    where: UserDeviceInterestScalarWhereInput
    data: XOR<UserDeviceInterestUpdateManyMutationInput, UserDeviceInterestUncheckedUpdateManyWithoutInterestedUsersInput>
  }

  export type UserDeviceInterestScalarWhereInput = {
    AND?: Enumerable<UserDeviceInterestScalarWhereInput>
    OR?: Enumerable<UserDeviceInterestScalarWhereInput>
    NOT?: Enumerable<UserDeviceInterestScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    deviceId?: StringFilter | string
  }

  export type DeviceDealerCreateWithoutDealerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
    device: DeviceCreateNestedOneWithoutDealersInput
    Stock?: StockCreateNestedOneWithoutDevicesInput
  }

  export type DeviceDealerUncheckedCreateWithoutDealerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    stockId?: string | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type DeviceDealerCreateOrConnectWithoutDealerInput = {
    where: DeviceDealerWhereUniqueInput
    create: XOR<DeviceDealerCreateWithoutDealerInput, DeviceDealerUncheckedCreateWithoutDealerInput>
  }

  export type DeviceDealerCreateManyDealerInputEnvelope = {
    data: Enumerable<DeviceDealerCreateManyDealerInput>
    skipDuplicates?: boolean
  }

  export type StockCreateWithoutDealerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    devices?: DeviceDealerCreateNestedManyWithoutStockInput
    ScrapedCar?: ScrapedCarCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutDealerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    devices?: DeviceDealerUncheckedCreateNestedManyWithoutStockInput
    ScrapedCar?: ScrapedCarUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutDealerInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutDealerInput, StockUncheckedCreateWithoutDealerInput>
  }

  export type StockCreateManyDealerInputEnvelope = {
    data: Enumerable<StockCreateManyDealerInput>
    skipDuplicates?: boolean
  }

  export type DeviceDealerUpsertWithWhereUniqueWithoutDealerInput = {
    where: DeviceDealerWhereUniqueInput
    update: XOR<DeviceDealerUpdateWithoutDealerInput, DeviceDealerUncheckedUpdateWithoutDealerInput>
    create: XOR<DeviceDealerCreateWithoutDealerInput, DeviceDealerUncheckedCreateWithoutDealerInput>
  }

  export type DeviceDealerUpdateWithWhereUniqueWithoutDealerInput = {
    where: DeviceDealerWhereUniqueInput
    data: XOR<DeviceDealerUpdateWithoutDealerInput, DeviceDealerUncheckedUpdateWithoutDealerInput>
  }

  export type DeviceDealerUpdateManyWithWhereWithoutDealerInput = {
    where: DeviceDealerScalarWhereInput
    data: XOR<DeviceDealerUpdateManyMutationInput, DeviceDealerUncheckedUpdateManyWithoutDevicesInput>
  }

  export type StockUpsertWithWhereUniqueWithoutDealerInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutDealerInput, StockUncheckedUpdateWithoutDealerInput>
    create: XOR<StockCreateWithoutDealerInput, StockUncheckedCreateWithoutDealerInput>
  }

  export type StockUpdateWithWhereUniqueWithoutDealerInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutDealerInput, StockUncheckedUpdateWithoutDealerInput>
  }

  export type StockUpdateManyWithWhereWithoutDealerInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutStocksInput>
  }

  export type StockScalarWhereInput = {
    AND?: Enumerable<StockScalarWhereInput>
    OR?: Enumerable<StockScalarWhereInput>
    NOT?: Enumerable<StockScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    dealerId?: StringFilter | string
    address?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    longitude?: FloatFilter | number
    latitude?: FloatFilter | number
    openHours?: StringNullableFilter | string | null
  }

  export type DeviceDealerCreateWithoutStockInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
    device: DeviceCreateNestedOneWithoutDealersInput
    dealer: DealerCreateNestedOneWithoutDevicesInput
  }

  export type DeviceDealerUncheckedCreateWithoutStockInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
    dealerId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type DeviceDealerCreateOrConnectWithoutStockInput = {
    where: DeviceDealerWhereUniqueInput
    create: XOR<DeviceDealerCreateWithoutStockInput, DeviceDealerUncheckedCreateWithoutStockInput>
  }

  export type DeviceDealerCreateManyStockInputEnvelope = {
    data: Enumerable<DeviceDealerCreateManyStockInput>
    skipDuplicates?: boolean
  }

  export type DealerCreateWithoutStocksInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    website?: string | null
    phone?: string | null
    email?: string | null
    reference?: string | null
    devices?: DeviceDealerCreateNestedManyWithoutDealerInput
  }

  export type DealerUncheckedCreateWithoutStocksInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    website?: string | null
    phone?: string | null
    email?: string | null
    reference?: string | null
    devices?: DeviceDealerUncheckedCreateNestedManyWithoutDealerInput
  }

  export type DealerCreateOrConnectWithoutStocksInput = {
    where: DealerWhereUniqueInput
    create: XOR<DealerCreateWithoutStocksInput, DealerUncheckedCreateWithoutStocksInput>
  }

  export type ScrapedCarCreateWithoutStockInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    reference?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
    carModel: CarModelCreateNestedOneWithoutScrapedCarsInput
  }

  export type ScrapedCarUncheckedCreateWithoutStockInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    carModelId: string
    reference?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
  }

  export type ScrapedCarCreateOrConnectWithoutStockInput = {
    where: ScrapedCarWhereUniqueInput
    create: XOR<ScrapedCarCreateWithoutStockInput, ScrapedCarUncheckedCreateWithoutStockInput>
  }

  export type ScrapedCarCreateManyStockInputEnvelope = {
    data: Enumerable<ScrapedCarCreateManyStockInput>
    skipDuplicates?: boolean
  }

  export type DeviceDealerUpsertWithWhereUniqueWithoutStockInput = {
    where: DeviceDealerWhereUniqueInput
    update: XOR<DeviceDealerUpdateWithoutStockInput, DeviceDealerUncheckedUpdateWithoutStockInput>
    create: XOR<DeviceDealerCreateWithoutStockInput, DeviceDealerUncheckedCreateWithoutStockInput>
  }

  export type DeviceDealerUpdateWithWhereUniqueWithoutStockInput = {
    where: DeviceDealerWhereUniqueInput
    data: XOR<DeviceDealerUpdateWithoutStockInput, DeviceDealerUncheckedUpdateWithoutStockInput>
  }

  export type DeviceDealerUpdateManyWithWhereWithoutStockInput = {
    where: DeviceDealerScalarWhereInput
    data: XOR<DeviceDealerUpdateManyMutationInput, DeviceDealerUncheckedUpdateManyWithoutDevicesInput>
  }

  export type DealerUpsertWithoutStocksInput = {
    update: XOR<DealerUpdateWithoutStocksInput, DealerUncheckedUpdateWithoutStocksInput>
    create: XOR<DealerCreateWithoutStocksInput, DealerUncheckedCreateWithoutStocksInput>
  }

  export type DealerUpdateWithoutStocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUpdateManyWithoutDealerNestedInput
  }

  export type DealerUncheckedUpdateWithoutStocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUncheckedUpdateManyWithoutDealerNestedInput
  }

  export type ScrapedCarUpsertWithWhereUniqueWithoutStockInput = {
    where: ScrapedCarWhereUniqueInput
    update: XOR<ScrapedCarUpdateWithoutStockInput, ScrapedCarUncheckedUpdateWithoutStockInput>
    create: XOR<ScrapedCarCreateWithoutStockInput, ScrapedCarUncheckedCreateWithoutStockInput>
  }

  export type ScrapedCarUpdateWithWhereUniqueWithoutStockInput = {
    where: ScrapedCarWhereUniqueInput
    data: XOR<ScrapedCarUpdateWithoutStockInput, ScrapedCarUncheckedUpdateWithoutStockInput>
  }

  export type ScrapedCarUpdateManyWithWhereWithoutStockInput = {
    where: ScrapedCarScalarWhereInput
    data: XOR<ScrapedCarUpdateManyMutationInput, ScrapedCarUncheckedUpdateManyWithoutScrapedCarInput>
  }

  export type CarModelCreateWithoutScrapedCarsInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: CarBrandCreateNestedOneWithoutModelsInput
    devices?: DeviceCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestCreateNestedManyWithoutCarModelInput
    users?: UserCarCreateNestedManyWithoutCarModelInput
  }

  export type CarModelUncheckedCreateWithoutScrapedCarsInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
    devices?: DeviceUncheckedCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestUncheckedCreateNestedManyWithoutCarModelInput
    users?: UserCarUncheckedCreateNestedManyWithoutCarModelInput
  }

  export type CarModelCreateOrConnectWithoutScrapedCarsInput = {
    where: CarModelWhereUniqueInput
    create: XOR<CarModelCreateWithoutScrapedCarsInput, CarModelUncheckedCreateWithoutScrapedCarsInput>
  }

  export type StockCreateWithoutScrapedCarInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    devices?: DeviceDealerCreateNestedManyWithoutStockInput
    dealer: DealerCreateNestedOneWithoutStocksInput
  }

  export type StockUncheckedCreateWithoutScrapedCarInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dealerId: string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    devices?: DeviceDealerUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutScrapedCarInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutScrapedCarInput, StockUncheckedCreateWithoutScrapedCarInput>
  }

  export type CarModelUpsertWithoutScrapedCarsInput = {
    update: XOR<CarModelUpdateWithoutScrapedCarsInput, CarModelUncheckedUpdateWithoutScrapedCarsInput>
    create: XOR<CarModelCreateWithoutScrapedCarsInput, CarModelUncheckedCreateWithoutScrapedCarsInput>
  }

  export type CarModelUpdateWithoutScrapedCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: CarBrandUpdateOneRequiredWithoutModelsNestedInput
    devices?: DeviceUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUpdateManyWithoutCarModelNestedInput
    users?: UserCarUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelUncheckedUpdateWithoutScrapedCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
    devices?: DeviceUncheckedUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUncheckedUpdateManyWithoutCarModelNestedInput
    users?: UserCarUncheckedUpdateManyWithoutCarModelNestedInput
  }

  export type StockUpsertWithoutScrapedCarInput = {
    update: XOR<StockUpdateWithoutScrapedCarInput, StockUncheckedUpdateWithoutScrapedCarInput>
    create: XOR<StockCreateWithoutScrapedCarInput, StockUncheckedCreateWithoutScrapedCarInput>
  }

  export type StockUpdateWithoutScrapedCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUpdateManyWithoutStockNestedInput
    dealer?: DealerUpdateOneRequiredWithoutStocksNestedInput
  }

  export type StockUncheckedUpdateWithoutScrapedCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealerId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUncheckedUpdateManyWithoutStockNestedInput
  }

  export type DeviceCreateWithoutDealersInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    slug?: string | null
    section: SectionCreateNestedOneWithoutDevicesInput
    carModel: CarModelCreateNestedOneWithoutDevicesInput
    interestedUsers?: UserDeviceInterestCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutDealersInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionId: string
    carModelId: string
    reference?: string | null
    slug?: string | null
    interestedUsers?: UserDeviceInterestUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutDealersInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutDealersInput, DeviceUncheckedCreateWithoutDealersInput>
  }

  export type DealerCreateWithoutDevicesInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    website?: string | null
    phone?: string | null
    email?: string | null
    reference?: string | null
    stocks?: StockCreateNestedManyWithoutDealerInput
  }

  export type DealerUncheckedCreateWithoutDevicesInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    website?: string | null
    phone?: string | null
    email?: string | null
    reference?: string | null
    stocks?: StockUncheckedCreateNestedManyWithoutDealerInput
  }

  export type DealerCreateOrConnectWithoutDevicesInput = {
    where: DealerWhereUniqueInput
    create: XOR<DealerCreateWithoutDevicesInput, DealerUncheckedCreateWithoutDevicesInput>
  }

  export type StockCreateWithoutDevicesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    dealer: DealerCreateNestedOneWithoutStocksInput
    ScrapedCar?: ScrapedCarCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutDevicesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dealerId: string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
    ScrapedCar?: ScrapedCarUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutDevicesInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutDevicesInput, StockUncheckedCreateWithoutDevicesInput>
  }

  export type DeviceUpsertWithoutDealersInput = {
    update: XOR<DeviceUpdateWithoutDealersInput, DeviceUncheckedUpdateWithoutDealersInput>
    create: XOR<DeviceCreateWithoutDealersInput, DeviceUncheckedCreateWithoutDealersInput>
  }

  export type DeviceUpdateWithoutDealersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    section?: SectionUpdateOneRequiredWithoutDevicesNestedInput
    carModel?: CarModelUpdateOneRequiredWithoutDevicesNestedInput
    interestedUsers?: UserDeviceInterestUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutDealersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    interestedUsers?: UserDeviceInterestUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DealerUpsertWithoutDevicesInput = {
    update: XOR<DealerUpdateWithoutDevicesInput, DealerUncheckedUpdateWithoutDevicesInput>
    create: XOR<DealerCreateWithoutDevicesInput, DealerUncheckedCreateWithoutDevicesInput>
  }

  export type DealerUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    stocks?: StockUpdateManyWithoutDealerNestedInput
  }

  export type DealerUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    stocks?: StockUncheckedUpdateManyWithoutDealerNestedInput
  }

  export type StockUpsertWithoutDevicesInput = {
    update: XOR<StockUpdateWithoutDevicesInput, StockUncheckedUpdateWithoutDevicesInput>
    create: XOR<StockCreateWithoutDevicesInput, StockUncheckedCreateWithoutDevicesInput>
  }

  export type StockUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    dealer?: DealerUpdateOneRequiredWithoutStocksNestedInput
    ScrapedCar?: ScrapedCarUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealerId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    ScrapedCar?: ScrapedCarUncheckedUpdateManyWithoutStockNestedInput
  }

  export type PushTokenCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushTokenCreateOrConnectWithoutUserInput = {
    where: PushTokenWhereUniqueInput
    create: XOR<PushTokenCreateWithoutUserInput, PushTokenUncheckedCreateWithoutUserInput>
  }

  export type PushTokenCreateManyUserInputEnvelope = {
    data: Enumerable<PushTokenCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserModelInterestCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    carModel: CarModelCreateNestedOneWithoutInterestedUsersInput
  }

  export type UserModelInterestUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    carModelId: string
  }

  export type UserModelInterestCreateOrConnectWithoutUserInput = {
    where: UserModelInterestWhereUniqueInput
    create: XOR<UserModelInterestCreateWithoutUserInput, UserModelInterestUncheckedCreateWithoutUserInput>
  }

  export type UserModelInterestCreateManyUserInputEnvelope = {
    data: Enumerable<UserModelInterestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserDeviceInterestCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    device: DeviceCreateNestedOneWithoutInterestedUsersInput
  }

  export type UserDeviceInterestUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
  }

  export type UserDeviceInterestCreateOrConnectWithoutUserInput = {
    where: UserDeviceInterestWhereUniqueInput
    create: XOR<UserDeviceInterestCreateWithoutUserInput, UserDeviceInterestUncheckedCreateWithoutUserInput>
  }

  export type UserDeviceInterestCreateManyUserInputEnvelope = {
    data: Enumerable<UserDeviceInterestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserCarCreateWithoutUserInput = {
    id?: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
    carModel: CarModelCreateNestedOneWithoutUsersInput
  }

  export type UserCarUncheckedCreateWithoutUserInput = {
    id?: string
    carModelId: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCarCreateOrConnectWithoutUserInput = {
    where: UserCarWhereUniqueInput
    create: XOR<UserCarCreateWithoutUserInput, UserCarUncheckedCreateWithoutUserInput>
  }

  export type UserCarCreateManyUserInputEnvelope = {
    data: Enumerable<UserCarCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserAddressCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
  }

  export type UserAddressUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
  }

  export type UserAddressCreateOrConnectWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    create: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput>
  }

  export type UserAddressCreateManyUserInputEnvelope = {
    data: Enumerable<UserAddressCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PushTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: PushTokenWhereUniqueInput
    update: XOR<PushTokenUpdateWithoutUserInput, PushTokenUncheckedUpdateWithoutUserInput>
    create: XOR<PushTokenCreateWithoutUserInput, PushTokenUncheckedCreateWithoutUserInput>
  }

  export type PushTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: PushTokenWhereUniqueInput
    data: XOR<PushTokenUpdateWithoutUserInput, PushTokenUncheckedUpdateWithoutUserInput>
  }

  export type PushTokenUpdateManyWithWhereWithoutUserInput = {
    where: PushTokenScalarWhereInput
    data: XOR<PushTokenUpdateManyMutationInput, PushTokenUncheckedUpdateManyWithoutPushTokensInput>
  }

  export type PushTokenScalarWhereInput = {
    AND?: Enumerable<PushTokenScalarWhereInput>
    OR?: Enumerable<PushTokenScalarWhereInput>
    NOT?: Enumerable<PushTokenScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserModelInterestUpsertWithWhereUniqueWithoutUserInput = {
    where: UserModelInterestWhereUniqueInput
    update: XOR<UserModelInterestUpdateWithoutUserInput, UserModelInterestUncheckedUpdateWithoutUserInput>
    create: XOR<UserModelInterestCreateWithoutUserInput, UserModelInterestUncheckedCreateWithoutUserInput>
  }

  export type UserModelInterestUpdateWithWhereUniqueWithoutUserInput = {
    where: UserModelInterestWhereUniqueInput
    data: XOR<UserModelInterestUpdateWithoutUserInput, UserModelInterestUncheckedUpdateWithoutUserInput>
  }

  export type UserModelInterestUpdateManyWithWhereWithoutUserInput = {
    where: UserModelInterestScalarWhereInput
    data: XOR<UserModelInterestUpdateManyMutationInput, UserModelInterestUncheckedUpdateManyWithoutInterestedModelsInput>
  }

  export type UserDeviceInterestUpsertWithWhereUniqueWithoutUserInput = {
    where: UserDeviceInterestWhereUniqueInput
    update: XOR<UserDeviceInterestUpdateWithoutUserInput, UserDeviceInterestUncheckedUpdateWithoutUserInput>
    create: XOR<UserDeviceInterestCreateWithoutUserInput, UserDeviceInterestUncheckedCreateWithoutUserInput>
  }

  export type UserDeviceInterestUpdateWithWhereUniqueWithoutUserInput = {
    where: UserDeviceInterestWhereUniqueInput
    data: XOR<UserDeviceInterestUpdateWithoutUserInput, UserDeviceInterestUncheckedUpdateWithoutUserInput>
  }

  export type UserDeviceInterestUpdateManyWithWhereWithoutUserInput = {
    where: UserDeviceInterestScalarWhereInput
    data: XOR<UserDeviceInterestUpdateManyMutationInput, UserDeviceInterestUncheckedUpdateManyWithoutInterestedDevicesInput>
  }

  export type UserCarUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCarWhereUniqueInput
    update: XOR<UserCarUpdateWithoutUserInput, UserCarUncheckedUpdateWithoutUserInput>
    create: XOR<UserCarCreateWithoutUserInput, UserCarUncheckedCreateWithoutUserInput>
  }

  export type UserCarUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCarWhereUniqueInput
    data: XOR<UserCarUpdateWithoutUserInput, UserCarUncheckedUpdateWithoutUserInput>
  }

  export type UserCarUpdateManyWithWhereWithoutUserInput = {
    where: UserCarScalarWhereInput
    data: XOR<UserCarUpdateManyMutationInput, UserCarUncheckedUpdateManyWithoutCarsInput>
  }

  export type UserAddressUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    update: XOR<UserAddressUpdateWithoutUserInput, UserAddressUncheckedUpdateWithoutUserInput>
    create: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput>
  }

  export type UserAddressUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    data: XOR<UserAddressUpdateWithoutUserInput, UserAddressUncheckedUpdateWithoutUserInput>
  }

  export type UserAddressUpdateManyWithWhereWithoutUserInput = {
    where: UserAddressScalarWhereInput
    data: XOR<UserAddressUpdateManyMutationInput, UserAddressUncheckedUpdateManyWithoutAddressesInput>
  }

  export type UserAddressScalarWhereInput = {
    AND?: Enumerable<UserAddressScalarWhereInput>
    OR?: Enumerable<UserAddressScalarWhereInput>
    NOT?: Enumerable<UserAddressScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    address?: StringFilter | string
    longitude?: FloatFilter | number
    latitude?: FloatFilter | number
    city?: StringFilter | string
    country?: StringFilter | string
    isDefault?: BoolFilter | boolean
  }

  export type UserCreateWithoutInterestedModelsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestCreateNestedManyWithoutUserInput
    cars?: UserCarCreateNestedManyWithoutUserInput
    addresses?: UserAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInterestedModelsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenUncheckedCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestUncheckedCreateNestedManyWithoutUserInput
    cars?: UserCarUncheckedCreateNestedManyWithoutUserInput
    addresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInterestedModelsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInterestedModelsInput, UserUncheckedCreateWithoutInterestedModelsInput>
  }

  export type CarModelCreateWithoutInterestedUsersInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: CarBrandCreateNestedOneWithoutModelsInput
    scrapedCars?: ScrapedCarCreateNestedManyWithoutCarModelInput
    devices?: DeviceCreateNestedManyWithoutCarModelInput
    users?: UserCarCreateNestedManyWithoutCarModelInput
  }

  export type CarModelUncheckedCreateWithoutInterestedUsersInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
    scrapedCars?: ScrapedCarUncheckedCreateNestedManyWithoutCarModelInput
    devices?: DeviceUncheckedCreateNestedManyWithoutCarModelInput
    users?: UserCarUncheckedCreateNestedManyWithoutCarModelInput
  }

  export type CarModelCreateOrConnectWithoutInterestedUsersInput = {
    where: CarModelWhereUniqueInput
    create: XOR<CarModelCreateWithoutInterestedUsersInput, CarModelUncheckedCreateWithoutInterestedUsersInput>
  }

  export type UserUpsertWithoutInterestedModelsInput = {
    update: XOR<UserUpdateWithoutInterestedModelsInput, UserUncheckedUpdateWithoutInterestedModelsInput>
    create: XOR<UserCreateWithoutInterestedModelsInput, UserUncheckedCreateWithoutInterestedModelsInput>
  }

  export type UserUpdateWithoutInterestedModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUpdateManyWithoutUserNestedInput
    cars?: UserCarUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInterestedModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUncheckedUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUncheckedUpdateManyWithoutUserNestedInput
    cars?: UserCarUncheckedUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CarModelUpsertWithoutInterestedUsersInput = {
    update: XOR<CarModelUpdateWithoutInterestedUsersInput, CarModelUncheckedUpdateWithoutInterestedUsersInput>
    create: XOR<CarModelCreateWithoutInterestedUsersInput, CarModelUncheckedCreateWithoutInterestedUsersInput>
  }

  export type CarModelUpdateWithoutInterestedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: CarBrandUpdateOneRequiredWithoutModelsNestedInput
    scrapedCars?: ScrapedCarUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUpdateManyWithoutCarModelNestedInput
    users?: UserCarUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelUncheckedUpdateWithoutInterestedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
    scrapedCars?: ScrapedCarUncheckedUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutCarModelNestedInput
    users?: UserCarUncheckedUpdateManyWithoutCarModelNestedInput
  }

  export type UserCreateWithoutInterestedDevicesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestCreateNestedManyWithoutUserInput
    cars?: UserCarCreateNestedManyWithoutUserInput
    addresses?: UserAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInterestedDevicesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenUncheckedCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestUncheckedCreateNestedManyWithoutUserInput
    cars?: UserCarUncheckedCreateNestedManyWithoutUserInput
    addresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInterestedDevicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInterestedDevicesInput, UserUncheckedCreateWithoutInterestedDevicesInput>
  }

  export type DeviceCreateWithoutInterestedUsersInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerCreateNestedManyWithoutDeviceInput
    section: SectionCreateNestedOneWithoutDevicesInput
    carModel: CarModelCreateNestedOneWithoutDevicesInput
  }

  export type DeviceUncheckedCreateWithoutInterestedUsersInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionId: string
    carModelId: string
    reference?: string | null
    slug?: string | null
    dealers?: DeviceDealerUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutInterestedUsersInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutInterestedUsersInput, DeviceUncheckedCreateWithoutInterestedUsersInput>
  }

  export type UserUpsertWithoutInterestedDevicesInput = {
    update: XOR<UserUpdateWithoutInterestedDevicesInput, UserUncheckedUpdateWithoutInterestedDevicesInput>
    create: XOR<UserCreateWithoutInterestedDevicesInput, UserUncheckedCreateWithoutInterestedDevicesInput>
  }

  export type UserUpdateWithoutInterestedDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUpdateManyWithoutUserNestedInput
    cars?: UserCarUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInterestedDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUncheckedUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUncheckedUpdateManyWithoutUserNestedInput
    cars?: UserCarUncheckedUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DeviceUpsertWithoutInterestedUsersInput = {
    update: XOR<DeviceUpdateWithoutInterestedUsersInput, DeviceUncheckedUpdateWithoutInterestedUsersInput>
    create: XOR<DeviceCreateWithoutInterestedUsersInput, DeviceUncheckedCreateWithoutInterestedUsersInput>
  }

  export type DeviceUpdateWithoutInterestedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUpdateManyWithoutDeviceNestedInput
    section?: SectionUpdateOneRequiredWithoutDevicesNestedInput
    carModel?: CarModelUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type DeviceUncheckedUpdateWithoutInterestedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type UserCreateWithoutPushTokensInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    interestedModels?: UserModelInterestCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestCreateNestedManyWithoutUserInput
    cars?: UserCarCreateNestedManyWithoutUserInput
    addresses?: UserAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPushTokensInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    interestedModels?: UserModelInterestUncheckedCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestUncheckedCreateNestedManyWithoutUserInput
    cars?: UserCarUncheckedCreateNestedManyWithoutUserInput
    addresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPushTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPushTokensInput, UserUncheckedCreateWithoutPushTokensInput>
  }

  export type UserUpsertWithoutPushTokensInput = {
    update: XOR<UserUpdateWithoutPushTokensInput, UserUncheckedUpdateWithoutPushTokensInput>
    create: XOR<UserCreateWithoutPushTokensInput, UserUncheckedCreateWithoutPushTokensInput>
  }

  export type UserUpdateWithoutPushTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    interestedModels?: UserModelInterestUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUpdateManyWithoutUserNestedInput
    cars?: UserCarUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPushTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    interestedModels?: UserModelInterestUncheckedUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUncheckedUpdateManyWithoutUserNestedInput
    cars?: UserCarUncheckedUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCarsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestCreateNestedManyWithoutUserInput
    addresses?: UserAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCarsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenUncheckedCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestUncheckedCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestUncheckedCreateNestedManyWithoutUserInput
    addresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCarsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCarsInput, UserUncheckedCreateWithoutCarsInput>
  }

  export type CarModelCreateWithoutUsersInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: CarBrandCreateNestedOneWithoutModelsInput
    scrapedCars?: ScrapedCarCreateNestedManyWithoutCarModelInput
    devices?: DeviceCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestCreateNestedManyWithoutCarModelInput
  }

  export type CarModelUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brandId: string
    scrapedCars?: ScrapedCarUncheckedCreateNestedManyWithoutCarModelInput
    devices?: DeviceUncheckedCreateNestedManyWithoutCarModelInput
    interestedUsers?: UserModelInterestUncheckedCreateNestedManyWithoutCarModelInput
  }

  export type CarModelCreateOrConnectWithoutUsersInput = {
    where: CarModelWhereUniqueInput
    create: XOR<CarModelCreateWithoutUsersInput, CarModelUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutCarsInput = {
    update: XOR<UserUpdateWithoutCarsInput, UserUncheckedUpdateWithoutCarsInput>
    create: XOR<UserCreateWithoutCarsInput, UserUncheckedCreateWithoutCarsInput>
  }

  export type UserUpdateWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUncheckedUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUncheckedUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUncheckedUpdateManyWithoutUserNestedInput
    addresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CarModelUpsertWithoutUsersInput = {
    update: XOR<CarModelUpdateWithoutUsersInput, CarModelUncheckedUpdateWithoutUsersInput>
    create: XOR<CarModelCreateWithoutUsersInput, CarModelUncheckedCreateWithoutUsersInput>
  }

  export type CarModelUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: CarBrandUpdateOneRequiredWithoutModelsNestedInput
    scrapedCars?: ScrapedCarUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandId?: StringFieldUpdateOperationsInput | string
    scrapedCars?: ScrapedCarUncheckedUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUncheckedUpdateManyWithoutCarModelNestedInput
  }

  export type CarCenterServiceCreateWithoutCarCenterInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carService: CarServiceCreateNestedOneWithoutCentersInput
  }

  export type CarCenterServiceUncheckedCreateWithoutCarCenterInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carServiceId: string
  }

  export type CarCenterServiceCreateOrConnectWithoutCarCenterInput = {
    where: CarCenterServiceWhereUniqueInput
    create: XOR<CarCenterServiceCreateWithoutCarCenterInput, CarCenterServiceUncheckedCreateWithoutCarCenterInput>
  }

  export type CarCenterServiceCreateManyCarCenterInputEnvelope = {
    data: Enumerable<CarCenterServiceCreateManyCarCenterInput>
    skipDuplicates?: boolean
  }

  export type CarCenterServiceUpsertWithWhereUniqueWithoutCarCenterInput = {
    where: CarCenterServiceWhereUniqueInput
    update: XOR<CarCenterServiceUpdateWithoutCarCenterInput, CarCenterServiceUncheckedUpdateWithoutCarCenterInput>
    create: XOR<CarCenterServiceCreateWithoutCarCenterInput, CarCenterServiceUncheckedCreateWithoutCarCenterInput>
  }

  export type CarCenterServiceUpdateWithWhereUniqueWithoutCarCenterInput = {
    where: CarCenterServiceWhereUniqueInput
    data: XOR<CarCenterServiceUpdateWithoutCarCenterInput, CarCenterServiceUncheckedUpdateWithoutCarCenterInput>
  }

  export type CarCenterServiceUpdateManyWithWhereWithoutCarCenterInput = {
    where: CarCenterServiceScalarWhereInput
    data: XOR<CarCenterServiceUpdateManyMutationInput, CarCenterServiceUncheckedUpdateManyWithoutServicesInput>
  }

  export type CarCenterServiceScalarWhereInput = {
    AND?: Enumerable<CarCenterServiceScalarWhereInput>
    OR?: Enumerable<CarCenterServiceScalarWhereInput>
    NOT?: Enumerable<CarCenterServiceScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    reference?: StringNullableFilter | string | null
    price?: FloatFilter | number
    description?: StringNullableFilter | string | null
    carCenterId?: StringFilter | string
    carServiceId?: StringFilter | string
  }

  export type CarCenterServiceCreateWithoutCarServiceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carCenter: CarCenterCreateNestedOneWithoutServicesInput
  }

  export type CarCenterServiceUncheckedCreateWithoutCarServiceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carCenterId: string
  }

  export type CarCenterServiceCreateOrConnectWithoutCarServiceInput = {
    where: CarCenterServiceWhereUniqueInput
    create: XOR<CarCenterServiceCreateWithoutCarServiceInput, CarCenterServiceUncheckedCreateWithoutCarServiceInput>
  }

  export type CarCenterServiceCreateManyCarServiceInputEnvelope = {
    data: Enumerable<CarCenterServiceCreateManyCarServiceInput>
    skipDuplicates?: boolean
  }

  export type CarCenterServiceUpsertWithWhereUniqueWithoutCarServiceInput = {
    where: CarCenterServiceWhereUniqueInput
    update: XOR<CarCenterServiceUpdateWithoutCarServiceInput, CarCenterServiceUncheckedUpdateWithoutCarServiceInput>
    create: XOR<CarCenterServiceCreateWithoutCarServiceInput, CarCenterServiceUncheckedCreateWithoutCarServiceInput>
  }

  export type CarCenterServiceUpdateWithWhereUniqueWithoutCarServiceInput = {
    where: CarCenterServiceWhereUniqueInput
    data: XOR<CarCenterServiceUpdateWithoutCarServiceInput, CarCenterServiceUncheckedUpdateWithoutCarServiceInput>
  }

  export type CarCenterServiceUpdateManyWithWhereWithoutCarServiceInput = {
    where: CarCenterServiceScalarWhereInput
    data: XOR<CarCenterServiceUpdateManyMutationInput, CarCenterServiceUncheckedUpdateManyWithoutCentersInput>
  }

  export type CarCenterCreateWithoutServicesInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
    longitude: number
    latitude: number
    address?: string | null
    telephone?: string | null
    email?: string | null
  }

  export type CarCenterUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    slug?: string | null
    reference?: string | null
    longitude: number
    latitude: number
    address?: string | null
    telephone?: string | null
    email?: string | null
  }

  export type CarCenterCreateOrConnectWithoutServicesInput = {
    where: CarCenterWhereUniqueInput
    create: XOR<CarCenterCreateWithoutServicesInput, CarCenterUncheckedCreateWithoutServicesInput>
  }

  export type CarServiceCreateWithoutCentersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    image?: string | null
    updatedAt?: Date | string
  }

  export type CarServiceUncheckedCreateWithoutCentersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    image?: string | null
    updatedAt?: Date | string
  }

  export type CarServiceCreateOrConnectWithoutCentersInput = {
    where: CarServiceWhereUniqueInput
    create: XOR<CarServiceCreateWithoutCentersInput, CarServiceUncheckedCreateWithoutCentersInput>
  }

  export type CarCenterUpsertWithoutServicesInput = {
    update: XOR<CarCenterUpdateWithoutServicesInput, CarCenterUncheckedUpdateWithoutServicesInput>
    create: XOR<CarCenterCreateWithoutServicesInput, CarCenterUncheckedCreateWithoutServicesInput>
  }

  export type CarCenterUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarCenterUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarServiceUpsertWithoutCentersInput = {
    update: XOR<CarServiceUpdateWithoutCentersInput, CarServiceUncheckedUpdateWithoutCentersInput>
    create: XOR<CarServiceCreateWithoutCentersInput, CarServiceUncheckedCreateWithoutCentersInput>
  }

  export type CarServiceUpdateWithoutCentersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarServiceUncheckedUpdateWithoutCentersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAddressesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestCreateNestedManyWithoutUserInput
    cars?: UserCarCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string
    appleId?: string | null
    stripeId?: string | null
    telephone?: string | null
    pushTokens?: PushTokenUncheckedCreateNestedManyWithoutUserInput
    interestedModels?: UserModelInterestUncheckedCreateNestedManyWithoutUserInput
    interestedDevices?: UserDeviceInterestUncheckedCreateNestedManyWithoutUserInput
    cars?: UserCarUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type UserUpsertWithoutAddressesInput = {
    update: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type UserUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUpdateManyWithoutUserNestedInput
    cars?: UserCarUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    pushTokens?: PushTokenUncheckedUpdateManyWithoutUserNestedInput
    interestedModels?: UserModelInterestUncheckedUpdateManyWithoutUserNestedInput
    interestedDevices?: UserDeviceInterestUncheckedUpdateManyWithoutUserNestedInput
    cars?: UserCarUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CarModelCreateManyBrandInput = {
    id?: string
    name: string
    image?: string | null
    reference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarModelUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scrapedCars?: ScrapedCarUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUpdateManyWithoutCarModelNestedInput
    users?: UserCarUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scrapedCars?: ScrapedCarUncheckedUpdateManyWithoutCarModelNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutCarModelNestedInput
    interestedUsers?: UserModelInterestUncheckedUpdateManyWithoutCarModelNestedInput
    users?: UserCarUncheckedUpdateManyWithoutCarModelNestedInput
  }

  export type CarModelUncheckedUpdateManyWithoutModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapedCarCreateManyCarModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    reference?: string | null
    stockId?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
  }

  export type DeviceCreateManyCarModelInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionId: string
    reference?: string | null
    slug?: string | null
  }

  export type UserModelInterestCreateManyCarModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UserCarCreateManyCarModelInput = {
    id?: string
    userId: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapedCarUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
    Stock?: StockUpdateOneWithoutScrapedCarNestedInput
  }

  export type ScrapedCarUncheckedUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScrapedCarUncheckedUpdateManyWithoutScrapedCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUpdateManyWithoutDeviceNestedInput
    section?: SectionUpdateOneRequiredWithoutDevicesNestedInput
    interestedUsers?: UserDeviceInterestUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUncheckedUpdateManyWithoutDeviceNestedInput
    interestedUsers?: UserDeviceInterestUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateManyWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserModelInterestUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInterestedModelsNestedInput
  }

  export type UserModelInterestUncheckedUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserModelInterestUncheckedUpdateManyWithoutInterestedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCarUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCarsNestedInput
  }

  export type UserCarUncheckedUpdateWithoutCarModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCarUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceCreateManySectionInput = {
    id?: string
    name: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    carModelId: string
    reference?: string | null
    slug?: string | null
  }

  export type DeviceUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUpdateManyWithoutDeviceNestedInput
    carModel?: CarModelUpdateOneRequiredWithoutDevicesNestedInput
    interestedUsers?: UserDeviceInterestUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    dealers?: DeviceDealerUncheckedUpdateManyWithoutDeviceNestedInput
    interestedUsers?: UserDeviceInterestUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceDealerCreateManyDeviceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dealerId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    stockId?: string | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type UserDeviceInterestCreateManyDeviceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type DeviceDealerUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
    dealer?: DealerUpdateOneRequiredWithoutDevicesNestedInput
    Stock?: StockUpdateOneWithoutDevicesNestedInput
  }

  export type DeviceDealerUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceDealerUncheckedUpdateManyWithoutDealersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserDeviceInterestUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInterestedDevicesNestedInput
  }

  export type UserDeviceInterestUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceInterestUncheckedUpdateManyWithoutInterestedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceDealerCreateManyDealerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    stockId?: string | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type StockCreateManyDealerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: string | null
    phone?: string | null
    email?: string | null
    longitude: number
    latitude: number
    openHours?: string | null
  }

  export type DeviceDealerUpdateWithoutDealerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
    device?: DeviceUpdateOneRequiredWithoutDealersNestedInput
    Stock?: StockUpdateOneWithoutDevicesNestedInput
  }

  export type DeviceDealerUncheckedUpdateWithoutDealerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deviceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceDealerUncheckedUpdateManyWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deviceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    stockId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockUpdateWithoutDealerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUpdateManyWithoutStockNestedInput
    ScrapedCar?: ScrapedCarUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutDealerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: DeviceDealerUncheckedUpdateManyWithoutStockNestedInput
    ScrapedCar?: ScrapedCarUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutStocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    openHours?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceDealerCreateManyStockInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
    dealerId: string
    name: string
    image?: string | null
    images?: DeviceDealerCreateimagesInput | Enumerable<string>
    originalNumber?: string | null
    manufacturerCode?: string | null
    manufacturer?: string | null
    reference?: string | null
    price?: number | null
    discount?: number | null
    type?: string | null
    subtype?: string | null
    description?: string | null
    quality?: string | null
    articleNumber?: string | null
    isUsed?: boolean | null
    status?: string | null
    modelYear?: string | null
  }

  export type ScrapedCarCreateManyStockInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string | null
    images?: ScrapedCarCreateimagesInput | Enumerable<string>
    fuel?: string | null
    chassis?: string | null
    carModelId: string
    reference?: string | null
    description?: string | null
    body?: string | null
    mileage?: string | null
    modelYear?: string | null
  }

  export type DeviceDealerUpdateWithoutStockInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
    device?: DeviceUpdateOneRequiredWithoutDealersNestedInput
    dealer?: DealerUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type DeviceDealerUncheckedUpdateWithoutStockInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deviceId?: StringFieldUpdateOperationsInput | string
    dealerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: DeviceDealerUpdateimagesInput | Enumerable<string>
    originalNumber?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturerCode?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    subtype?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quality?: NullableStringFieldUpdateOperationsInput | string | null
    articleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScrapedCarUpdateWithoutStockInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
    carModel?: CarModelUpdateOneRequiredWithoutScrapedCarsNestedInput
  }

  export type ScrapedCarUncheckedUpdateWithoutStockInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScrapedCarUncheckedUpdateManyWithoutScrapedCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ScrapedCarUpdateimagesInput | Enumerable<string>
    fuel?: NullableStringFieldUpdateOperationsInput | string | null
    chassis?: NullableStringFieldUpdateOperationsInput | string | null
    carModelId?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    mileage?: NullableStringFieldUpdateOperationsInput | string | null
    modelYear?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PushTokenCreateManyUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserModelInterestCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    carModelId: string
  }

  export type UserDeviceInterestCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deviceId: string
  }

  export type UserCarCreateManyUserInput = {
    id?: string
    carModelId: string
    registerNumber: string
    color: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAddressCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    address: string
    longitude: number
    latitude: number
    city: string
    country: string
    isDefault: boolean
  }

  export type PushTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushTokenUncheckedUpdateManyWithoutPushTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserModelInterestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carModel?: CarModelUpdateOneRequiredWithoutInterestedUsersNestedInput
  }

  export type UserModelInterestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carModelId?: StringFieldUpdateOperationsInput | string
  }

  export type UserModelInterestUncheckedUpdateManyWithoutInterestedModelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carModelId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceInterestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: DeviceUpdateOneRequiredWithoutInterestedUsersNestedInput
  }

  export type UserDeviceInterestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type UserDeviceInterestUncheckedUpdateManyWithoutInterestedDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCarUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carModel?: CarModelUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserCarUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCarUncheckedUpdateManyWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    carModelId?: StringFieldUpdateOperationsInput | string
    registerNumber?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserAddressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserAddressUncheckedUpdateManyWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CarCenterServiceCreateManyCarCenterInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carServiceId: string
  }

  export type CarCenterServiceUpdateWithoutCarCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carService?: CarServiceUpdateOneRequiredWithoutCentersNestedInput
  }

  export type CarCenterServiceUncheckedUpdateWithoutCarCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carServiceId?: StringFieldUpdateOperationsInput | string
  }

  export type CarCenterServiceUncheckedUpdateManyWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carServiceId?: StringFieldUpdateOperationsInput | string
  }

  export type CarCenterServiceCreateManyCarServiceInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reference?: string | null
    price: number
    description?: string | null
    carCenterId: string
  }

  export type CarCenterServiceUpdateWithoutCarServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carCenter?: CarCenterUpdateOneRequiredWithoutServicesNestedInput
  }

  export type CarCenterServiceUncheckedUpdateWithoutCarServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carCenterId?: StringFieldUpdateOperationsInput | string
  }

  export type CarCenterServiceUncheckedUpdateManyWithoutCentersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    carCenterId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}